
GpsImuSynchrotimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  0800c558  0800c558  0001c558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd8c  0800cd8c  0002023c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd8c  0800cd8c  0001cd8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd94  0800cd94  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd94  0800cd94  0001cd94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd98  0800cd98  0001cd98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800cd9c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002023c  2**0
                  CONTENTS
 10 .bss          000007d4  2000023c  2000023c  0002023c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  20000a10  20000a10  0002023c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000ffdf  00000000  00000000  000202af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027e2  00000000  00000000  0003028e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e58  00000000  00000000  00032a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b1c  00000000  00000000  000338c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022e68  00000000  00000000  000343e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000134ff  00000000  00000000  0005724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd512  00000000  00000000  0006a74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005600  00000000  00000000  00137c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000044  00000000  00000000  0013d260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c53c 	.word	0x0800c53c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	0800c53c 	.word	0x0800c53c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a6 	b.w	800100c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9e08      	ldr	r6, [sp, #32]
 8000d4a:	460d      	mov	r5, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	460f      	mov	r7, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4694      	mov	ip, r2
 8000d58:	d965      	bls.n	8000e26 <__udivmoddi4+0xe2>
 8000d5a:	fab2 f382 	clz	r3, r2
 8000d5e:	b143      	cbz	r3, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	f1c3 0220 	rsb	r2, r3, #32
 8000d68:	409f      	lsls	r7, r3
 8000d6a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6e:	4317      	orrs	r7, r2
 8000d70:	409c      	lsls	r4, r3
 8000d72:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d76:	fa1f f58c 	uxth.w	r5, ip
 8000d7a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d7e:	0c22      	lsrs	r2, r4, #16
 8000d80:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d84:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d88:	fb01 f005 	mul.w	r0, r1, r5
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d90:	eb1c 0202 	adds.w	r2, ip, r2
 8000d94:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d98:	f080 811c 	bcs.w	8000fd4 <__udivmoddi4+0x290>
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	f240 8119 	bls.w	8000fd4 <__udivmoddi4+0x290>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4462      	add	r2, ip
 8000da6:	1a12      	subs	r2, r2, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000db6:	fb00 f505 	mul.w	r5, r0, r5
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	d90a      	bls.n	8000dd4 <__udivmoddi4+0x90>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc6:	f080 8107 	bcs.w	8000fd8 <__udivmoddi4+0x294>
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	f240 8104 	bls.w	8000fd8 <__udivmoddi4+0x294>
 8000dd0:	4464      	add	r4, ip
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11e      	cbz	r6, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40dc      	lsrs	r4, r3
 8000de0:	2300      	movs	r3, #0
 8000de2:	e9c6 4300 	strd	r4, r3, [r6]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0xbc>
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	f000 80ed 	beq.w	8000fce <__udivmoddi4+0x28a>
 8000df4:	2100      	movs	r1, #0
 8000df6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e00:	fab3 f183 	clz	r1, r3
 8000e04:	2900      	cmp	r1, #0
 8000e06:	d149      	bne.n	8000e9c <__udivmoddi4+0x158>
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	d302      	bcc.n	8000e12 <__udivmoddi4+0xce>
 8000e0c:	4282      	cmp	r2, r0
 8000e0e:	f200 80f8 	bhi.w	8001002 <__udivmoddi4+0x2be>
 8000e12:	1a84      	subs	r4, r0, r2
 8000e14:	eb65 0203 	sbc.w	r2, r5, r3
 8000e18:	2001      	movs	r0, #1
 8000e1a:	4617      	mov	r7, r2
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d0e2      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	e9c6 4700 	strd	r4, r7, [r6]
 8000e24:	e7df      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e26:	b902      	cbnz	r2, 8000e2a <__udivmoddi4+0xe6>
 8000e28:	deff      	udf	#255	; 0xff
 8000e2a:	fab2 f382 	clz	r3, r2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 8090 	bne.w	8000f54 <__udivmoddi4+0x210>
 8000e34:	1a8a      	subs	r2, r1, r2
 8000e36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	2101      	movs	r1, #1
 8000e40:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e44:	fb07 2015 	mls	r0, r7, r5, r2
 8000e48:	0c22      	lsrs	r2, r4, #16
 8000e4a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4e:	fb0e f005 	mul.w	r0, lr, r5
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x124>
 8000e56:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x122>
 8000e60:	4290      	cmp	r0, r2
 8000e62:	f200 80cb 	bhi.w	8000ffc <__udivmoddi4+0x2b8>
 8000e66:	4645      	mov	r5, r8
 8000e68:	1a12      	subs	r2, r2, r0
 8000e6a:	b2a4      	uxth	r4, r4
 8000e6c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e70:	fb07 2210 	mls	r2, r7, r0, r2
 8000e74:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e78:	fb0e fe00 	mul.w	lr, lr, r0
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x14e>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x14c>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	f200 80bb 	bhi.w	8001006 <__udivmoddi4+0x2c2>
 8000e90:	4610      	mov	r0, r2
 8000e92:	eba4 040e 	sub.w	r4, r4, lr
 8000e96:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e9a:	e79f      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e9c:	f1c1 0720 	rsb	r7, r1, #32
 8000ea0:	408b      	lsls	r3, r1
 8000ea2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ea6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eaa:	fa05 f401 	lsl.w	r4, r5, r1
 8000eae:	fa20 f307 	lsr.w	r3, r0, r7
 8000eb2:	40fd      	lsrs	r5, r7
 8000eb4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb8:	4323      	orrs	r3, r4
 8000eba:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ebe:	fa1f fe8c 	uxth.w	lr, ip
 8000ec2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ec6:	0c1c      	lsrs	r4, r3, #16
 8000ec8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ecc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eda:	d90b      	bls.n	8000ef4 <__udivmoddi4+0x1b0>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ee4:	f080 8088 	bcs.w	8000ff8 <__udivmoddi4+0x2b4>
 8000ee8:	42a5      	cmp	r5, r4
 8000eea:	f240 8085 	bls.w	8000ff8 <__udivmoddi4+0x2b4>
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	4464      	add	r4, ip
 8000ef4:	1b64      	subs	r4, r4, r5
 8000ef6:	b29d      	uxth	r5, r3
 8000ef8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000efc:	fb09 4413 	mls	r4, r9, r3, r4
 8000f00:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f04:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x1da>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f14:	d26c      	bcs.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f16:	45a6      	cmp	lr, r4
 8000f18:	d96a      	bls.n	8000ff0 <__udivmoddi4+0x2ac>
 8000f1a:	3b02      	subs	r3, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f22:	fba3 9502 	umull	r9, r5, r3, r2
 8000f26:	eba4 040e 	sub.w	r4, r4, lr
 8000f2a:	42ac      	cmp	r4, r5
 8000f2c:	46c8      	mov	r8, r9
 8000f2e:	46ae      	mov	lr, r5
 8000f30:	d356      	bcc.n	8000fe0 <__udivmoddi4+0x29c>
 8000f32:	d053      	beq.n	8000fdc <__udivmoddi4+0x298>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x208>
 8000f36:	ebb0 0208 	subs.w	r2, r0, r8
 8000f3a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40ca      	lsrs	r2, r1
 8000f44:	40cc      	lsrs	r4, r1
 8000f46:	4317      	orrs	r7, r2
 8000f48:	e9c6 7400 	strd	r7, r4, [r6]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	2100      	movs	r1, #0
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	f1c3 0120 	rsb	r1, r3, #32
 8000f58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f5c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f60:	fa25 f101 	lsr.w	r1, r5, r1
 8000f64:	409d      	lsls	r5, r3
 8000f66:	432a      	orrs	r2, r5
 8000f68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f74:	fb07 1510 	mls	r5, r7, r0, r1
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f7e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f82:	428d      	cmp	r5, r1
 8000f84:	fa04 f403 	lsl.w	r4, r4, r3
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0x258>
 8000f8a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f92:	d22f      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f94:	428d      	cmp	r5, r1
 8000f96:	d92d      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000f98:	3802      	subs	r0, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fa4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f10e 	mul.w	r1, r5, lr
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x282>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fbc:	d216      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d914      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000fc2:	3d02      	subs	r5, #2
 8000fc4:	4462      	add	r2, ip
 8000fc6:	1a52      	subs	r2, r2, r1
 8000fc8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fcc:	e738      	b.n	8000e40 <__udivmoddi4+0xfc>
 8000fce:	4631      	mov	r1, r6
 8000fd0:	4630      	mov	r0, r6
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	e6e6      	b.n	8000da6 <__udivmoddi4+0x62>
 8000fd8:	4610      	mov	r0, r2
 8000fda:	e6fb      	b.n	8000dd4 <__udivmoddi4+0x90>
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d2a9      	bcs.n	8000f34 <__udivmoddi4+0x1f0>
 8000fe0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fe4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	e7a3      	b.n	8000f34 <__udivmoddi4+0x1f0>
 8000fec:	4645      	mov	r5, r8
 8000fee:	e7ea      	b.n	8000fc6 <__udivmoddi4+0x282>
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	e794      	b.n	8000f1e <__udivmoddi4+0x1da>
 8000ff4:	4640      	mov	r0, r8
 8000ff6:	e7d1      	b.n	8000f9c <__udivmoddi4+0x258>
 8000ff8:	46d0      	mov	r8, sl
 8000ffa:	e77b      	b.n	8000ef4 <__udivmoddi4+0x1b0>
 8000ffc:	3d02      	subs	r5, #2
 8000ffe:	4462      	add	r2, ip
 8001000:	e732      	b.n	8000e68 <__udivmoddi4+0x124>
 8001002:	4608      	mov	r0, r1
 8001004:	e70a      	b.n	8000e1c <__udivmoddi4+0xd8>
 8001006:	4464      	add	r4, ip
 8001008:	3802      	subs	r0, #2
 800100a:	e742      	b.n	8000e92 <__udivmoddi4+0x14e>

0800100c <__aeabi_idiv0>:
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <MX_DMA_Init+0xa8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a26      	ldr	r2, [pc, #152]	; (80010b8 <MX_DMA_Init+0xa8>)
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <MX_DMA_Init+0xa8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <MX_DMA_Init+0xa8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1f      	ldr	r2, [pc, #124]	; (80010b8 <MX_DMA_Init+0xa8>)
 800103c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <MX_DMA_Init+0xa8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	200b      	movs	r0, #11
 8001054:	f002 f939 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001058:	200b      	movs	r0, #11
 800105a:	f002 f952 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2010      	movs	r0, #16
 8001064:	f002 f931 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001068:	2010      	movs	r0, #16
 800106a:	f002 f94a 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2011      	movs	r0, #17
 8001074:	f002 f929 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001078:	2011      	movs	r0, #17
 800107a:	f002 f942 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2100      	movs	r1, #0
 8001082:	202f      	movs	r0, #47	; 0x2f
 8001084:	f002 f921 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001088:	202f      	movs	r0, #47	; 0x2f
 800108a:	f002 f93a 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2100      	movs	r1, #0
 8001092:	203a      	movs	r0, #58	; 0x3a
 8001094:	f002 f919 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001098:	203a      	movs	r0, #58	; 0x3a
 800109a:	f002 f932 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2046      	movs	r0, #70	; 0x46
 80010a4:	f002 f911 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80010a8:	2046      	movs	r0, #70	; 0x46
 80010aa:	f002 f92a 	bl	8003302 <HAL_NVIC_EnableIRQ>

}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800

080010bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08c      	sub	sp, #48	; 0x30
 80010c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	4b62      	ldr	r3, [pc, #392]	; (8001260 <MX_GPIO_Init+0x1a4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a61      	ldr	r2, [pc, #388]	; (8001260 <MX_GPIO_Init+0x1a4>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <MX_GPIO_Init+0x1a4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
 80010f2:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <MX_GPIO_Init+0x1a4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a5a      	ldr	r2, [pc, #360]	; (8001260 <MX_GPIO_Init+0x1a4>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b58      	ldr	r3, [pc, #352]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b54      	ldr	r3, [pc, #336]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a53      	ldr	r2, [pc, #332]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001114:	f043 0320 	orr.w	r3, r3, #32
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b51      	ldr	r3, [pc, #324]	; (8001260 <MX_GPIO_Init+0x1a4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b4d      	ldr	r3, [pc, #308]	; (8001260 <MX_GPIO_Init+0x1a4>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a4c      	ldr	r2, [pc, #304]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	4b46      	ldr	r3, [pc, #280]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a45      	ldr	r2, [pc, #276]	; (8001260 <MX_GPIO_Init+0x1a4>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b43      	ldr	r3, [pc, #268]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a3e      	ldr	r2, [pc, #248]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b3c      	ldr	r3, [pc, #240]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <MX_GPIO_Init+0x1a4>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b35      	ldr	r3, [pc, #212]	; (8001260 <MX_GPIO_Init+0x1a4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2110      	movs	r1, #16
 800119a:	4832      	ldr	r0, [pc, #200]	; (8001264 <MX_GPIO_Init+0x1a8>)
 800119c:	f002 fe6a 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMUtrigger_GPIO_Port, IMUtrigger_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011a6:	4830      	ldr	r0, [pc, #192]	; (8001268 <MX_GPIO_Init+0x1ac>)
 80011a8:	f002 fe64 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BEED_Pin|LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	f24e 0180 	movw	r1, #57472	; 0xe080
 80011b2:	482e      	ldr	r0, [pc, #184]	; (800126c <MX_GPIO_Init+0x1b0>)
 80011b4:	f002 fe5e 	bl	8003e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b8:	2310      	movs	r3, #16
 80011ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4825      	ldr	r0, [pc, #148]	; (8001264 <MX_GPIO_Init+0x1a8>)
 80011d0:	f002 fcb4 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 031c 	add.w	r3, r7, #28
 80011e6:	4619      	mov	r1, r3
 80011e8:	4821      	ldr	r0, [pc, #132]	; (8001270 <MX_GPIO_Init+0x1b4>)
 80011ea:	f002 fca7 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PPS_Pin;
 80011ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	4817      	ldr	r0, [pc, #92]	; (8001264 <MX_GPIO_Init+0x1a8>)
 8001206:	f002 fc99 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMUtrigger_Pin;
 800120a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001210:	2301      	movs	r3, #1
 8001212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMUtrigger_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4811      	ldr	r0, [pc, #68]	; (8001268 <MX_GPIO_Init+0x1ac>)
 8001224:	f002 fc8a 	bl	8003b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = BEED_Pin|LED0_Pin|LED1_Pin|LED2_Pin;
 8001228:	f24e 0380 	movw	r3, #57472	; 0xe080
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <MX_GPIO_Init+0x1b0>)
 8001242:	f002 fc7b 	bl	8003b3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	2017      	movs	r0, #23
 800124c:	f002 f83d 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001250:	2017      	movs	r0, #23
 8001252:	f002 f856 	bl	8003302 <HAL_NVIC_EnableIRQ>

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40021000 	.word	0x40021000
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021800 	.word	0x40021800
 8001270:	40021400 	.word	0x40021400

08001274 <HAL_GPIO_EXTI_Callback>:
volatile bool pps_flag = false;//pps来临标志符
volatile int txComplete = 0; // 传输完成标志

//gpio PE15测GPS来的pps信号，来1次LED0闪烁1次
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
	    if(GPIO_Pin==PPS_Pin)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001284:	d102      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0x18>
	    {
	        pps_flag = true; // 只设置标志位
 8001286:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_GPIO_EXTI_Callback+0x24>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
	    }
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	200003b8 	.word	0x200003b8

0800129c <HAL_TIM_PeriodElapsedCallback>:

//定时器回调函数
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012ac:	d10a      	bne.n	80012c4 <HAL_TIM_PeriodElapsedCallback+0x28>
	{

		HAL_GPIO_TogglePin(IMUtrigger_GPIO_Port, IMUtrigger_Pin);//每0.01s触发一次IMU数据——并计时
 80012ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80012b4:	f002 fdf7 	bl	8003ea6 <HAL_GPIO_TogglePin>
		ss001++;//进一次回调函数累加一次说明累加了0.01s(10ms）
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80012c2:	701a      	strb	r2, [r3, #0]
	}
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	20000258 	.word	0x20000258

080012d4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    if (huart == &huart5) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a07      	ldr	r2, [pc, #28]	; (80012fc <HAL_UART_TxCpltCallback+0x28>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d105      	bne.n	80012f0 <HAL_UART_TxCpltCallback+0x1c>
        isTxInProgress = 0; // 仅重置标志位
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_UART_TxCpltCallback+0x2c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
        txComplete = 1;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_UART_TxCpltCallback+0x30>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]
    }
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	20000500 	.word	0x20000500
 8001300:	200003b4 	.word	0x200003b4
 8001304:	200003bc 	.word	0x200003bc

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800130c:	f5ad 5d33 	sub.w	sp, sp, #11456	; 0x2cc0
 8001310:	b08c      	sub	sp, #48	; 0x30
 8001312:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE BEGIN 1 */

	IMU_data data={0}; // 所有成员初始化为零
 8001314:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001318:	f103 0320 	add.w	r3, r3, #32
 800131c:	223c      	movs	r2, #60	; 0x3c
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f006 fb69 	bl	80079f8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001326:	f001 fe5f 	bl	8002fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132a:	f000 fe61 	bl	8001ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132e:	f7ff fec5 	bl	80010bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001332:	f7ff fe6d 	bl	8001010 <MX_DMA_Init>
  MX_TIM2_Init();
 8001336:	f001 fa65 	bl	8002804 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800133a:	f001 faff 	bl	800293c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800133e:	f001 fb27 	bl	8002990 <MX_USART2_UART_Init>
  MX_UART5_Init();
 8001342:	f001 fad1 	bl	80028e8 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  Check_LED();//板子依次亮起，闪烁，最后保持全亮
 8001346:	f000 ff75 	bl	8002234 <Check_LED>
  Check_BEED();//蜂鸣器响一声，代表计时器启动
 800134a:	f000 ffb5 	bl	80022b8 <Check_BEED>

  //start GPS USART
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, u1_buffer, sizeof(u1_buffer));//启动GPS串口  DMA接收
 800134e:	2255      	movs	r2, #85	; 0x55
 8001350:	49b6      	ldr	r1, [pc, #728]	; (800162c <main+0x324>)
 8001352:	48b7      	ldr	r0, [pc, #732]	; (8001630 <main+0x328>)
 8001354:	f004 f85e 	bl	8005414 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001358:	4bb6      	ldr	r3, [pc, #728]	; (8001634 <main+0x32c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4bb5      	ldr	r3, [pc, #724]	; (8001634 <main+0x32c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f022 0208 	bic.w	r2, r2, #8
 8001366:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u2_buffer, sizeof(u2_buffer));//启动imu串口  DMA接收
 8001368:	2296      	movs	r2, #150	; 0x96
 800136a:	49b3      	ldr	r1, [pc, #716]	; (8001638 <main+0x330>)
 800136c:	48b3      	ldr	r0, [pc, #716]	; (800163c <main+0x334>)
 800136e:	f004 f851 	bl	8005414 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//关闭过半中断
 8001372:	4bb3      	ldr	r3, [pc, #716]	; (8001640 <main+0x338>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4bb1      	ldr	r3, [pc, #708]	; (8001640 <main+0x338>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 0208 	bic.w	r2, r2, #8
 8001380:	601a      	str	r2, [r3, #0]


  // 初始化GPS缓冲区
  strcpy(gpsBuffer, "No GPS data yet");
 8001382:	4ab0      	ldr	r2, [pc, #704]	; (8001644 <main+0x33c>)
 8001384:	4bb0      	ldr	r3, [pc, #704]	; (8001648 <main+0x340>)
 8001386:	4614      	mov	r4, r2
 8001388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  // 初始化环形缓冲区
  RingBuffer_Init(&imuDataBuffer);
 800138e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001392:	3b10      	subs	r3, #16
 8001394:	4618      	mov	r0, r3
 8001396:	f000 ffad 	bl	80022f4 <RingBuffer_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    if (pps_flag)
 800139a:	4bac      	ldr	r3, [pc, #688]	; (800164c <main+0x344>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d023      	beq.n	80013ec <main+0xe4>
	     {
	         pps_flag = false;
 80013a4:	4ba9      	ldr	r3, [pc, #676]	; (800164c <main+0x344>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
	         HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);//PPS来的话led0闪烁
 80013aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013ae:	48a8      	ldr	r0, [pc, #672]	; (8001650 <main+0x348>)
 80013b0:	f002 fd79 	bl	8003ea6 <HAL_GPIO_TogglePin>
	         if (isfirsttime && getInitTime_flag==0)
 80013b4:	4ba7      	ldr	r3, [pc, #668]	; (8001654 <main+0x34c>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00d      	beq.n	80013d8 <main+0xd0>
 80013bc:	4ba6      	ldr	r3, [pc, #664]	; (8001658 <main+0x350>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <main+0xd0>
	         {
	             isfirsttime = false;
 80013c4:	4ba3      	ldr	r3, [pc, #652]	; (8001654 <main+0x34c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]
	             getInitTime_flag=1;
 80013ca:	4ba3      	ldr	r3, [pc, #652]	; (8001658 <main+0x350>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	601a      	str	r2, [r3, #0]
	             HAL_TIM_Base_Start_IT(&htim2);//第一次PPS来开启定期器
 80013d0:	48a2      	ldr	r0, [pc, #648]	; (800165c <main+0x354>)
 80013d2:	f003 fa83 	bl	80048dc <HAL_TIM_Base_Start_IT>
 80013d6:	e009      	b.n	80013ec <main+0xe4>
	         }
	         else {
	        	 ss001 = 0;
 80013d8:	4ba1      	ldr	r3, [pc, #644]	; (8001660 <main+0x358>)
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	             __HAL_TIM_SET_COUNTER(&htim2, 0);//以后每次来pps就重置定时器，防止晶振计时累计
 80013de:	4b9f      	ldr	r3, [pc, #636]	; (800165c <main+0x354>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	625a      	str	r2, [r3, #36]	; 0x24
	             PPS_isArrived=true;
 80013e6:	4b9f      	ldr	r3, [pc, #636]	; (8001664 <main+0x35c>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
//
//		/////////////////////////////////////对PPS数据进行处理/////////////////////////////////////////////////
	    ////1.如果是第一次来数据，则获取初始时间
//	    if()

	if(getInitTime_flag !=1 && PPS_isArrived) //不是第一次来pps数据
 80013ec:	4b9a      	ldr	r3, [pc, #616]	; (8001658 <main+0x350>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d039      	beq.n	8001468 <main+0x160>
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <main+0x35c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d035      	beq.n	8001468 <main+0x160>
	{
		PPS_isArrived = false; // 重置
 80013fc:	4b99      	ldr	r3, [pc, #612]	; (8001664 <main+0x35c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
		incrementTime(lastUpdatedTime, 1); // 上一次更新后的时间加1秒
 8001402:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8001406:	f103 030c 	add.w	r3, r3, #12
 800140a:	2101      	movs	r1, #1
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fea9 	bl	8002164 <incrementTime>
		 long timeDiff = compareTime(lastUpdatedTime,utcTime);
 8001412:	f507 5224 	add.w	r2, r7, #10496	; 0x2900
 8001416:	f102 021c 	add.w	r2, r2, #28
 800141a:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 800141e:	f103 030c 	add.w	r3, r3, #12
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f001 fd29 	bl	8002e7c <compareTime>
 800142a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800142e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001432:	6018      	str	r0, [r3, #0]
		  if ((timeDiff) <1 && (timeDiff) > -1) // 检查时间差是否在1秒以内
 8001434:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001438:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	dc06      	bgt.n	8001450 <main+0x148>
 8001442:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001446:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da0b      	bge.n	8001468 <main+0x160>
//			; strcpy(lastUpdatedTime, lastUpdatedTime);//新时间就是上面加一秒后时间
		  }
		  else //非1s内则使用新的utc时间，PPS在信号丢失时候会消失
		  {
			  // 时间差超过1秒的处理逻辑
			  strcpy(lastUpdatedTime, utcTime); // 将lastUpdatedTime更新为当前的UTC时间
 8001450:	f507 5224 	add.w	r2, r7, #10496	; 0x2900
 8001454:	f102 021c 	add.w	r2, r2, #28
 8001458:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 800145c:	f103 030c 	add.w	r3, r3, #12
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f007 f8bc 	bl	80085e0 <strcpy>
		  }
	}
    if (u1_rx_size)//串口获取到imu数据
 8001468:	4b7f      	ldr	r3, [pc, #508]	; (8001668 <main+0x360>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 852b 	beq.w	8001ec8 <main+0xbc0>
	{
		u1_rx_size=0;
 8001472:	4b7d      	ldr	r3, [pc, #500]	; (8001668 <main+0x360>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
		//进行数据解析
		 if (u1_buffer[0] != 0xFA && u1_buffer[1] != 0xFF&&u1_buffer[2] != 0x36) {
 8001478:	4b6c      	ldr	r3, [pc, #432]	; (800162c <main+0x324>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2bfa      	cmp	r3, #250	; 0xfa
 800147e:	d00a      	beq.n	8001496 <main+0x18e>
 8001480:	4b6a      	ldr	r3, [pc, #424]	; (800162c <main+0x324>)
 8001482:	785b      	ldrb	r3, [r3, #1]
 8001484:	2bff      	cmp	r3, #255	; 0xff
 8001486:	d006      	beq.n	8001496 <main+0x18e>
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <main+0x324>)
 800148a:	789b      	ldrb	r3, [r3, #2]
 800148c:	2b36      	cmp	r3, #54	; 0x36
 800148e:	d002      	beq.n	8001496 <main+0x18e>
			printf("Invalid preamble or bus identifier\n");
 8001490:	4876      	ldr	r0, [pc, #472]	; (800166c <main+0x364>)
 8001492:	f006 f94f 	bl	8007734 <puts>

		}
		int idx = 4;
 8001496:	2304      	movs	r3, #4
 8001498:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 800149c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80014a0:	6013      	str	r3, [r2, #0]
		uint32_t raw;
		// 欧拉角
		if (u1_buffer[idx] != 0x20 || u1_buffer[idx+1] != 0x30) {
 80014a2:	4a62      	ldr	r2, [pc, #392]	; (800162c <main+0x324>)
 80014a4:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80014a8:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b20      	cmp	r3, #32
 80014b4:	d109      	bne.n	80014ca <main+0x1c2>
 80014b6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80014ba:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a5a      	ldr	r2, [pc, #360]	; (800162c <main+0x324>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	2b30      	cmp	r3, #48	; 0x30
 80014c8:	d002      	beq.n	80014d0 <main+0x1c8>
			printf("Invalid data type identifier for Euler angles\n");
 80014ca:	4869      	ldr	r0, [pc, #420]	; (8001670 <main+0x368>)
 80014cc:	f006 f932 	bl	8007734 <puts>
		}
		idx += 2;
 80014d0:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80014d4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3302      	adds	r3, #2
 80014dc:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80014e0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80014e4:	6013      	str	r3, [r2, #0]
		if (u1_buffer[idx] != 0x0C) {
 80014e6:	4a51      	ldr	r2, [pc, #324]	; (800162c <main+0x324>)
 80014e8:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80014ec:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d002      	beq.n	8001500 <main+0x1f8>
			printf("Invalid length for Euler angles data\n");
 80014fa:	485e      	ldr	r0, [pc, #376]	; (8001674 <main+0x36c>)
 80014fc:	f006 f91a 	bl	8007734 <puts>
		}
		idx++;
 8001500:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001504:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001510:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001514:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 8001516:	2300      	movs	r3, #0
 8001518:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800151c:	f102 020c 	add.w	r2, r2, #12
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e0c0      	b.n	80016a6 <main+0x39e>
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001524:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001528:	f103 030c 	add.w	r3, r3, #12
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	009a      	lsls	r2, r3, #2
 8001530:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001534:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a3b      	ldr	r2, [pc, #236]	; (800162c <main+0x324>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	061a      	lsls	r2, r3, #24
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 8001542:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001546:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1c59      	adds	r1, r3, #1
 800154e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001552:	f103 030c 	add.w	r3, r3, #12
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	4933      	ldr	r1, [pc, #204]	; (800162c <main+0x324>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	041b      	lsls	r3, r3, #16
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001562:	431a      	orrs	r2, r3
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 8001564:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001568:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	1c99      	adds	r1, r3, #2
 8001570:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001574:	f103 030c 	add.w	r3, r3, #12
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	492b      	ldr	r1, [pc, #172]	; (800162c <main+0x324>)
 8001580:	5ccb      	ldrb	r3, [r1, r3]
 8001582:	021b      	lsls	r3, r3, #8
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 8001584:	4313      	orrs	r3, r2
				  u1_buffer[idx + 3 + 4 * i];
 8001586:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 800158a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800158e:	6812      	ldr	r2, [r2, #0]
 8001590:	1cd1      	adds	r1, r2, #3
 8001592:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001596:	f102 020c 	add.w	r2, r2, #12
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	440a      	add	r2, r1
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <main+0x324>)
 80015a2:	5c8a      	ldrb	r2, [r1, r2]
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	461a      	mov	r2, r3
			raw = (u1_buffer[idx + 4 * i] << 24) |
 80015a8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80015ac:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 80015b0:	601a      	str	r2, [r3, #0]
			float *angle = (float*)&raw;
 80015b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015b6:	3b1c      	subs	r3, #28
 80015b8:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80015bc:	f102 021c 	add.w	r2, r2, #28
 80015c0:	6013      	str	r3, [r2, #0]
			switch (i) {
 80015c2:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80015c6:	f103 030c 	add.w	r3, r3, #12
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d053      	beq.n	8001678 <main+0x370>
 80015d0:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80015d4:	f103 030c 	add.w	r3, r3, #12
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	dc58      	bgt.n	8001690 <main+0x388>
 80015de:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80015e2:	f103 030c 	add.w	r3, r3, #12
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d007      	beq.n	80015fc <main+0x2f4>
 80015ec:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80015f0:	f103 030c 	add.w	r3, r3, #12
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d00c      	beq.n	8001614 <main+0x30c>
 80015fa:	e049      	b.n	8001690 <main+0x388>
				case 0: data.roll = *angle; break;
 80015fc:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001600:	f103 031c 	add.w	r3, r3, #28
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 800160c:	f102 0220 	add.w	r2, r2, #32
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e03d      	b.n	8001690 <main+0x388>
				case 1: data.pitch = *angle; break;
 8001614:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001618:	f103 031c 	add.w	r3, r3, #28
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001624:	f102 0224 	add.w	r2, r2, #36	; 0x24
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	e031      	b.n	8001690 <main+0x388>
 800162c:	200003c0 	.word	0x200003c0
 8001630:	20000574 	.word	0x20000574
 8001634:	2000071c 	.word	0x2000071c
 8001638:	20000418 	.word	0x20000418
 800163c:	200005e8 	.word	0x200005e8
 8001640:	200007dc 	.word	0x200007dc
 8001644:	2000030c 	.word	0x2000030c
 8001648:	0800c558 	.word	0x0800c558
 800164c:	200003b8 	.word	0x200003b8
 8001650:	40021800 	.word	0x40021800
 8001654:	20000000 	.word	0x20000000
 8001658:	2000025c 	.word	0x2000025c
 800165c:	200004b8 	.word	0x200004b8
 8001660:	20000258 	.word	0x20000258
 8001664:	20000259 	.word	0x20000259
 8001668:	200004ae 	.word	0x200004ae
 800166c:	0800c568 	.word	0x0800c568
 8001670:	0800c58c 	.word	0x0800c58c
 8001674:	0800c5bc 	.word	0x0800c5bc
				case 2: data.yaw = *angle; break;
 8001678:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800167c:	f103 031c 	add.w	r3, r3, #28
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001688:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	bf00      	nop
		for (int i = 0; i < 3; ++i) {
 8001690:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001694:	f103 030c 	add.w	r3, r3, #12
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80016a0:	f102 020c 	add.w	r2, r2, #12
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80016aa:	f103 030c 	add.w	r3, r3, #12
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	f77f af37 	ble.w	8001524 <main+0x21c>
			}
		}
		idx += 12;
 80016b6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80016ba:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	330c      	adds	r3, #12
 80016c2:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80016c6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80016ca:	6013      	str	r3, [r2, #0]

//////////////////////////////////加速度//////////////////////////////////////////////
		if (u1_buffer[idx] != 0x40 || u1_buffer[idx+1] != 0x20) {
 80016cc:	4a97      	ldr	r2, [pc, #604]	; (800192c <main+0x624>)
 80016ce:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80016d2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b40      	cmp	r3, #64	; 0x40
 80016de:	d109      	bne.n	80016f4 <main+0x3ec>
 80016e0:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80016e4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	3301      	adds	r3, #1
 80016ec:	4a8f      	ldr	r2, [pc, #572]	; (800192c <main+0x624>)
 80016ee:	5cd3      	ldrb	r3, [r2, r3]
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d002      	beq.n	80016fa <main+0x3f2>
			printf("Invalid data type identifier for acceleration\n");
 80016f4:	488e      	ldr	r0, [pc, #568]	; (8001930 <main+0x628>)
 80016f6:	f006 f81d 	bl	8007734 <puts>
		}
		idx += 2;
 80016fa:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80016fe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	3302      	adds	r3, #2
 8001706:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 800170a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800170e:	6013      	str	r3, [r2, #0]
		if (u1_buffer[idx] != 0x0C) {
 8001710:	4a86      	ldr	r2, [pc, #536]	; (800192c <main+0x624>)
 8001712:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001716:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b0c      	cmp	r3, #12
 8001722:	d002      	beq.n	800172a <main+0x422>
			printf("Invalid length for acceleration data\n");
 8001724:	4883      	ldr	r0, [pc, #524]	; (8001934 <main+0x62c>)
 8001726:	f006 f805 	bl	8007734 <puts>
		}
		idx++;
 800172a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800172e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	3301      	adds	r3, #1
 8001736:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 800173a:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800173e:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 8001740:	2300      	movs	r3, #0
 8001742:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001746:	f102 0208 	add.w	r2, r2, #8
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e09a      	b.n	8001884 <main+0x57c>
			raw = (u1_buffer[idx + 4 * i] << 24) |
 800174e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001752:	f103 0308 	add.w	r3, r3, #8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800175e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	4a71      	ldr	r2, [pc, #452]	; (800192c <main+0x624>)
 8001768:	5cd3      	ldrb	r3, [r2, r3]
 800176a:	061a      	lsls	r2, r3, #24
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 800176c:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001770:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	1c59      	adds	r1, r3, #1
 8001778:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800177c:	f103 0308 	add.w	r3, r3, #8
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	4969      	ldr	r1, [pc, #420]	; (800192c <main+0x624>)
 8001788:	5ccb      	ldrb	r3, [r1, r3]
 800178a:	041b      	lsls	r3, r3, #16
			raw = (u1_buffer[idx + 4 * i] << 24) |
 800178c:	431a      	orrs	r2, r3
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 800178e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001792:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	1c99      	adds	r1, r3, #2
 800179a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800179e:	f103 0308 	add.w	r3, r3, #8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	440b      	add	r3, r1
 80017a8:	4960      	ldr	r1, [pc, #384]	; (800192c <main+0x624>)
 80017aa:	5ccb      	ldrb	r3, [r1, r3]
 80017ac:	021b      	lsls	r3, r3, #8
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 80017ae:	4313      	orrs	r3, r2
				  u1_buffer[idx + 3 + 4 * i];
 80017b0:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80017b4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	1cd1      	adds	r1, r2, #3
 80017bc:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80017c0:	f102 0208 	add.w	r2, r2, #8
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	440a      	add	r2, r1
 80017ca:	4958      	ldr	r1, [pc, #352]	; (800192c <main+0x624>)
 80017cc:	5c8a      	ldrb	r2, [r1, r2]
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 80017ce:	4313      	orrs	r3, r2
 80017d0:	461a      	mov	r2, r3
			raw = (u1_buffer[idx + 4 * i] << 24) |
 80017d2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80017d6:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 80017da:	601a      	str	r2, [r3, #0]
			float *accel = (float*)&raw;
 80017dc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017e0:	3b1c      	subs	r3, #28
 80017e2:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80017e6:	f102 0220 	add.w	r2, r2, #32
 80017ea:	6013      	str	r3, [r2, #0]
			switch (i) {
 80017ec:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80017f0:	f103 0308 	add.w	r3, r3, #8
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d02d      	beq.n	8001856 <main+0x54e>
 80017fa:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80017fe:	f103 0308 	add.w	r3, r3, #8
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b02      	cmp	r3, #2
 8001806:	dc32      	bgt.n	800186e <main+0x566>
 8001808:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800180c:	f103 0308 	add.w	r3, r3, #8
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d007      	beq.n	8001826 <main+0x51e>
 8001816:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800181a:	f103 0308 	add.w	r3, r3, #8
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d00c      	beq.n	800183e <main+0x536>
 8001824:	e023      	b.n	800186e <main+0x566>
				case 0: data.ax = *accel; break;
 8001826:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800182a:	f103 0320 	add.w	r3, r3, #32
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001836:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	e017      	b.n	800186e <main+0x566>
				case 1: data.ay = *accel; break;
 800183e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001842:	f103 0320 	add.w	r3, r3, #32
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 800184e:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e00b      	b.n	800186e <main+0x566>
				case 2: data.az = *accel; break;
 8001856:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800185a:	f103 0320 	add.w	r3, r3, #32
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001866:	f102 0234 	add.w	r2, r2, #52	; 0x34
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	bf00      	nop
		for (int i = 0; i < 3; ++i) {
 800186e:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001872:	f103 0308 	add.w	r3, r3, #8
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 800187e:	f102 0208 	add.w	r2, r2, #8
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001888:	f103 0308 	add.w	r3, r3, #8
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b02      	cmp	r3, #2
 8001890:	f77f af5d 	ble.w	800174e <main+0x446>
			}
		}
		idx += 12;
 8001894:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001898:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	330c      	adds	r3, #12
 80018a0:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80018a4:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80018a8:	6013      	str	r3, [r2, #0]
////////////////////////////////// 自由加速度//////////////////////////////////////////////
		if (u1_buffer[idx] != 0x40 || u1_buffer[idx+1] != 0x30) {
 80018aa:	4a20      	ldr	r2, [pc, #128]	; (800192c <main+0x624>)
 80018ac:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80018b0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d109      	bne.n	80018d2 <main+0x5ca>
 80018be:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80018c2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a18      	ldr	r2, [pc, #96]	; (800192c <main+0x624>)
 80018cc:	5cd3      	ldrb	r3, [r2, r3]
 80018ce:	2b30      	cmp	r3, #48	; 0x30
 80018d0:	d002      	beq.n	80018d8 <main+0x5d0>
			printf("Invalid data type identifier for acc_free\n");
 80018d2:	4819      	ldr	r0, [pc, #100]	; (8001938 <main+0x630>)
 80018d4:	f005 ff2e 	bl	8007734 <puts>
		}
		idx += 2;
 80018d8:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80018dc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	3302      	adds	r3, #2
 80018e4:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80018e8:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80018ec:	6013      	str	r3, [r2, #0]
		if (u1_buffer[idx] != 0x0C) {
 80018ee:	4a0f      	ldr	r2, [pc, #60]	; (800192c <main+0x624>)
 80018f0:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 80018f4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d002      	beq.n	8001908 <main+0x600>
			printf("Invalid length for acc_free data\n");
 8001902:	480e      	ldr	r0, [pc, #56]	; (800193c <main+0x634>)
 8001904:	f005 ff16 	bl	8007734 <puts>
		}
		idx++;
 8001908:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 800190c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001918:	f102 0238 	add.w	r2, r2, #56	; 0x38
 800191c:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 800191e:	2300      	movs	r3, #0
 8001920:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001924:	f102 0204 	add.w	r2, r2, #4
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e0a2      	b.n	8001a72 <main+0x76a>
 800192c:	200003c0 	.word	0x200003c0
 8001930:	0800c5e4 	.word	0x0800c5e4
 8001934:	0800c614 	.word	0x0800c614
 8001938:	0800c63c 	.word	0x0800c63c
 800193c:	0800c668 	.word	0x0800c668
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001940:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001944:	f103 0304 	add.w	r3, r3, #4
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	009a      	lsls	r2, r3, #2
 800194c:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001950:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4aa9      	ldr	r2, [pc, #676]	; (8001c00 <main+0x8f8>)
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	061a      	lsls	r2, r3, #24
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 800195e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001962:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	1c59      	adds	r1, r3, #1
 800196a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 800196e:	f103 0304 	add.w	r3, r3, #4
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	49a1      	ldr	r1, [pc, #644]	; (8001c00 <main+0x8f8>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	041b      	lsls	r3, r3, #16
			raw = (u1_buffer[idx + 4 * i] << 24) |
 800197e:	431a      	orrs	r2, r3
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 8001980:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001984:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1c99      	adds	r1, r3, #2
 800198c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001990:	f103 0304 	add.w	r3, r3, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	440b      	add	r3, r1
 800199a:	4999      	ldr	r1, [pc, #612]	; (8001c00 <main+0x8f8>)
 800199c:	5ccb      	ldrb	r3, [r1, r3]
 800199e:	021b      	lsls	r3, r3, #8
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 80019a0:	4313      	orrs	r3, r2
				  u1_buffer[idx + 3 + 4 * i];
 80019a2:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80019a6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	1cd1      	adds	r1, r2, #3
 80019ae:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 80019b2:	f102 0204 	add.w	r2, r2, #4
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	440a      	add	r2, r1
 80019bc:	4990      	ldr	r1, [pc, #576]	; (8001c00 <main+0x8f8>)
 80019be:	5c8a      	ldrb	r2, [r1, r2]
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 80019c0:	4313      	orrs	r3, r2
 80019c2:	461a      	mov	r2, r3
			raw = (u1_buffer[idx + 4 * i] << 24) |
 80019c4:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80019c8:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 80019cc:	601a      	str	r2, [r3, #0]
			float *Acc_free = (float*)&raw;
 80019ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019d2:	3b1c      	subs	r3, #28
 80019d4:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 80019d8:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80019dc:	6013      	str	r3, [r2, #0]
			switch (i) {
 80019de:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80019e2:	f103 0304 	add.w	r3, r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d02d      	beq.n	8001a48 <main+0x740>
 80019ec:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80019f0:	f103 0304 	add.w	r3, r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	dc30      	bgt.n	8001a5c <main+0x754>
 80019fa:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 80019fe:	f103 0304 	add.w	r3, r3, #4
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <main+0x710>
 8001a08:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001a0c:	f103 0304 	add.w	r3, r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d00c      	beq.n	8001a30 <main+0x728>
 8001a16:	e021      	b.n	8001a5c <main+0x754>
				case 0: data.ax_free = *Acc_free; break;
 8001a18:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001a1c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001a28:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e015      	b.n	8001a5c <main+0x754>
				case 1: data.ay_free = *Acc_free; break;
 8001a30:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001a34:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f507 5230 	add.w	r2, r7, #11264	; 0x2c00
 8001a40:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e009      	b.n	8001a5c <main+0x754>
				case 2: data.az_free = *Acc_free; break;
 8001a48:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001a4c:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	bf00      	nop
		for (int i = 0; i < 3; ++i) {
 8001a5c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001a60:	f103 0304 	add.w	r3, r3, #4
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	3301      	adds	r3, #1
 8001a68:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001a6c:	f102 0204 	add.w	r2, r2, #4
 8001a70:	6013      	str	r3, [r2, #0]
 8001a72:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001a76:	f103 0304 	add.w	r3, r3, #4
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	f77f af5f 	ble.w	8001940 <main+0x638>
			}
		}
		idx += 12;
 8001a82:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001a86:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001a92:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001a96:	6013      	str	r3, [r2, #0]
////////////////////////////////// 角速度//////////////////////////////////////////////
		if (u1_buffer[idx] != 0x80 || u1_buffer[idx+1] != 0x20) {
 8001a98:	4a59      	ldr	r2, [pc, #356]	; (8001c00 <main+0x8f8>)
 8001a9a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001a9e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d109      	bne.n	8001ac0 <main+0x7b8>
 8001aac:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001ab0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a51      	ldr	r2, [pc, #324]	; (8001c00 <main+0x8f8>)
 8001aba:	5cd3      	ldrb	r3, [r2, r3]
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d002      	beq.n	8001ac6 <main+0x7be>
			printf("Invalid data type identifier for gyro\n");
 8001ac0:	4850      	ldr	r0, [pc, #320]	; (8001c04 <main+0x8fc>)
 8001ac2:	f005 fe37 	bl	8007734 <puts>
		}
		idx += 2;
 8001ac6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001aca:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001ad6:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001ada:	6013      	str	r3, [r2, #0]
		if (u1_buffer[idx] != 0x0C) {
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <main+0x8f8>)
 8001ade:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001ae2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d002      	beq.n	8001af6 <main+0x7ee>
			printf("Invalid length for gyro data\n");
 8001af0:	4845      	ldr	r0, [pc, #276]	; (8001c08 <main+0x900>)
 8001af2:	f005 fe1f 	bl	8007734 <puts>
		}
		idx++;
 8001af6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001afa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001b06:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001b0a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 3; ++i) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	e08d      	b.n	8001c32 <main+0x92a>
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001b16:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	009a      	lsls	r2, r3, #2
 8001b1e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001b22:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a35      	ldr	r2, [pc, #212]	; (8001c00 <main+0x8f8>)
 8001b2c:	5cd3      	ldrb	r3, [r2, r3]
 8001b2e:	061a      	lsls	r2, r3, #24
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 8001b30:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001b34:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	1c59      	adds	r1, r3, #1
 8001b3c:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	492e      	ldr	r1, [pc, #184]	; (8001c00 <main+0x8f8>)
 8001b48:	5ccb      	ldrb	r3, [r1, r3]
 8001b4a:	041b      	lsls	r3, r3, #16
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001b4c:	431a      	orrs	r2, r3
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 8001b4e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001b52:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	1c99      	adds	r1, r3, #2
 8001b5a:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	4926      	ldr	r1, [pc, #152]	; (8001c00 <main+0x8f8>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	021b      	lsls	r3, r3, #8
				  (u1_buffer[idx + 1 + 4 * i] << 16) |
 8001b6a:	4313      	orrs	r3, r2
				  u1_buffer[idx + 3 + 4 * i];
 8001b6c:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001b70:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	1cd1      	adds	r1, r2, #3
 8001b78:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	0092      	lsls	r2, r2, #2
 8001b80:	440a      	add	r2, r1
 8001b82:	491f      	ldr	r1, [pc, #124]	; (8001c00 <main+0x8f8>)
 8001b84:	5c8a      	ldrb	r2, [r1, r2]
				  (u1_buffer[idx + 2 + 4 * i] << 8) |
 8001b86:	4313      	orrs	r3, r2
 8001b88:	461a      	mov	r2, r3
			raw = (u1_buffer[idx + 4 * i] << 24) |
 8001b8a:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8001b8e:	f6a3 33dc 	subw	r3, r3, #3036	; 0xbdc
 8001b92:	601a      	str	r2, [r3, #0]
			float *gyro = (float*)&raw;
 8001b94:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b98:	3b1c      	subs	r3, #28
 8001b9a:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001b9e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8001ba2:	6013      	str	r3, [r2, #0]
			switch (i) {
 8001ba4:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d02e      	beq.n	8001c0c <main+0x904>
 8001bae:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	dc35      	bgt.n	8001c24 <main+0x91c>
 8001bb8:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <main+0x8c6>
 8001bc2:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d00c      	beq.n	8001be6 <main+0x8de>
 8001bcc:	e02a      	b.n	8001c24 <main+0x91c>
				case 0: data.gx = *gyro; break;
 8001bce:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001bd2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001bde:	f102 0204 	add.w	r2, r2, #4
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	e01e      	b.n	8001c24 <main+0x91c>
				case 1: data.gy = *gyro; break;
 8001be6:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001bea:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001bf6:	f102 0208 	add.w	r2, r2, #8
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	e012      	b.n	8001c24 <main+0x91c>
 8001bfe:	bf00      	nop
 8001c00:	200003c0 	.word	0x200003c0
 8001c04:	0800c68c 	.word	0x0800c68c
 8001c08:	0800c6b4 	.word	0x0800c6b4
				case 2: data.gz = *gyro; break;
 8001c0c:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001c10:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001c1c:	f102 020c 	add.w	r2, r2, #12
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	bf00      	nop
		for (int i = 0; i < 3; ++i) {
 8001c24:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	f507 5232 	add.w	r2, r7, #11392	; 0x2c80
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	f507 5332 	add.w	r3, r7, #11392	; 0x2c80
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	f77f af6c 	ble.w	8001b16 <main+0x80e>
			}
		}
		idx += 12;
 8001c3e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001c42:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001c4e:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8001c52:	6013      	str	r3, [r2, #0]

//////////////////////////////////时间戳//////////////////////////////////////////////////
		// 计算小数秒
		float fractionalSeconds = ss001 * 0.01;
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <main+0xba0>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc73 	bl	8000544 <__aeabi_i2d>
 8001c5e:	a390      	add	r3, pc, #576	; (adr r3, 8001ea0 <main+0xb98>)
 8001c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c64:	f7fe fcd8 	bl	8000618 <__aeabi_dmul>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f7fe ffca 	bl	8000c08 <__aeabi_d2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001c7a:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8001c7e:	6013      	str	r3, [r2, #0]
		// 将小数秒转换为字符串
		char fractionalStr[10];
		snprintf(fractionalStr, sizeof(fractionalStr), "%.2f", fractionalSeconds);
 8001c80:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001c84:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	f7fe fc6d 	bl	8000568 <__aeabi_f2d>
 8001c8e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c92:	3b28      	subs	r3, #40	; 0x28
 8001c94:	e9cd 0100 	strd	r0, r1, [sp]
 8001c98:	4a84      	ldr	r2, [pc, #528]	; (8001eac <main+0xba4>)
 8001c9a:	210a      	movs	r1, #10
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f005 fd51 	bl	8007744 <sniprintf>
		// 提取小数部分（跳过前两个字符，即 '0' 和 '.'）
		char* decimalPart = fractionalStr + 2;
 8001ca2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ca6:	3b28      	subs	r3, #40	; 0x28
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f507 5231 	add.w	r2, r7, #11328	; 0x2c40
 8001cae:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8001cb2:	6013      	str	r3, [r2, #0]
		// 拼接整数秒和小数秒
		snprintf(timestamp, sizeof(timestamp), "%s.%s", lastUpdatedTime, decimalPart);
 8001cb4:	f507 5224 	add.w	r2, r7, #10496	; 0x2900
 8001cb8:	f102 020c 	add.w	r2, r2, #12
 8001cbc:	f507 5022 	add.w	r0, r7, #10368	; 0x2880
 8001cc0:	f100 001c 	add.w	r0, r0, #28
 8001cc4:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001cc8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <main+0xba8>)
 8001cd4:	2132      	movs	r1, #50	; 0x32
 8001cd6:	f005 fd35 	bl	8007744 <sniprintf>

		char imubuffer[102]; // 足够大以容纳所有数据的字符串
			// 将数据格式化为字符串，包括时间戳
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
				timestamp, // 时间戳
					data.roll, data.pitch, data.yaw,
 8001cda:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001cde:	f103 0320 	add.w	r3, r3, #32
 8001ce2:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc3f 	bl	8000568 <__aeabi_f2d>
 8001cea:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
					data.roll, data.pitch, data.yaw,
 8001cee:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001cf2:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8001cf6:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc35 	bl	8000568 <__aeabi_f2d>
 8001cfe:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
					data.roll, data.pitch, data.yaw,
 8001d02:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d06:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d0a:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc2b 	bl	8000568 <__aeabi_f2d>
 8001d12:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
					data.ax, data.ay, data.az,
 8001d16:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d1a:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001d1e:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc21 	bl	8000568 <__aeabi_f2d>
 8001d26:	e9c7 0108 	strd	r0, r1, [r7, #32]
					data.ax, data.ay, data.az,
 8001d2a:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d2e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001d32:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fc17 	bl	8000568 <__aeabi_f2d>
 8001d3a:	e9c7 0106 	strd	r0, r1, [r7, #24]
					data.ax, data.ay, data.az,
 8001d3e:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d42:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8001d46:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fc0d 	bl	8000568 <__aeabi_f2d>
 8001d4e:	e9c7 0104 	strd	r0, r1, [r7, #16]
					data.ax_free, data.ay_free, data.az_free,
 8001d52:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d56:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001d5a:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fc03 	bl	8000568 <__aeabi_f2d>
 8001d62:	e9c7 0102 	strd	r0, r1, [r7, #8]
					data.ax_free, data.ay_free, data.az_free,
 8001d66:	f507 5330 	add.w	r3, r7, #11264	; 0x2c00
 8001d6a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8001d6e:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbf9 	bl	8000568 <__aeabi_f2d>
 8001d76:	e9c7 0100 	strd	r0, r1, [r7]
					data.ax_free, data.ay_free, data.az_free,
 8001d7a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001d7e:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fbf1 	bl	8000568 <__aeabi_f2d>
 8001d86:	4682      	mov	sl, r0
 8001d88:	468b      	mov	fp, r1
					data.gx, data.gy, data.gz);
 8001d8a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001d8e:	f103 0304 	add.w	r3, r3, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbe7 	bl	8000568 <__aeabi_f2d>
 8001d9a:	4680      	mov	r8, r0
 8001d9c:	4689      	mov	r9, r1
					data.gx, data.gy, data.gz);
 8001d9e:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001da2:	f103 0308 	add.w	r3, r3, #8
 8001da6:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbdd 	bl	8000568 <__aeabi_f2d>
 8001dae:	4604      	mov	r4, r0
 8001db0:	460d      	mov	r5, r1
					data.gx, data.gy, data.gz);
 8001db2:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001db6:	f103 030c 	add.w	r3, r3, #12
 8001dba:	681b      	ldr	r3, [r3, #0]
		int len= snprintf(imuBuffer, IMU_BUFFER_SIZE, "%s,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f\r\n",
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbd3 	bl	8000568 <__aeabi_f2d>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	f507 5122 	add.w	r1, r7, #10368	; 0x2880
 8001dca:	f101 011c 	add.w	r1, r1, #28
 8001dce:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8001dd2:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8001dd6:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8001dda:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8001dde:	ed97 7b00 	vldr	d7, [r7]
 8001de2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8001de6:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001dee:	ed97 7b04 	vldr	d7, [r7, #16]
 8001df2:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001df6:	ed97 7b06 	vldr	d7, [r7, #24]
 8001dfa:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001dfe:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e02:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e06:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001e0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e0e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001e12:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001e16:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001e1a:	ed8d 7b00 	vstr	d7, [sp]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <main+0xbac>)
 8001e22:	21aa      	movs	r1, #170	; 0xaa
 8001e24:	4824      	ldr	r0, [pc, #144]	; (8001eb8 <main+0xbb0>)
 8001e26:	f005 fc8d 	bl	8007744 <sniprintf>
 8001e2a:	f507 5331 	add.w	r3, r7, #11328	; 0x2c40
 8001e2e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8001e32:	6018      	str	r0, [r3, #0]
//					data.mx, data.my, data.mz);
/////////////////////////////////串口发射区//////////////////////////////////////////////////
		if (RingBuffer_Put(&imuDataBuffer, imuBuffer) == 0) {
 8001e34:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e38:	3b10      	subs	r3, #16
 8001e3a:	491f      	ldr	r1, [pc, #124]	; (8001eb8 <main+0xbb0>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fa79 	bl	8002334 <RingBuffer_Put>
		    // 处理缓冲区已满的情况（例如，丢弃数据或记录错误）
		}
		// 在主循环或DMA传输完成的中断处理函数中
		if ((!isTxInProgress && RingBuffer_Get(&imuDataBuffer, dataToSend))|| txComplete) {
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <main+0xbb4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <main+0xb5c>
 8001e4a:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001e4e:	3a18      	subs	r2, #24
 8001e50:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001e54:	3b10      	subs	r3, #16
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 faaf 	bl	80023bc <RingBuffer_Get>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d104      	bne.n	8001e6e <main+0xb66>
 8001e64:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <main+0xbb8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 808a 	beq.w	8001f82 <main+0xc7a>
			isTxInProgress = 1;
 8001e6e:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <main+0xbb4>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
			txComplete = 0;
 8001e74:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <main+0xbb8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart5, (uint8_t*)dataToSend, strlen(dataToSend));
 8001e7a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e7e:	3b18      	subs	r3, #24
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fa05 	bl	8000290 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e8e:	3b18      	subs	r3, #24
 8001e90:	4619      	mov	r1, r3
 8001e92:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <main+0xbbc>)
 8001e94:	f003 fa40 	bl	8005318 <HAL_UART_Transmit_DMA>
 8001e98:	e073      	b.n	8001f82 <main+0xc7a>
 8001e9a:	bf00      	nop
 8001e9c:	f3af 8000 	nop.w
 8001ea0:	47ae147b 	.word	0x47ae147b
 8001ea4:	3f847ae1 	.word	0x3f847ae1
 8001ea8:	20000258 	.word	0x20000258
 8001eac:	0800c6d4 	.word	0x0800c6d4
 8001eb0:	0800c6dc 	.word	0x0800c6dc
 8001eb4:	0800c6e4 	.word	0x0800c6e4
 8001eb8:	20000260 	.word	0x20000260
 8001ebc:	200003b4 	.word	0x200003b4
 8001ec0:	200003bc 	.word	0x200003bc
 8001ec4:	20000500 	.word	0x20000500
		}
	 }
//////////////////////////////////GPS处理区//////////////////////////////////////////////////
    else if(u2_rx_size)//GPS数据来
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <main+0xcc8>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d058      	beq.n	8001f82 <main+0xc7a>
	{
    	//把GPS也设置成缓冲区进行发射，用于避免imu和gps数据同时出现时候只发送一个的情况
        // 检查环形缓冲区是否有空间
        if (RingBuffer_Put(&imuDataBuffer, (char*)u2_buffer) == 0) {
 8001ed0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ed4:	3b10      	subs	r3, #16
 8001ed6:	493f      	ldr	r1, [pc, #252]	; (8001fd4 <main+0xccc>)
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fa2b 	bl	8002334 <RingBuffer_Put>
            // 处理缓冲区已满的情况（例如，丢弃数据或记录错误）
        }
//         检查环形缓冲区是否有待发送的IMU数据
		if ((!isTxInProgress && RingBuffer_Get(&imuDataBuffer, dataToSend))|| txComplete) {
 8001ede:	4b3e      	ldr	r3, [pc, #248]	; (8001fd8 <main+0xcd0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <main+0xbf8>
 8001ee6:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001eea:	3a18      	subs	r2, #24
 8001eec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001ef0:	3b10      	subs	r3, #16
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 fa61 	bl	80023bc <RingBuffer_Get>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <main+0xc00>
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <main+0xcd4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d014      	beq.n	8001f32 <main+0xc2a>
			isTxInProgress = 1;
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <main+0xcd0>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
			txComplete = 0;
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <main+0xcd4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart5, (uint8_t*)dataToSend, strlen(dataToSend));
 8001f14:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f18:	3b18      	subs	r3, #24
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe f9b8 	bl	8000290 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f28:	3b18      	subs	r3, #24
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482c      	ldr	r0, [pc, #176]	; (8001fe0 <main+0xcd8>)
 8001f2e:	f003 f9f3 	bl	8005318 <HAL_UART_Transmit_DMA>
		}
		memcpy(gpsBuffer, u2_buffer,u2_rx_size);
 8001f32:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <main+0xcc8>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4926      	ldr	r1, [pc, #152]	; (8001fd4 <main+0xccc>)
 8001f3a:	482a      	ldr	r0, [pc, #168]	; (8001fe4 <main+0xcdc>)
 8001f3c:	f006 fb58 	bl	80085f0 <memcpy>
		u2_rx_size=0;
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <main+0xcc8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
		extractUTC(gpsBuffer, utcTime);//提取其中的整数秒UTC时间
 8001f46:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8001f4a:	f103 031c 	add.w	r3, r3, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4824      	ldr	r0, [pc, #144]	; (8001fe4 <main+0xcdc>)
 8001f52:	f000 ff65 	bl	8002e20 <extractUTC>
    	if(getInitTime_flag==1)//第一次来UTC数据
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <main+0xce0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d111      	bne.n	8001f82 <main+0xc7a>
    	{
    		strcpy(lastUpdatedTime,utcTime);//初始化lastUpdatedTime(只有整数秒）
 8001f5e:	f507 5224 	add.w	r2, r7, #10496	; 0x2900
 8001f62:	f102 021c 	add.w	r2, r2, #28
 8001f66:	f507 5324 	add.w	r3, r7, #10496	; 0x2900
 8001f6a:	f103 030c 	add.w	r3, r3, #12
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 fb35 	bl	80085e0 <strcpy>
    		getInitTime_flag = 2;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <main+0xce0>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
    		PPS_isArrived=false;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <main+0xce4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	701a      	strb	r2, [r3, #0]
    	}
	}
    // 检查环形缓冲区是否有数据，并且串口是否空闲
    if (!isTxInProgress && RingBuffer_Get(&imuDataBuffer, dataToSend)) {
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <main+0xcd0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f aa07 	bne.w	800139a <main+0x92>
 8001f8c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001f90:	3a18      	subs	r2, #24
 8001f92:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8001f96:	3b10      	subs	r3, #16
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fa0e 	bl	80023bc <RingBuffer_Get>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f43f a9f9 	beq.w	800139a <main+0x92>
        isTxInProgress = 1; // 设置串口为忙状态
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <main+0xcd0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart5, (uint8_t*)dataToSend, strlen(dataToSend));
 8001fae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fb2:	3b18      	subs	r3, #24
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe f96b 	bl	8000290 <strlen>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fc2:	3b18      	subs	r3, #24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <main+0xcd8>)
 8001fc8:	f003 f9a6 	bl	8005318 <HAL_UART_Transmit_DMA>
	    if (pps_flag)
 8001fcc:	f7ff b9e5 	b.w	800139a <main+0x92>
 8001fd0:	200004af 	.word	0x200004af
 8001fd4:	20000418 	.word	0x20000418
 8001fd8:	200003b4 	.word	0x200003b4
 8001fdc:	200003bc 	.word	0x200003bc
 8001fe0:	20000500 	.word	0x20000500
 8001fe4:	2000030c 	.word	0x2000030c
 8001fe8:	2000025c 	.word	0x2000025c
 8001fec:	20000259 	.word	0x20000259

08001ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b094      	sub	sp, #80	; 0x50
 8001ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff6:	f107 0320 	add.w	r3, r7, #32
 8001ffa:	2230      	movs	r2, #48	; 0x30
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 fcfa 	bl	80079f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <SystemClock_Config+0xc8>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	4a26      	ldr	r2, [pc, #152]	; (80020b8 <SystemClock_Config+0xc8>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	6413      	str	r3, [r2, #64]	; 0x40
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <SystemClock_Config+0xc8>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
 8002034:	4b21      	ldr	r3, [pc, #132]	; (80020bc <SystemClock_Config+0xcc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a20      	ldr	r2, [pc, #128]	; (80020bc <SystemClock_Config+0xcc>)
 800203a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <SystemClock_Config+0xcc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800204c:	2301      	movs	r3, #1
 800204e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002056:	2302      	movs	r3, #2
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800205a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002060:	2304      	movs	r3, #4
 8002062:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002064:	2360      	movs	r3, #96	; 0x60
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002068:	2302      	movs	r3, #2
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800206c:	2304      	movs	r3, #4
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002070:	f107 0320 	add.w	r3, r7, #32
 8002074:	4618      	mov	r0, r3
 8002076:	f001 ff49 	bl	8003f0c <HAL_RCC_OscConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002080:	f000 f81e 	bl	80020c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002084:	230f      	movs	r3, #15
 8002086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002088:	2302      	movs	r3, #2
 800208a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800208c:	2380      	movs	r3, #128	; 0x80
 800208e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2101      	movs	r1, #1
 80020a0:	4618      	mov	r0, r3
 80020a2:	f002 f9ab 	bl	80043fc <HAL_RCC_ClockConfig>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020ac:	f000 f808 	bl	80020c0 <Error_Handler>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3750      	adds	r7, #80	; 0x50
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c4:	b672      	cpsid	i
}
 80020c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <Error_Handler+0x8>
	...

080020cc <isLeapYear>:
 *      Author: Lenovo
 */
#include "shared.h"


int isLeapYear(int year) {
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
    return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10c      	bne.n	80020f8 <isLeapYear+0x2c>
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <isLeapYear+0x5c>)
 80020e2:	fb83 1302 	smull	r1, r3, r3, r2
 80020e6:	1159      	asrs	r1, r3, #5
 80020e8:	17d3      	asrs	r3, r2, #31
 80020ea:	1acb      	subs	r3, r1, r3
 80020ec:	2164      	movs	r1, #100	; 0x64
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <isLeapYear+0x48>
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <isLeapYear+0x5c>)
 80020fc:	fb83 1302 	smull	r1, r3, r3, r2
 8002100:	11d9      	asrs	r1, r3, #7
 8002102:	17d3      	asrs	r3, r2, #31
 8002104:	1acb      	subs	r3, r1, r3
 8002106:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <isLeapYear+0x4c>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <isLeapYear+0x4e>
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	51eb851f 	.word	0x51eb851f

0800212c <getDaysInMonth>:

int getDaysInMonth(int year, int month) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
    static const int daysInMonth[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    if (month == 2 && isLeapYear(year)) {
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d107      	bne.n	800214c <getDaysInMonth+0x20>
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffc5 	bl	80020cc <isLeapYear>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <getDaysInMonth+0x20>
        return 29;
 8002148:	231d      	movs	r3, #29
 800214a:	e004      	b.n	8002156 <getDaysInMonth+0x2a>
    }
    return daysInMonth[month - 1];
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <getDaysInMonth+0x34>)
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	0800c7e8 	.word	0x0800c7e8

08002164 <incrementTime>:

void incrementTime(char *timeStr, int incrementSeconds) {
 8002164:	b5b0      	push	{r4, r5, r7, lr}
 8002166:	b08c      	sub	sp, #48	; 0x30
 8002168:	af04      	add	r7, sp, #16
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
    int year, month, day, hour, minute, second;
    sscanf(timeStr, "%4d%2d%2d%2d%2d%2d", &year, &month, &day, &hour, &minute, &second);
 800216e:	f107 0118 	add.w	r1, r7, #24
 8002172:	f107 021c 	add.w	r2, r7, #28
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	9303      	str	r3, [sp, #12]
 800217c:	f107 030c 	add.w	r3, r7, #12
 8002180:	9302      	str	r3, [sp, #8]
 8002182:	f107 0310 	add.w	r3, r7, #16
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	f107 0314 	add.w	r3, r7, #20
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	460b      	mov	r3, r1
 8002190:	4926      	ldr	r1, [pc, #152]	; (800222c <incrementTime+0xc8>)
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f005 fb2a 	bl	80077ec <siscanf>

    second += incrementSeconds;
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	4413      	add	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
    while (second >= 60) {
 80021a0:	e02c      	b.n	80021fc <incrementTime+0x98>
        second -= 60;
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	3b3c      	subs	r3, #60	; 0x3c
 80021a6:	60bb      	str	r3, [r7, #8]
        minute++;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
        if (minute >= 60) {
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b3b      	cmp	r3, #59	; 0x3b
 80021b2:	dd23      	ble.n	80021fc <incrementTime+0x98>
            minute = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
            hour++;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3301      	adds	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
            if (hour >= 24) {
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b17      	cmp	r3, #23
 80021c2:	dd1b      	ble.n	80021fc <incrementTime+0x98>
                hour = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
                day++;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3301      	adds	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
                if (day > getDaysInMonth(year, month)) {
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4611      	mov	r1, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffa9 	bl	800212c <getDaysInMonth>
 80021da:	4602      	mov	r2, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	429a      	cmp	r2, r3
 80021e0:	da0c      	bge.n	80021fc <incrementTime+0x98>
                    day = 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	617b      	str	r3, [r7, #20]
                    month++;
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	3301      	adds	r3, #1
 80021ea:	61bb      	str	r3, [r7, #24]
                    if (month > 12) {
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	dd04      	ble.n	80021fc <incrementTime+0x98>
                        month = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	61bb      	str	r3, [r7, #24]
                        year++;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
    while (second >= 60) {
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b3b      	cmp	r3, #59	; 0x3b
 8002200:	dccf      	bgt.n	80021a2 <incrementTime+0x3e>
                }
            }
        }
    }

    sprintf(timeStr, "%04d%02d%02d%02d%02d%02d", year, month, day, hour, minute, second);
 8002202:	69fc      	ldr	r4, [r7, #28]
 8002204:	69bd      	ldr	r5, [r7, #24]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	68b8      	ldr	r0, [r7, #8]
 800220e:	9003      	str	r0, [sp, #12]
 8002210:	9102      	str	r1, [sp, #8]
 8002212:	9201      	str	r2, [sp, #4]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	462b      	mov	r3, r5
 8002218:	4622      	mov	r2, r4
 800221a:	4905      	ldr	r1, [pc, #20]	; (8002230 <incrementTime+0xcc>)
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f005 fac5 	bl	80077ac <siprintf>
}
 8002222:	bf00      	nop
 8002224:	3720      	adds	r7, #32
 8002226:	46bd      	mov	sp, r7
 8002228:	bdb0      	pop	{r4, r5, r7, pc}
 800222a:	bf00      	nop
 800222c:	0800c710 	.word	0x0800c710
 8002230:	0800c724 	.word	0x0800c724

08002234 <Check_LED>:



//Check LED
void Check_LED()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
	LED0_ON();
 8002238:	2201      	movs	r2, #1
 800223a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800223e:	481d      	ldr	r0, [pc, #116]	; (80022b4 <Check_LED+0x80>)
 8002240:	f001 fe18 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002244:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002248:	f000 ff40 	bl	80030cc <HAL_Delay>
	LED0_OFF();
 800224c:	2200      	movs	r2, #0
 800224e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002252:	4818      	ldr	r0, [pc, #96]	; (80022b4 <Check_LED+0x80>)
 8002254:	f001 fe0e 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002258:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800225c:	f000 ff36 	bl	80030cc <HAL_Delay>

	LED1_ON();
 8002260:	2201      	movs	r2, #1
 8002262:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002266:	4813      	ldr	r0, [pc, #76]	; (80022b4 <Check_LED+0x80>)
 8002268:	f001 fe04 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800226c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002270:	f000 ff2c 	bl	80030cc <HAL_Delay>
	LED1_OFF();
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <Check_LED+0x80>)
 800227c:	f001 fdfa 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002280:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002284:	f000 ff22 	bl	80030cc <HAL_Delay>

	LED2_ON();
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800228e:	4809      	ldr	r0, [pc, #36]	; (80022b4 <Check_LED+0x80>)
 8002290:	f001 fdf0 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8002294:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002298:	f000 ff18 	bl	80030cc <HAL_Delay>
	LED2_OFF();
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a2:	4804      	ldr	r0, [pc, #16]	; (80022b4 <Check_LED+0x80>)
 80022a4:	f001 fde6 	bl	8003e74 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80022a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80022ac:	f000 ff0e 	bl	80030cc <HAL_Delay>
}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021800 	.word	0x40021800

080022b8 <Check_BEED>:

//上电后蜂鸣器响一次，计时器开始启�?
void Check_BEED()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
	int i=0;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  //Start BEED
  while(i<50000)
 80022c2:	e007      	b.n	80022d4 <Check_BEED+0x1c>
  {
	  HAL_GPIO_WritePin(BEED_GPIO_Port, BEED_Pin, HIGH);
 80022c4:	2201      	movs	r2, #1
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	4809      	ldr	r0, [pc, #36]	; (80022f0 <Check_BEED+0x38>)
 80022ca:	f001 fdd3 	bl	8003e74 <HAL_GPIO_WritePin>
	  i++;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3301      	adds	r3, #1
 80022d2:	607b      	str	r3, [r7, #4]
  while(i<50000)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80022da:	4293      	cmp	r3, r2
 80022dc:	ddf2      	ble.n	80022c4 <Check_BEED+0xc>
  }
  HAL_GPIO_TogglePin(BEED_GPIO_Port, BEED_Pin);//close BEED
 80022de:	2180      	movs	r1, #128	; 0x80
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <Check_BEED+0x38>)
 80022e2:	f001 fde0 	bl	8003ea6 <HAL_GPIO_TogglePin>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40021800 	.word	0x40021800

080022f4 <RingBuffer_Init>:

// 初始化环形缓冲区
void RingBuffer_Init(RingBuffer *ringBuffer) {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
    ringBuffer->head = 0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002302:	461a      	mov	r2, r3
 8002304:	2300      	movs	r3, #0
 8002306:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
    ringBuffer->tail = 0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002310:	461a      	mov	r2, r3
 8002312:	2300      	movs	r3, #0
 8002314:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    ringBuffer->count = 0;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800231e:	461a      	mov	r2, r3
 8002320:	2300      	movs	r3, #0
 8002322:	f8c2 3718 	str.w	r3, [r2, #1816]	; 0x718
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <RingBuffer_Put>:

// 向环形缓冲区添加数据
int RingBuffer_Put(RingBuffer *ringBuffer, const char *data) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
    if (ringBuffer->count >= BUFFER_SIZE) {
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002344:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 8002348:	2b31      	cmp	r3, #49	; 0x31
 800234a:	dd01      	ble.n	8002350 <RingBuffer_Put+0x1c>
        return 0;  // 缓冲区已满
 800234c:	2300      	movs	r3, #0
 800234e:	e02f      	b.n	80023b0 <RingBuffer_Put+0x7c>
    }
    strncpy(ringBuffer->buffer[ringBuffer->tail], data, STRING_LENGTH);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002356:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 800235a:	22c8      	movs	r2, #200	; 0xc8
 800235c:	fb02 f303 	mul.w	r3, r2, r3
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	22c8      	movs	r2, #200	; 0xc8
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f005 fb5a 	bl	8007a22 <strncpy>
    ringBuffer->tail = (ringBuffer->tail + 1) % BUFFER_SIZE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002374:	f8d3 3714 	ldr.w	r3, [r3, #1812]	; 0x714
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <RingBuffer_Put+0x84>)
 800237c:	fb83 1302 	smull	r1, r3, r3, r2
 8002380:	1119      	asrs	r1, r3, #4
 8002382:	17d3      	asrs	r3, r2, #31
 8002384:	1acb      	subs	r3, r1, r3
 8002386:	2132      	movs	r1, #50	; 0x32
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002394:	f8c2 3714 	str.w	r3, [r2, #1812]	; 0x714
    ringBuffer->count++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800239e:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80023a2:	3301      	adds	r3, #1
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80023aa:	f8c2 3718 	str.w	r3, [r2, #1816]	; 0x718
    return 1;  // 数据添加成功
 80023ae:	2301      	movs	r3, #1
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	51eb851f 	.word	0x51eb851f

080023bc <RingBuffer_Get>:

// 从环形缓冲区获取数据
int RingBuffer_Get(RingBuffer *ringBuffer, char *data) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
    if (ringBuffer->count == 0) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023cc:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <RingBuffer_Get+0x1c>
        return 0;  // 缓冲区为空
 80023d4:	2300      	movs	r3, #0
 80023d6:	e02f      	b.n	8002438 <RingBuffer_Get+0x7c>
    }
    strncpy(data, ringBuffer->buffer[ringBuffer->head], STRING_LENGTH);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023de:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 80023e2:	22c8      	movs	r2, #200	; 0xc8
 80023e4:	fb02 f303 	mul.w	r3, r2, r3
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	22c8      	movs	r2, #200	; 0xc8
 80023ee:	4619      	mov	r1, r3
 80023f0:	6838      	ldr	r0, [r7, #0]
 80023f2:	f005 fb16 	bl	8007a22 <strncpy>
    ringBuffer->head = (ringBuffer->head + 1) % BUFFER_SIZE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80023fc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	; 0x710
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <RingBuffer_Get+0x84>)
 8002404:	fb83 1302 	smull	r1, r3, r3, r2
 8002408:	1119      	asrs	r1, r3, #4
 800240a:	17d3      	asrs	r3, r2, #31
 800240c:	1acb      	subs	r3, r1, r3
 800240e:	2132      	movs	r1, #50	; 0x32
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800241c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
    ringBuffer->count--;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002426:	f8d3 3718 	ldr.w	r3, [r3, #1816]	; 0x718
 800242a:	3b01      	subs	r3, #1
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002432:	f8c2 3718 	str.w	r3, [r2, #1816]	; 0x718
    return 1;  // 数据获取成功
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	51eb851f 	.word	0x51eb851f

08002444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_MspInit+0x4c>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a0f      	ldr	r2, [pc, #60]	; (8002490 <HAL_MspInit+0x4c>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_MspInit+0x4c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_MspInit+0x4c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <NMI_Handler+0x4>

0800249a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800249e:	e7fe      	b.n	800249e <HardFault_Handler+0x4>

080024a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <MemManage_Handler+0x4>

080024a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <BusFault_Handler+0x4>

080024ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <UsageFault_Handler+0x4>

080024b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024e0:	f000 fdd4 	bl	800308c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DMA1_Stream0_IRQHandler+0x10>)
 80024ee:	f001 f8bb 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000065c 	.word	0x2000065c

080024fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <DMA1_Stream5_IRQHandler+0x10>)
 8002502:	f001 f8b1 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200007dc 	.word	0x200007dc

08002510 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <DMA1_Stream6_IRQHandler+0x10>)
 8002516:	f001 f8a7 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	2000083c 	.word	0x2000083c

08002524 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8002528:	2080      	movs	r0, #128	; 0x80
 800252a:	f001 fcd7 	bl	8003edc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PPS_Pin);
 800252e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002532:	f001 fcd3 	bl	8003edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <TIM2_IRQHandler+0x10>)
 8002542:	f002 fa3b 	bl	80049bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200004b8 	.word	0x200004b8

08002550 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <USART1_IRQHandler+0x10>)
 8002556:	f002 ffc3 	bl	80054e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000574 	.word	0x20000574

08002564 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <USART2_IRQHandler+0x10>)
 800256a:	f002 ffb9 	bl	80054e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	200005e8 	.word	0x200005e8

08002578 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <DMA1_Stream7_IRQHandler+0x10>)
 800257e:	f001 f873 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	200006bc 	.word	0x200006bc

0800258c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002590:	4802      	ldr	r0, [pc, #8]	; (800259c <UART5_IRQHandler+0x10>)
 8002592:	f002 ffa5 	bl	80054e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000500 	.word	0x20000500

080025a0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <DMA2_Stream2_IRQHandler+0x10>)
 80025a6:	f001 f85f 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	2000071c 	.word	0x2000071c

080025b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA2_Stream7_IRQHandler+0x10>)
 80025ba:	f001 f855 	bl	8003668 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	2000077c 	.word	0x2000077c

080025c8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 1 */
//串口回调函数

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1){//IMU接收串
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a17      	ldr	r2, [pc, #92]	; (8002634 <HAL_UARTEx_RxEventCallback+0x6c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_UARTEx_RxEventCallback+0x38>
		// UART3接收完
		u1_rx_size = Size;//把size赋值给全局变量u2_rx_size，通知主函数
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b15      	ldr	r3, [pc, #84]	; (8002638 <HAL_UARTEx_RxEventCallback+0x70>)
 80025e2:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, u1_buffer, sizeof(u1_buffer));// 再次启动DMA接收
 80025e4:	2255      	movs	r2, #85	; 0x55
 80025e6:	4915      	ldr	r1, [pc, #84]	; (800263c <HAL_UARTEx_RxEventCallback+0x74>)
 80025e8:	4812      	ldr	r0, [pc, #72]	; (8002634 <HAL_UARTEx_RxEventCallback+0x6c>)
 80025ea:	f002 ff13 	bl	8005414 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);//关闭过半中断
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HAL_UARTEx_RxEventCallback+0x78>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_UARTEx_RxEventCallback+0x78>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0208 	bic.w	r2, r2, #8
 80025fc:	601a      	str	r2, [r3, #0]
		u2_rx_size = Size;
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u2_buffer,sizeof(u2_buffer));// 再次启动DMA接收
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//关闭过半中断

	}
}
 80025fe:	e014      	b.n	800262a <HAL_UARTEx_RxEventCallback+0x62>
	}else if(huart == &huart2){//gps串口
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d110      	bne.n	800262a <HAL_UARTEx_RxEventCallback+0x62>
		u2_rx_size = Size;
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_UARTEx_RxEventCallback+0x80>)
 800260e:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, u2_buffer,sizeof(u2_buffer));// 再次启动DMA接收
 8002610:	2296      	movs	r2, #150	; 0x96
 8002612:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_UARTEx_RxEventCallback+0x84>)
 8002614:	480b      	ldr	r0, [pc, #44]	; (8002644 <HAL_UARTEx_RxEventCallback+0x7c>)
 8002616:	f002 fefd 	bl	8005414 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);//关闭过半中断
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_UARTEx_RxEventCallback+0x88>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_UARTEx_RxEventCallback+0x88>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000574 	.word	0x20000574
 8002638:	200004ae 	.word	0x200004ae
 800263c:	200003c0 	.word	0x200003c0
 8002640:	2000071c 	.word	0x2000071c
 8002644:	200005e8 	.word	0x200005e8
 8002648:	200004af 	.word	0x200004af
 800264c:	20000418 	.word	0x20000418
 8002650:	200007dc 	.word	0x200007dc

08002654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return 1;
 8002658:	2301      	movs	r3, #1
}
 800265a:	4618      	mov	r0, r3
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_kill>:

int _kill(int pid, int sig)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800266e:	f005 ff89 	bl	8008584 <__errno>
 8002672:	4603      	mov	r3, r0
 8002674:	2216      	movs	r2, #22
 8002676:	601a      	str	r2, [r3, #0]
  return -1;
 8002678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <_exit>:

void _exit (int status)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ffe7 	bl	8002664 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002696:	e7fe      	b.n	8002696 <_exit+0x12>

08002698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e00a      	b.n	80026c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026aa:	f3af 8000 	nop.w
 80026ae:	4601      	mov	r1, r0
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	1c5a      	adds	r2, r3, #1
 80026b4:	60ba      	str	r2, [r7, #8]
 80026b6:	b2ca      	uxtb	r2, r1
 80026b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf0      	blt.n	80026aa <_read+0x12>
  }

  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	60f8      	str	r0, [r7, #12]
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	e009      	b.n	80026f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	60ba      	str	r2, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fc3f 	bl	8002f70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	3301      	adds	r3, #1
 80026f6:	617b      	str	r3, [r7, #20]
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	dbf1      	blt.n	80026e4 <_write+0x12>
  }
  return len;
 8002700:	687b      	ldr	r3, [r7, #4]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <_close>:

int _close(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002732:	605a      	str	r2, [r3, #4]
  return 0;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_isatty>:

int _isatty(int file)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800277c:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <_sbrk+0x5c>)
 800277e:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <_sbrk+0x60>)
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002788:	4b13      	ldr	r3, [pc, #76]	; (80027d8 <_sbrk+0x64>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d102      	bne.n	8002796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <_sbrk+0x64>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <_sbrk+0x68>)
 8002794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <_sbrk+0x64>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d207      	bcs.n	80027b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027a4:	f005 feee 	bl	8008584 <__errno>
 80027a8:	4603      	mov	r3, r0
 80027aa:	220c      	movs	r2, #12
 80027ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ae:	f04f 33ff 	mov.w	r3, #4294967295
 80027b2:	e009      	b.n	80027c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <_sbrk+0x64>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <_sbrk+0x64>)
 80027c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	20020000 	.word	0x20020000
 80027d4:	00001000 	.word	0x00001000
 80027d8:	200004b4 	.word	0x200004b4
 80027dc:	20000a10 	.word	0x20000a10

080027e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <SystemInit+0x20>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	4a05      	ldr	r2, [pc, #20]	; (8002800 <SystemInit+0x20>)
 80027ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280a:	f107 0308 	add.w	r3, r7, #8
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002818:	463b      	mov	r3, r7
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002820:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_TIM2_Init+0x94>)
 8002822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_TIM2_Init+0x94>)
 800282a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800282e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <MX_TIM2_Init+0x94>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_TIM2_Init+0x94>)
 8002838:	2209      	movs	r2, #9
 800283a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_TIM2_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_TIM2_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002848:	4813      	ldr	r0, [pc, #76]	; (8002898 <MX_TIM2_Init+0x94>)
 800284a:	f001 fff7 	bl	800483c <HAL_TIM_Base_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002854:	f7ff fc34 	bl	80020c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	4619      	mov	r1, r3
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <MX_TIM2_Init+0x94>)
 8002866:	f002 f9b1 	bl	8004bcc <HAL_TIM_ConfigClockSource>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002870:	f7ff fc26 	bl	80020c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002874:	2300      	movs	r3, #0
 8002876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800287c:	463b      	mov	r3, r7
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_TIM2_Init+0x94>)
 8002882:	f002 fbcd 	bl	8005020 <HAL_TIMEx_MasterConfigSynchronization>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800288c:	f7ff fc18 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200004b8 	.word	0x200004b8

0800289c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d115      	bne.n	80028da <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_TIM_Base_MspInit+0x48>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_TIM_Base_MspInit+0x48>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_TIM_Base_MspInit+0x48>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2100      	movs	r1, #0
 80028ce:	201c      	movs	r0, #28
 80028d0:	f000 fcfb 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028d4:	201c      	movs	r0, #28
 80028d6:	f000 fd14 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_UART5_Init+0x4c>)
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <MX_UART5_Init+0x50>)
 80028f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <MX_UART5_Init+0x4c>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_UART5_Init+0x4c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_UART5_Init+0x4c>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <MX_UART5_Init+0x4c>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_UART5_Init+0x4c>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <MX_UART5_Init+0x4c>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_UART5_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800291e:	4805      	ldr	r0, [pc, #20]	; (8002934 <MX_UART5_Init+0x4c>)
 8002920:	f002 fc0e 	bl	8005140 <HAL_UART_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800292a:	f7ff fbc9 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000500 	.word	0x20000500
 8002938:	40005000 	.word	0x40005000

0800293c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002940:	4b11      	ldr	r3, [pc, #68]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_USART1_UART_Init+0x50>)
 8002944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800294c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002962:	220c      	movs	r2, #12
 8002964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800296c:	4b06      	ldr	r3, [pc, #24]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 800296e:	2200      	movs	r2, #0
 8002970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	; (8002988 <MX_USART1_UART_Init+0x4c>)
 8002974:	f002 fbe4 	bl	8005140 <HAL_UART_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800297e:	f7ff fb9f 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000574 	.word	0x20000574
 800298c:	40011000 	.word	0x40011000

08002990 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <MX_USART2_UART_Init+0x50>)
 8002998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 800299c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029a2:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029b6:	220c      	movs	r2, #12
 80029b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80029c6:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_USART2_UART_Init+0x4c>)
 80029c8:	f002 fbba 	bl	8005140 <HAL_UART_Init>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80029d2:	f7ff fb75 	bl	80020c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	200005e8 	.word	0x200005e8
 80029e0:	40004400 	.word	0x40004400

080029e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a5a      	ldr	r2, [pc, #360]	; (8002b6c <HAL_UART_MspInit+0x188>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	f040 80c2 	bne.w	8002b8c <HAL_UART_MspInit+0x1a8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a08:	2300      	movs	r3, #0
 8002a0a:	623b      	str	r3, [r7, #32]
 8002a0c:	4b58      	ldr	r3, [pc, #352]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	4a57      	ldr	r2, [pc, #348]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a16:	6413      	str	r3, [r2, #64]	; 0x40
 8002a18:	4b55      	ldr	r3, [pc, #340]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	4b51      	ldr	r3, [pc, #324]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	4a50      	ldr	r2, [pc, #320]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a2e:	f043 0304 	orr.w	r3, r3, #4
 8002a32:	6313      	str	r3, [r2, #48]	; 0x30
 8002a34:	4b4e      	ldr	r3, [pc, #312]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a48:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a50:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_UART_MspInit+0x18c>)
 8002a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a6e:	2308      	movs	r3, #8
 8002a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a76:	4619      	mov	r1, r3
 8002a78:	483e      	ldr	r0, [pc, #248]	; (8002b74 <HAL_UART_MspInit+0x190>)
 8002a7a:	f001 f85f 	bl	8003b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a7e:	2304      	movs	r3, #4
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4619      	mov	r1, r3
 8002a98:	4837      	ldr	r0, [pc, #220]	; (8002b78 <HAL_UART_MspInit+0x194>)
 8002a9a:	f001 f84f 	bl	8003b3c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002a9e:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002aa0:	4a37      	ldr	r2, [pc, #220]	; (8002b80 <HAL_UART_MspInit+0x19c>)
 8002aa2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aaa:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ab2:	4b32      	ldr	r3, [pc, #200]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ab8:	4b30      	ldr	r3, [pc, #192]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002aba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002abe:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ac6:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002acc:	4b2b      	ldr	r3, [pc, #172]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ad2:	4b2a      	ldr	r3, [pc, #168]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad8:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002ade:	4827      	ldr	r0, [pc, #156]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002ae0:	f000 fc2a 	bl	8003338 <HAL_DMA_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002aea:	f7ff fae9 	bl	80020c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a22      	ldr	r2, [pc, #136]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38
 8002af4:	4a21      	ldr	r2, [pc, #132]	; (8002b7c <HAL_UART_MspInit+0x198>)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002afa:	4b22      	ldr	r3, [pc, #136]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002afc:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <HAL_UART_MspInit+0x1a4>)
 8002afe:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002b00:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b06:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b22:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b34:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002b3c:	4811      	ldr	r0, [pc, #68]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b3e:	f000 fbfb 	bl	8003338 <HAL_DMA_Init>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 8002b48:	f7ff faba 	bl	80020c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b50:	635a      	str	r2, [r3, #52]	; 0x34
 8002b52:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_UART_MspInit+0x1a0>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2035      	movs	r0, #53	; 0x35
 8002b5e:	f000 fbb4 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b62:	2035      	movs	r0, #53	; 0x35
 8002b64:	f000 fbcd 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b68:	e13e      	b.n	8002de8 <HAL_UART_MspInit+0x404>
 8002b6a:	bf00      	nop
 8002b6c:	40005000 	.word	0x40005000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40020c00 	.word	0x40020c00
 8002b7c:	2000065c 	.word	0x2000065c
 8002b80:	40026010 	.word	0x40026010
 8002b84:	200006bc 	.word	0x200006bc
 8002b88:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a97      	ldr	r2, [pc, #604]	; (8002df0 <HAL_UART_MspInit+0x40c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	f040 8092 	bne.w	8002cbc <HAL_UART_MspInit+0x2d8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
 8002b9c:	4b95      	ldr	r3, [pc, #596]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	4a94      	ldr	r2, [pc, #592]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002ba2:	f043 0310 	orr.w	r3, r3, #16
 8002ba6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba8:	4b92      	ldr	r3, [pc, #584]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	4b8e      	ldr	r3, [pc, #568]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	4a8d      	ldr	r2, [pc, #564]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc4:	4b8b      	ldr	r3, [pc, #556]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bde:	2303      	movs	r3, #3
 8002be0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002be2:	2307      	movs	r3, #7
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bea:	4619      	mov	r1, r3
 8002bec:	4882      	ldr	r0, [pc, #520]	; (8002df8 <HAL_UART_MspInit+0x414>)
 8002bee:	f000 ffa5 	bl	8003b3c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002bf2:	4b82      	ldr	r3, [pc, #520]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002bf4:	4a82      	ldr	r2, [pc, #520]	; (8002e00 <HAL_UART_MspInit+0x41c>)
 8002bf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002bf8:	4b80      	ldr	r3, [pc, #512]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002bfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c00:	4b7e      	ldr	r3, [pc, #504]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c06:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c14:	4b79      	ldr	r3, [pc, #484]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1a:	4b78      	ldr	r3, [pc, #480]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002c20:	4b76      	ldr	r3, [pc, #472]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c26:	4b75      	ldr	r3, [pc, #468]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c2c:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002c32:	4872      	ldr	r0, [pc, #456]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c34:	f000 fb80 	bl	8003338 <HAL_DMA_Init>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_MspInit+0x25e>
      Error_Handler();
 8002c3e:	f7ff fa3f 	bl	80020c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c46:	639a      	str	r2, [r3, #56]	; 0x38
 8002c48:	4a6c      	ldr	r2, [pc, #432]	; (8002dfc <HAL_UART_MspInit+0x418>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002c4e:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c50:	4a6d      	ldr	r2, [pc, #436]	; (8002e08 <HAL_UART_MspInit+0x424>)
 8002c52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002c54:	4b6b      	ldr	r3, [pc, #428]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5c:	4b69      	ldr	r3, [pc, #420]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c62:	4b68      	ldr	r3, [pc, #416]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c68:	4b66      	ldr	r3, [pc, #408]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c70:	4b64      	ldr	r3, [pc, #400]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c76:	4b63      	ldr	r3, [pc, #396]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c7c:	4b61      	ldr	r3, [pc, #388]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c82:	4b60      	ldr	r3, [pc, #384]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c88:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c8e:	485d      	ldr	r0, [pc, #372]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002c90:	f000 fb52 	bl	8003338 <HAL_DMA_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_UART_MspInit+0x2ba>
      Error_Handler();
 8002c9a:	f7ff fa11 	bl	80020c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002ca2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca4:	4a57      	ldr	r2, [pc, #348]	; (8002e04 <HAL_UART_MspInit+0x420>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	2025      	movs	r0, #37	; 0x25
 8002cb0:	f000 fb0b 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cb4:	2025      	movs	r0, #37	; 0x25
 8002cb6:	f000 fb24 	bl	8003302 <HAL_NVIC_EnableIRQ>
}
 8002cba:	e095      	b.n	8002de8 <HAL_UART_MspInit+0x404>
  else if(uartHandle->Instance==USART2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_UART_MspInit+0x428>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	f040 8090 	bne.w	8002de8 <HAL_UART_MspInit+0x404>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b49      	ldr	r3, [pc, #292]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a48      	ldr	r2, [pc, #288]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd8:	4b46      	ldr	r3, [pc, #280]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60bb      	str	r3, [r7, #8]
 8002ce8:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_UART_MspInit+0x410>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d00:	230c      	movs	r3, #12
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d10:	2307      	movs	r3, #7
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4837      	ldr	r0, [pc, #220]	; (8002df8 <HAL_UART_MspInit+0x414>)
 8002d1c:	f000 ff0e 	bl	8003b3c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d20:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d22:	4a3c      	ldr	r2, [pc, #240]	; (8002e14 <HAL_UART_MspInit+0x430>)
 8002d24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d2c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d2e:	4b38      	ldr	r3, [pc, #224]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d34:	4b36      	ldr	r3, [pc, #216]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d3a:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d40:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d48:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d54:	4b2e      	ldr	r3, [pc, #184]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d5a:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d60:	482b      	ldr	r0, [pc, #172]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d62:	f000 fae9 	bl	8003338 <HAL_DMA_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_UART_MspInit+0x38c>
      Error_Handler();
 8002d6c:	f7ff f9a8 	bl	80020c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_UART_MspInit+0x42c>)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002d7c:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <HAL_UART_MspInit+0x438>)
 8002d80:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002d82:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002d84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002d8c:	2240      	movs	r2, #64	; 0x40
 8002d8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d90:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002d98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da4:	4b1c      	ldr	r3, [pc, #112]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002dbc:	4816      	ldr	r0, [pc, #88]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002dbe:	f000 fabb 	bl	8003338 <HAL_DMA_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_MspInit+0x3e8>
      Error_Handler();
 8002dc8:	f7ff f97a 	bl	80020c0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd2:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <HAL_UART_MspInit+0x434>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2026      	movs	r0, #38	; 0x26
 8002dde:	f000 fa74 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002de2:	2026      	movs	r0, #38	; 0x26
 8002de4:	f000 fa8d 	bl	8003302 <HAL_NVIC_EnableIRQ>
}
 8002de8:	bf00      	nop
 8002dea:	3738      	adds	r7, #56	; 0x38
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40011000 	.word	0x40011000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020000 	.word	0x40020000
 8002dfc:	2000071c 	.word	0x2000071c
 8002e00:	40026440 	.word	0x40026440
 8002e04:	2000077c 	.word	0x2000077c
 8002e08:	400264b8 	.word	0x400264b8
 8002e0c:	40004400 	.word	0x40004400
 8002e10:	200007dc 	.word	0x200007dc
 8002e14:	40026088 	.word	0x40026088
 8002e18:	2000083c 	.word	0x2000083c
 8002e1c:	400260a0 	.word	0x400260a0

08002e20 <extractUTC>:
  }
}

/* USER CODE BEGIN 1 */
//串口函数解析——获取Gps中的utc时间
void extractUTC(const uint8_t *input, char *output) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
    // 找到第一个逗号的位置
    const char *ptr = strchr((const char *)input, ',');
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f004 fdeb 	bl	8007a08 <strchr>
 8002e32:	6178      	str	r0, [r7, #20]
    if (ptr != NULL) {
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01c      	beq.n	8002e74 <extractUTC+0x54>
        // 将指针移动到下一个字符，即UTC时间的开始
        ptr++;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	617b      	str	r3, [r7, #20]
        // 找到小数点的位置，即UTC时间的整数部分结束
        const char *end = strchr(ptr, '.');
 8002e40:	212e      	movs	r1, #46	; 0x2e
 8002e42:	6978      	ldr	r0, [r7, #20]
 8002e44:	f004 fde0 	bl	8007a08 <strchr>
 8002e48:	6138      	str	r0, [r7, #16]
        if (end != NULL) {
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d011      	beq.n	8002e74 <extractUTC+0x54>
            // 计算UTC时间整数部分的长度
            int length = end - ptr;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	60fb      	str	r3, [r7, #12]
            // 确保长度为14个字符
            if (length == 14) {
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b0e      	cmp	r3, #14
 8002e5c:	d10a      	bne.n	8002e74 <extractUTC+0x54>
                // 复制UTC时间整数部分到输出数组
                strncpy(output, ptr, length);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	461a      	mov	r2, r3
 8002e62:	6979      	ldr	r1, [r7, #20]
 8002e64:	6838      	ldr	r0, [r7, #0]
 8002e66:	f004 fddc 	bl	8007a22 <strncpy>
                // 确保输出字符串以空字符结尾
                output[length] = '\0';
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	4413      	add	r3, r2
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
            }
        }
    }
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <compareTime>:

    // 将更新后的时间写回字符串
    sprintf(utc, "%04d%02d%02d%02d%02d%02d", year, month, day, hour, min, sec);
}
// 比较两个时间字符串并返回时间差（以秒为单位）
long compareTime(const char *time1, const char *time2) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b09c      	sub	sp, #112	; 0x70
 8002e80:	af04      	add	r7, sp, #16
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
    struct tm tm1, tm2;
    memset(&tm1, 0, sizeof(tm1));
 8002e86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e8a:	2224      	movs	r2, #36	; 0x24
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f004 fdb2 	bl	80079f8 <memset>
    memset(&tm2, 0, sizeof(tm2));
 8002e94:	f107 0308 	add.w	r3, r7, #8
 8002e98:	2224      	movs	r2, #36	; 0x24
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f004 fdab 	bl	80079f8 <memset>
    sscanf(time1, "%4d%2d%2d%2d%2d%2d", &tm1.tm_year, &tm1.tm_mon, &tm1.tm_mday, &tm1.tm_hour, &tm1.tm_min, &tm1.tm_sec);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea6:	f103 0110 	add.w	r1, r3, #16
 8002eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eae:	f103 0214 	add.w	r2, r3, #20
 8002eb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec4:	3308      	adds	r3, #8
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ecc:	330c      	adds	r3, #12
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4926      	ldr	r1, [pc, #152]	; (8002f6c <compareTime+0xf0>)
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 fc89 	bl	80077ec <siscanf>
    sscanf(time2, "%4d%2d%2d%2d%2d%2d", &tm2.tm_year, &tm2.tm_mon, &tm2.tm_mday, &tm2.tm_hour, &tm2.tm_min, &tm2.tm_sec);
 8002eda:	f107 0308 	add.w	r3, r7, #8
 8002ede:	f103 0110 	add.w	r1, r3, #16
 8002ee2:	f107 0308 	add.w	r3, r7, #8
 8002ee6:	f103 0214 	add.w	r2, r3, #20
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	9303      	str	r3, [sp, #12]
 8002ef0:	f107 0308 	add.w	r3, r7, #8
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	f107 0308 	add.w	r3, r7, #8
 8002efc:	3308      	adds	r3, #8
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	330c      	adds	r3, #12
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4918      	ldr	r1, [pc, #96]	; (8002f6c <compareTime+0xf0>)
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f004 fc6d 	bl	80077ec <siscanf>

    tm1.tm_year -= 1900;
 8002f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f14:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8002f18:	643b      	str	r3, [r7, #64]	; 0x40
    tm1.tm_mon -= 1;
 8002f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    tm2.tm_year -= 1900;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
 8002f26:	61fb      	str	r3, [r7, #28]
    tm2.tm_mon -= 1;
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	61bb      	str	r3, [r7, #24]

    time_t t1 = mktime(&tm1);
 8002f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f32:	4618      	mov	r0, r3
 8002f34:	f004 fe68 	bl	8007c08 <mktime>
 8002f38:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    time_t t2 = mktime(&tm2);
 8002f3c:	f107 0308 	add.w	r3, r7, #8
 8002f40:	4618      	mov	r0, r3
 8002f42:	f004 fe61 	bl	8007c08 <mktime>
 8002f46:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50

    return difftime(t1, t2);
 8002f4a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f52:	f004 fd79 	bl	8007a48 <difftime>
 8002f56:	ec53 2b10 	vmov	r2, r3, d0
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd fe0b 	bl	8000b78 <__aeabi_d2iz>
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3760      	adds	r7, #96	; 0x60
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	0800c7ac 	.word	0x0800c7ac

08002f70 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart5, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002f78:	1d39      	adds	r1, r7, #4
 8002f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <__io_putchar+0x20>)
 8002f82:	f002 f937 	bl	80051f4 <HAL_UART_Transmit>
  return ch;
 8002f86:	687b      	ldr	r3, [r7, #4]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000500 	.word	0x20000500

08002f94 <Reset_Handler>:
  .type  Reset_Handler, %function
Reset_Handler:  



  ldr   sp, =_estack     /* set stack pointer */
 8002f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f98:	480d      	ldr	r0, [pc, #52]	; (8002fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f9a:	490e      	ldr	r1, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f9c:	4a0e      	ldr	r2, [pc, #56]	; (8002fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa0:	e002      	b.n	8002fa8 <LoopCopyDataInit>

08002fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fa6:	3304      	adds	r3, #4

08002fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fac:	d3f9      	bcc.n	8002fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fb0:	4c0b      	ldr	r4, [pc, #44]	; (8002fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fb4:	e001      	b.n	8002fba <LoopFillZerobss>

08002fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb8:	3204      	adds	r2, #4

08002fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fbc:	d3fb      	bcc.n	8002fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fbe:	f7ff fc0f 	bl	80027e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fc2:	f005 fae5 	bl	8008590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fc6:	f7fe f99f 	bl	8001308 <main>
  bx  lr    
 8002fca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fd4:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8002fd8:	0800cd9c 	.word	0x0800cd9c
  ldr r2, =_sbss
 8002fdc:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8002fe0:	20000a10 	.word	0x20000a10

08002fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fe4:	e7fe      	b.n	8002fe4 <ADC_IRQHandler>
	...

08002fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fec:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0d      	ldr	r2, [pc, #52]	; (8003028 <HAL_Init+0x40>)
 8002ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <HAL_Init+0x40>)
 8002ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <HAL_Init+0x40>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <HAL_Init+0x40>)
 800300a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800300e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003010:	2003      	movs	r0, #3
 8003012:	f000 f94f 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003016:	200f      	movs	r0, #15
 8003018:	f000 f808 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301c:	f7ff fa12 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40023c00 	.word	0x40023c00

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_InitTick+0x54>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_InitTick+0x58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003042:	fbb3 f3f1 	udiv	r3, r3, r1
 8003046:	fbb2 f3f3 	udiv	r3, r2, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f967 	bl	800331e <HAL_SYSTICK_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00e      	b.n	8003078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2b0f      	cmp	r3, #15
 800305e:	d80a      	bhi.n	8003076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003060:	2200      	movs	r2, #0
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	f000 f92f 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800306c:	4a06      	ldr	r2, [pc, #24]	; (8003088 <HAL_InitTick+0x5c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	e000      	b.n	8003078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20000008 	.word	0x20000008
 8003084:	20000010 	.word	0x20000010
 8003088:	2000000c 	.word	0x2000000c

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000010 	.word	0x20000010
 80030b0:	2000089c 	.word	0x2000089c

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	2000089c 	.word	0x2000089c

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000010 	.word	0x20000010

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff3e 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff8e 	bl	8003208 <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5d 	bl	80031b4 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff31 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003344:	f7ff feb6 	bl	80030b4 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e099      	b.n	8003488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003374:	e00f      	b.n	8003396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003376:	f7ff fe9d 	bl	80030b4 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b05      	cmp	r3, #5
 8003382:	d908      	bls.n	8003396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e078      	b.n	8003488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e8      	bne.n	8003376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	4b38      	ldr	r3, [pc, #224]	; (8003490 <HAL_DMA_Init+0x158>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d107      	bne.n	8003400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	4313      	orrs	r3, r2
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	697a      	ldr	r2, [r7, #20]
 8003406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	2b04      	cmp	r3, #4
 8003428:	d117      	bne.n	800345a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d00e      	beq.n	800345a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 fb01 	bl	8003a44 <DMA_CheckFifoParam>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2240      	movs	r2, #64	; 0x40
 800344c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003456:	2301      	movs	r3, #1
 8003458:	e016      	b.n	8003488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fab8 	bl	80039d8 <DMA_CalcBaseAndBitshift>
 8003468:	4603      	mov	r3, r0
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	223f      	movs	r2, #63	; 0x3f
 8003472:	409a      	lsls	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	f010803f 	.word	0xf010803f

08003494 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_DMA_Start_IT+0x26>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e040      	b.n	800353c <HAL_DMA_Start_IT+0xa8>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d12f      	bne.n	800352e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fa4a 	bl	800397c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	223f      	movs	r2, #63	; 0x3f
 80034ee:	409a      	lsls	r2, r3
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0216 	orr.w	r2, r2, #22
 8003502:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0208 	orr.w	r2, r2, #8
 800351a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e005      	b.n	800353a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003552:	f7ff fdaf 	bl	80030b4 <HAL_GetTick>
 8003556:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d008      	beq.n	8003576 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2280      	movs	r2, #128	; 0x80
 8003568:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e052      	b.n	800361c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0216 	bic.w	r2, r2, #22
 8003584:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003594:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d103      	bne.n	80035a6 <HAL_DMA_Abort+0x62>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0208 	bic.w	r2, r2, #8
 80035b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0201 	bic.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c6:	e013      	b.n	80035f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035c8:	f7ff fd74 	bl	80030b4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d90c      	bls.n	80035f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2203      	movs	r2, #3
 80035e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e015      	b.n	800361c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e4      	bne.n	80035c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	223f      	movs	r2, #63	; 0x3f
 8003604:	409a      	lsls	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	; 0x80
 800363c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e00c      	b.n	800365c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2205      	movs	r2, #5
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003674:	4b8e      	ldr	r3, [pc, #568]	; (80038b0 <HAL_DMA_IRQHandler+0x248>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a8e      	ldr	r2, [pc, #568]	; (80038b4 <HAL_DMA_IRQHandler+0x24c>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0a9b      	lsrs	r3, r3, #10
 8003680:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2208      	movs	r2, #8
 8003694:	409a      	lsls	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	4013      	ands	r3, r2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01a      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d013      	beq.n	80036d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0204 	bic.w	r2, r2, #4
 80036ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c0:	2208      	movs	r2, #8
 80036c2:	409a      	lsls	r2, r3
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d8:	2201      	movs	r2, #1
 80036da:	409a      	lsls	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4013      	ands	r3, r2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d012      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f6:	2201      	movs	r2, #1
 80036f8:	409a      	lsls	r2, r3
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0202 	orr.w	r2, r3, #2
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	2204      	movs	r2, #4
 8003710:	409a      	lsls	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	4013      	ands	r3, r2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d012      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372c:	2204      	movs	r2, #4
 800372e:	409a      	lsls	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003738:	f043 0204 	orr.w	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2210      	movs	r2, #16
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4013      	ands	r3, r2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d043      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b00      	cmp	r3, #0
 800375c:	d03c      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	2210      	movs	r2, #16
 8003764:	409a      	lsls	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d018      	beq.n	80037aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d108      	bne.n	8003798 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	2b00      	cmp	r3, #0
 800378c:	d024      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	4798      	blx	r3
 8003796:	e01f      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
 80037a8:	e016      	b.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0208 	bic.w	r2, r2, #8
 80037c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037dc:	2220      	movs	r2, #32
 80037de:	409a      	lsls	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4013      	ands	r3, r2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 808f 	beq.w	8003908 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0310 	and.w	r3, r3, #16
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8087 	beq.w	8003908 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2220      	movs	r2, #32
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d136      	bne.n	8003880 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0216 	bic.w	r2, r2, #22
 8003820:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	695a      	ldr	r2, [r3, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003830:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <HAL_DMA_IRQHandler+0x1da>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0208 	bic.w	r2, r2, #8
 8003850:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	223f      	movs	r2, #63	; 0x3f
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	2b00      	cmp	r3, #0
 8003874:	d07e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
        }
        return;
 800387e:	e079      	b.n	8003974 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01d      	beq.n	80038ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10d      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	4798      	blx	r3
 80038ac:	e02c      	b.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
 80038ae:	bf00      	nop
 80038b0:	20000008 	.word	0x20000008
 80038b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
 80038c8:	e01e      	b.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10f      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0210 	bic.w	r2, r2, #16
 80038e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390c:	2b00      	cmp	r3, #0
 800390e:	d032      	beq.n	8003976 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2205      	movs	r2, #5
 8003920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3301      	adds	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	429a      	cmp	r2, r3
 800393e:	d307      	bcc.n	8003950 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f2      	bne.n	8003934 <HAL_DMA_IRQHandler+0x2cc>
 800394e:	e000      	b.n	8003952 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003950:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	4798      	blx	r3
 8003972:	e000      	b.n	8003976 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003974:	bf00      	nop
    }
  }
}
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
 8003988:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003998:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d108      	bne.n	80039bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039ba:	e007      	b.n	80039cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	60da      	str	r2, [r3, #12]
}
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3b10      	subs	r3, #16
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <DMA_CalcBaseAndBitshift+0x64>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	091b      	lsrs	r3, r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <DMA_CalcBaseAndBitshift+0x68>)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b03      	cmp	r3, #3
 8003a04:	d909      	bls.n	8003a1a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a0e:	f023 0303 	bic.w	r3, r3, #3
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	659a      	str	r2, [r3, #88]	; 0x58
 8003a18:	e007      	b.n	8003a2a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a22:	f023 0303 	bic.w	r3, r3, #3
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	aaaaaaab 	.word	0xaaaaaaab
 8003a40:	0800c830 	.word	0x0800c830

08003a44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d856      	bhi.n	8003b12 <DMA_CheckFifoParam+0xce>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <DMA_CheckFifoParam+0x28>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a7d 	.word	0x08003a7d
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003a7d 	.word	0x08003a7d
 8003a78:	08003b13 	.word	0x08003b13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d046      	beq.n	8003b16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a8c:	e043      	b.n	8003b16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a96:	d140      	bne.n	8003b1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9c:	e03d      	b.n	8003b1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa6:	d121      	bne.n	8003aec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d837      	bhi.n	8003b1e <DMA_CheckFifoParam+0xda>
 8003aae:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <DMA_CheckFifoParam+0x70>)
 8003ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003acb 	.word	0x08003acb
 8003abc:	08003ac5 	.word	0x08003ac5
 8003ac0:	08003add 	.word	0x08003add
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac8:	e030      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d025      	beq.n	8003b22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e022      	b.n	8003b22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ae4:	d11f      	bne.n	8003b26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aea:	e01c      	b.n	8003b26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d903      	bls.n	8003afa <DMA_CheckFifoParam+0xb6>
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d003      	beq.n	8003b00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003af8:	e018      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      break;
 8003afe:	e015      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00e      	beq.n	8003b2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e00b      	b.n	8003b2a <DMA_CheckFifoParam+0xe6>
      break;
 8003b12:	bf00      	nop
 8003b14:	e00a      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b16:	bf00      	nop
 8003b18:	e008      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1a:	bf00      	nop
 8003b1c:	e006      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b1e:	bf00      	nop
 8003b20:	e004      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b22:	bf00      	nop
 8003b24:	e002      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b26:	bf00      	nop
 8003b28:	e000      	b.n	8003b2c <DMA_CheckFifoParam+0xe8>
      break;
 8003b2a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop

08003b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	e16b      	b.n	8003e30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	f040 815a 	bne.w	8003e2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d005      	beq.n	8003b8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d130      	bne.n	8003bf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	2203      	movs	r2, #3
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 0201 	and.w	r2, r3, #1
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b03      	cmp	r3, #3
 8003bfa:	d017      	beq.n	8003c2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	2203      	movs	r2, #3
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4013      	ands	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d123      	bne.n	8003c80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	08da      	lsrs	r2, r3, #3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3208      	adds	r2, #8
 8003c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	220f      	movs	r2, #15
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	69b9      	ldr	r1, [r7, #24]
 8003c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0203 	and.w	r2, r3, #3
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80b4 	beq.w	8003e2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	4b60      	ldr	r3, [pc, #384]	; (8003e48 <HAL_GPIO_Init+0x30c>)
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cca:	4a5f      	ldr	r2, [pc, #380]	; (8003e48 <HAL_GPIO_Init+0x30c>)
 8003ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd2:	4b5d      	ldr	r3, [pc, #372]	; (8003e48 <HAL_GPIO_Init+0x30c>)
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cde:	4a5b      	ldr	r2, [pc, #364]	; (8003e4c <HAL_GPIO_Init+0x310>)
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	3302      	adds	r3, #2
 8003ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a52      	ldr	r2, [pc, #328]	; (8003e50 <HAL_GPIO_Init+0x314>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <HAL_GPIO_Init+0x226>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a51      	ldr	r2, [pc, #324]	; (8003e54 <HAL_GPIO_Init+0x318>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d025      	beq.n	8003d5e <HAL_GPIO_Init+0x222>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a50      	ldr	r2, [pc, #320]	; (8003e58 <HAL_GPIO_Init+0x31c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d01f      	beq.n	8003d5a <HAL_GPIO_Init+0x21e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4f      	ldr	r2, [pc, #316]	; (8003e5c <HAL_GPIO_Init+0x320>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d019      	beq.n	8003d56 <HAL_GPIO_Init+0x21a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4e      	ldr	r2, [pc, #312]	; (8003e60 <HAL_GPIO_Init+0x324>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_GPIO_Init+0x216>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4d      	ldr	r2, [pc, #308]	; (8003e64 <HAL_GPIO_Init+0x328>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d00d      	beq.n	8003d4e <HAL_GPIO_Init+0x212>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a4c      	ldr	r2, [pc, #304]	; (8003e68 <HAL_GPIO_Init+0x32c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d007      	beq.n	8003d4a <HAL_GPIO_Init+0x20e>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a4b      	ldr	r2, [pc, #300]	; (8003e6c <HAL_GPIO_Init+0x330>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_GPIO_Init+0x20a>
 8003d42:	2307      	movs	r3, #7
 8003d44:	e00e      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d46:	2308      	movs	r3, #8
 8003d48:	e00c      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d4a:	2306      	movs	r3, #6
 8003d4c:	e00a      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d4e:	2305      	movs	r3, #5
 8003d50:	e008      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d52:	2304      	movs	r3, #4
 8003d54:	e006      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d56:	2303      	movs	r3, #3
 8003d58:	e004      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e002      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <HAL_GPIO_Init+0x228>
 8003d62:	2300      	movs	r3, #0
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	f002 0203 	and.w	r2, r2, #3
 8003d6a:	0092      	lsls	r2, r2, #2
 8003d6c:	4093      	lsls	r3, r2
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d74:	4935      	ldr	r1, [pc, #212]	; (8003e4c <HAL_GPIO_Init+0x310>)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	089b      	lsrs	r3, r3, #2
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da6:	4a32      	ldr	r2, [pc, #200]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dd0:	4a27      	ldr	r2, [pc, #156]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dfa:	4a1d      	ldr	r2, [pc, #116]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e24:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <HAL_GPIO_Init+0x334>)
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	61fb      	str	r3, [r7, #28]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b0f      	cmp	r3, #15
 8003e34:	f67f ae90 	bls.w	8003b58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3724      	adds	r7, #36	; 0x24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	40013800 	.word	0x40013800
 8003e50:	40020000 	.word	0x40020000
 8003e54:	40020400 	.word	0x40020400
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020c00 	.word	0x40020c00
 8003e60:	40021000 	.word	0x40021000
 8003e64:	40021400 	.word	0x40021400
 8003e68:	40021800 	.word	0x40021800
 8003e6c:	40021c00 	.word	0x40021c00
 8003e70:	40013c00 	.word	0x40013c00

08003e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	807b      	strh	r3, [r7, #2]
 8003e80:	4613      	mov	r3, r2
 8003e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e84:	787b      	ldrb	r3, [r7, #1]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e8a:	887a      	ldrh	r2, [r7, #2]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e90:	e003      	b.n	8003e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e92:	887b      	ldrh	r3, [r7, #2]
 8003e94:	041a      	lsls	r2, r3, #16
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	619a      	str	r2, [r3, #24]
}
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003eb8:	887a      	ldrh	r2, [r7, #2]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	041a      	lsls	r2, r3, #16
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	43d9      	mvns	r1, r3
 8003ec4:	887b      	ldrh	r3, [r7, #2]
 8003ec6:	400b      	ands	r3, r1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	619a      	str	r2, [r3, #24]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
	...

08003edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fd f9ba 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40013c00 	.word	0x40013c00

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e267      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d075      	beq.n	8004016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2a:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d00c      	beq.n	8003f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4b85      	ldr	r3, [pc, #532]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d112      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f42:	4b82      	ldr	r3, [pc, #520]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f4e:	d10b      	bne.n	8003f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f50:	4b7e      	ldr	r3, [pc, #504]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05b      	beq.n	8004014 <HAL_RCC_OscConfig+0x108>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d157      	bne.n	8004014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e242      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d106      	bne.n	8003f80 <HAL_RCC_OscConfig+0x74>
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a75      	ldr	r2, [pc, #468]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e01d      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b70      	ldr	r3, [pc, #448]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6f      	ldr	r2, [pc, #444]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6c      	ldr	r2, [pc, #432]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e00b      	b.n	8003fbc <HAL_RCC_OscConfig+0xb0>
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a68      	ldr	r2, [pc, #416]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b66      	ldr	r3, [pc, #408]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a65      	ldr	r2, [pc, #404]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d013      	beq.n	8003fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7ff f876 	bl	80030b4 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fcc:	f7ff f872 	bl	80030b4 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e207      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fde:	4b5b      	ldr	r3, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0xc0>
 8003fea:	e014      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7ff f862 	bl	80030b4 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7ff f85e 	bl	80030b4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	; 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1f3      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004006:	4b51      	ldr	r3, [pc, #324]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1f0      	bne.n	8003ff4 <HAL_RCC_OscConfig+0xe8>
 8004012:	e000      	b.n	8004016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d063      	beq.n	80040ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004022:	4b4a      	ldr	r3, [pc, #296]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004036:	2b08      	cmp	r3, #8
 8004038:	d11c      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d116      	bne.n	8004074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004046:	4b41      	ldr	r3, [pc, #260]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d005      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d001      	beq.n	800405e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1c7      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4937      	ldr	r1, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004072:	e03a      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d020      	beq.n	80040be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407c:	4b34      	ldr	r3, [pc, #208]	; (8004150 <HAL_RCC_OscConfig+0x244>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004082:	f7ff f817 	bl	80030b4 <HAL_GetTick>
 8004086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004088:	e008      	b.n	800409c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800408a:	f7ff f813 	bl	80030b4 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	2b02      	cmp	r3, #2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e1a8      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x240>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a8:	4b28      	ldr	r3, [pc, #160]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4925      	ldr	r1, [pc, #148]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	600b      	str	r3, [r1, #0]
 80040bc:	e015      	b.n	80040ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040be:	4b24      	ldr	r3, [pc, #144]	; (8004150 <HAL_RCC_OscConfig+0x244>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe fff6 	bl	80030b4 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fe fff2 	bl	80030b4 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e187      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040de:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x240>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d036      	beq.n	8004164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fe:	4b15      	ldr	r3, [pc, #84]	; (8004154 <HAL_RCC_OscConfig+0x248>)
 8004100:	2201      	movs	r2, #1
 8004102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004104:	f7fe ffd6 	bl	80030b4 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800410c:	f7fe ffd2 	bl	80030b4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e167      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800411e:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_OscConfig+0x240>)
 8004120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x200>
 800412a:	e01b      	b.n	8004164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_OscConfig+0x248>)
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004132:	f7fe ffbf 	bl	80030b4 <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004138:	e00e      	b.n	8004158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800413a:	f7fe ffbb 	bl	80030b4 <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d907      	bls.n	8004158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e150      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	42470000 	.word	0x42470000
 8004154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800415a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ea      	bne.n	800413a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8097 	beq.w	80042a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b81      	ldr	r3, [pc, #516]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10f      	bne.n	80041a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	4b7d      	ldr	r3, [pc, #500]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	4a7c      	ldr	r2, [pc, #496]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	; 0x40
 8004192:	4b7a      	ldr	r3, [pc, #488]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419a:	60bb      	str	r3, [r7, #8]
 800419c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800419e:	2301      	movs	r3, #1
 80041a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a2:	4b77      	ldr	r3, [pc, #476]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d118      	bne.n	80041e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ae:	4b74      	ldr	r3, [pc, #464]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a73      	ldr	r2, [pc, #460]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041ba:	f7fe ff7b 	bl	80030b4 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7fe ff77 	bl	80030b4 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e10c      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d4:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <HAL_RCC_OscConfig+0x474>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0f0      	beq.n	80041c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d106      	bne.n	80041f6 <HAL_RCC_OscConfig+0x2ea>
 80041e8:	4b64      	ldr	r3, [pc, #400]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	4a63      	ldr	r2, [pc, #396]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6713      	str	r3, [r2, #112]	; 0x70
 80041f4:	e01c      	b.n	8004230 <HAL_RCC_OscConfig+0x324>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b05      	cmp	r3, #5
 80041fc:	d10c      	bne.n	8004218 <HAL_RCC_OscConfig+0x30c>
 80041fe:	4b5f      	ldr	r3, [pc, #380]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	4a5e      	ldr	r2, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004204:	f043 0304 	orr.w	r3, r3, #4
 8004208:	6713      	str	r3, [r2, #112]	; 0x70
 800420a:	4b5c      	ldr	r3, [pc, #368]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a5b      	ldr	r2, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004210:	f043 0301 	orr.w	r3, r3, #1
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	e00b      	b.n	8004230 <HAL_RCC_OscConfig+0x324>
 8004218:	4b58      	ldr	r3, [pc, #352]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800421a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421c:	4a57      	ldr	r2, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	6713      	str	r3, [r2, #112]	; 0x70
 8004224:	4b55      	ldr	r3, [pc, #340]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a54      	ldr	r2, [pc, #336]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800422a:	f023 0304 	bic.w	r3, r3, #4
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004238:	f7fe ff3c 	bl	80030b4 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800423e:	e00a      	b.n	8004256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004240:	f7fe ff38 	bl	80030b4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e0cb      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004256:	4b49      	ldr	r3, [pc, #292]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0ee      	beq.n	8004240 <HAL_RCC_OscConfig+0x334>
 8004262:	e014      	b.n	800428e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004264:	f7fe ff26 	bl	80030b4 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe ff22 	bl	80030b4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e0b5      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004282:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1ee      	bne.n	800426c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d105      	bne.n	80042a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004294:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	4a38      	ldr	r2, [pc, #224]	; (800437c <HAL_RCC_OscConfig+0x470>)
 800429a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80a1 	beq.w	80043ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042aa:	4b34      	ldr	r3, [pc, #208]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d05c      	beq.n	8004370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d141      	bne.n	8004342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042be:	4b31      	ldr	r3, [pc, #196]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c4:	f7fe fef6 	bl	80030b4 <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042cc:	f7fe fef2 	bl	80030b4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e087      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042de:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_OscConfig+0x470>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f0      	bne.n	80042cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	431a      	orrs	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	085b      	lsrs	r3, r3, #1
 8004302:	3b01      	subs	r3, #1
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe fecb 	bl	80030b4 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004322:	f7fe fec7 	bl	80030b4 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e05c      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x416>
 8004340:	e054      	b.n	80043ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0x478>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe feb4 	bl	80030b4 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe feb0 	bl	80030b4 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e045      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x470>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x444>
 800436e:	e03d      	b.n	80043ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e038      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	40007000 	.word	0x40007000
 8004384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x4ec>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d028      	beq.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d121      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d11a      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043b8:	4013      	ands	r3, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d111      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	3b01      	subs	r3, #1
 80043d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d107      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	40023800 	.word	0x40023800

080043fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0cc      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004410:	4b68      	ldr	r3, [pc, #416]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d90c      	bls.n	8004438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004426:	4b63      	ldr	r3, [pc, #396]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	429a      	cmp	r2, r3
 8004432:	d001      	beq.n	8004438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0b8      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d020      	beq.n	8004486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004450:	4b59      	ldr	r3, [pc, #356]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800445a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004468:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a52      	ldr	r2, [pc, #328]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004474:	4b50      	ldr	r3, [pc, #320]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	494d      	ldr	r1, [pc, #308]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d044      	beq.n	800451c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d119      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e07f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	4b3f      	ldr	r3, [pc, #252]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ca:	4b3b      	ldr	r3, [pc, #236]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e067      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044da:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0203 	bic.w	r2, r3, #3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4934      	ldr	r1, [pc, #208]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ec:	f7fe fde2 	bl	80030b4 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044f2:	e00a      	b.n	800450a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f4:	f7fe fdde 	bl	80030b4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e04f      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800450a:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f003 020c 	and.w	r2, r3, #12
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	429a      	cmp	r2, r3
 800451a:	d1eb      	bne.n	80044f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800451c:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d20c      	bcs.n	8004544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452a:	4b22      	ldr	r3, [pc, #136]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	429a      	cmp	r2, r3
 800453e:	d001      	beq.n	8004544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e032      	b.n	80045aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004550:	4b19      	ldr	r3, [pc, #100]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4916      	ldr	r1, [pc, #88]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	2b00      	cmp	r3, #0
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800456e:	4b12      	ldr	r3, [pc, #72]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	490e      	ldr	r1, [pc, #56]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004582:	f000 f821 	bl	80045c8 <HAL_RCC_GetSysClockFreq>
 8004586:	4602      	mov	r2, r0
 8004588:	4b0b      	ldr	r3, [pc, #44]	; (80045b8 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	490a      	ldr	r1, [pc, #40]	; (80045bc <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	5ccb      	ldrb	r3, [r1, r3]
 8004596:	fa22 f303 	lsr.w	r3, r2, r3
 800459a:	4a09      	ldr	r2, [pc, #36]	; (80045c0 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_RCC_ClockConfig+0x1c8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe fd42 	bl	800302c <HAL_InitTick>

  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023c00 	.word	0x40023c00
 80045b8:	40023800 	.word	0x40023800
 80045bc:	0800c818 	.word	0x0800c818
 80045c0:	20000008 	.word	0x20000008
 80045c4:	2000000c 	.word	0x2000000c

080045c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	b094      	sub	sp, #80	; 0x50
 80045ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	647b      	str	r3, [r7, #68]	; 0x44
 80045d4:	2300      	movs	r3, #0
 80045d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d8:	2300      	movs	r3, #0
 80045da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045e0:	4b79      	ldr	r3, [pc, #484]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 030c 	and.w	r3, r3, #12
 80045e8:	2b08      	cmp	r3, #8
 80045ea:	d00d      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x40>
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	f200 80e1 	bhi.w	80047b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x34>
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d003      	beq.n	8004602 <HAL_RCC_GetSysClockFreq+0x3a>
 80045fa:	e0db      	b.n	80047b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b73      	ldr	r3, [pc, #460]	; (80047cc <HAL_RCC_GetSysClockFreq+0x204>)
 80045fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004600:	e0db      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004606:	e0d8      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004612:	4b6d      	ldr	r3, [pc, #436]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d063      	beq.n	80046e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	099b      	lsrs	r3, r3, #6
 8004624:	2200      	movs	r2, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
 8004628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004630:	633b      	str	r3, [r7, #48]	; 0x30
 8004632:	2300      	movs	r3, #0
 8004634:	637b      	str	r3, [r7, #52]	; 0x34
 8004636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800463a:	4622      	mov	r2, r4
 800463c:	462b      	mov	r3, r5
 800463e:	f04f 0000 	mov.w	r0, #0
 8004642:	f04f 0100 	mov.w	r1, #0
 8004646:	0159      	lsls	r1, r3, #5
 8004648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800464c:	0150      	lsls	r0, r2, #5
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4621      	mov	r1, r4
 8004654:	1a51      	subs	r1, r2, r1
 8004656:	6139      	str	r1, [r7, #16]
 8004658:	4629      	mov	r1, r5
 800465a:	eb63 0301 	sbc.w	r3, r3, r1
 800465e:	617b      	str	r3, [r7, #20]
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	f04f 0300 	mov.w	r3, #0
 8004668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800466c:	4659      	mov	r1, fp
 800466e:	018b      	lsls	r3, r1, #6
 8004670:	4651      	mov	r1, sl
 8004672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004676:	4651      	mov	r1, sl
 8004678:	018a      	lsls	r2, r1, #6
 800467a:	4651      	mov	r1, sl
 800467c:	ebb2 0801 	subs.w	r8, r2, r1
 8004680:	4659      	mov	r1, fp
 8004682:	eb63 0901 	sbc.w	r9, r3, r1
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469a:	4690      	mov	r8, r2
 800469c:	4699      	mov	r9, r3
 800469e:	4623      	mov	r3, r4
 80046a0:	eb18 0303 	adds.w	r3, r8, r3
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	462b      	mov	r3, r5
 80046a8:	eb49 0303 	adc.w	r3, r9, r3
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046ba:	4629      	mov	r1, r5
 80046bc:	024b      	lsls	r3, r1, #9
 80046be:	4621      	mov	r1, r4
 80046c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046c4:	4621      	mov	r1, r4
 80046c6:	024a      	lsls	r2, r1, #9
 80046c8:	4610      	mov	r0, r2
 80046ca:	4619      	mov	r1, r3
 80046cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ce:	2200      	movs	r2, #0
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046d8:	f7fc fae6 	bl	8000ca8 <__aeabi_uldivmod>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4613      	mov	r3, r2
 80046e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e4:	e058      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e6:	4b38      	ldr	r3, [pc, #224]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	099b      	lsrs	r3, r3, #6
 80046ec:	2200      	movs	r2, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	4611      	mov	r1, r2
 80046f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	2300      	movs	r3, #0
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	f04f 0000 	mov.w	r0, #0
 8004708:	f04f 0100 	mov.w	r1, #0
 800470c:	0159      	lsls	r1, r3, #5
 800470e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004712:	0150      	lsls	r0, r2, #5
 8004714:	4602      	mov	r2, r0
 8004716:	460b      	mov	r3, r1
 8004718:	4641      	mov	r1, r8
 800471a:	ebb2 0a01 	subs.w	sl, r2, r1
 800471e:	4649      	mov	r1, r9
 8004720:	eb63 0b01 	sbc.w	fp, r3, r1
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004738:	ebb2 040a 	subs.w	r4, r2, sl
 800473c:	eb63 050b 	sbc.w	r5, r3, fp
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	00eb      	lsls	r3, r5, #3
 800474a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474e:	00e2      	lsls	r2, r4, #3
 8004750:	4614      	mov	r4, r2
 8004752:	461d      	mov	r5, r3
 8004754:	4643      	mov	r3, r8
 8004756:	18e3      	adds	r3, r4, r3
 8004758:	603b      	str	r3, [r7, #0]
 800475a:	464b      	mov	r3, r9
 800475c:	eb45 0303 	adc.w	r3, r5, r3
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	f04f 0200 	mov.w	r2, #0
 8004766:	f04f 0300 	mov.w	r3, #0
 800476a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476e:	4629      	mov	r1, r5
 8004770:	028b      	lsls	r3, r1, #10
 8004772:	4621      	mov	r1, r4
 8004774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004778:	4621      	mov	r1, r4
 800477a:	028a      	lsls	r2, r1, #10
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004782:	2200      	movs	r2, #0
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	61fa      	str	r2, [r7, #28]
 8004788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478c:	f7fc fa8c 	bl	8000ca8 <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	0c1b      	lsrs	r3, r3, #16
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	3301      	adds	r3, #1
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b2:	e002      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RCC_GetSysClockFreq+0x204>)
 80047b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3750      	adds	r7, #80	; 0x50
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	007a1200 	.word	0x007a1200

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	20000008 	.word	0x20000008

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff0 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a9b      	lsrs	r3, r3, #10
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	0800c828 	.word	0x0800c828

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffdc 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0b5b      	lsrs	r3, r3, #13
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	0800c828 	.word	0x0800c828

0800483c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e041      	b.n	80048d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d106      	bne.n	8004868 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fe f81a 	bl	800289c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	4619      	mov	r1, r3
 800487a:	4610      	mov	r0, r2
 800487c:	f000 fa96 	bl	8004dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d001      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e04e      	b.n	8004992 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a23      	ldr	r2, [pc, #140]	; (80049a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491e:	d01d      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <HAL_TIM_Base_Start_IT+0xd0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a19      	ldr	r2, [pc, #100]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x80>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d010      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	e007      	b.n	8004990 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40014000 	.word	0x40014000
 80049b8:	40001800 	.word	0x40001800

080049bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0202 	mvn.w	r2, #2
 80049e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9b5 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9a7 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f9b8 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b04      	cmp	r3, #4
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0204 	mvn.w	r2, #4
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f98b 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f97d 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f98e 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0208 	mvn.w	r2, #8
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2204      	movs	r2, #4
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f961 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f953 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f964 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0310 	and.w	r3, r3, #16
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b10      	cmp	r3, #16
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0210 	mvn.w	r2, #16
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f937 	bl	8004d6e <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f929 	bl	8004d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f93a 	bl	8004d82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d10e      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0201 	mvn.w	r2, #1
 8004b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fc fbae 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d10e      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b58:	2b80      	cmp	r3, #128	; 0x80
 8004b5a:	d107      	bne.n	8004b6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fae0 	bl	800512c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d10e      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b84:	2b40      	cmp	r3, #64	; 0x40
 8004b86:	d107      	bne.n	8004b98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8ff 	bl	8004d96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	d10e      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b20      	cmp	r3, #32
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0220 	mvn.w	r2, #32
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 faaa 	bl	8005118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	3708      	adds	r7, #8
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d101      	bne.n	8004be8 <HAL_TIM_ConfigClockSource+0x1c>
 8004be4:	2302      	movs	r3, #2
 8004be6:	e0b4      	b.n	8004d52 <HAL_TIM_ConfigClockSource+0x186>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c20:	d03e      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c26:	f200 8087 	bhi.w	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	f000 8086 	beq.w	8004d3e <HAL_TIM_ConfigClockSource+0x172>
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c36:	d87f      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b70      	cmp	r3, #112	; 0x70
 8004c3a:	d01a      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xa6>
 8004c3c:	2b70      	cmp	r3, #112	; 0x70
 8004c3e:	d87b      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b60      	cmp	r3, #96	; 0x60
 8004c42:	d050      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c44:	2b60      	cmp	r3, #96	; 0x60
 8004c46:	d877      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b50      	cmp	r3, #80	; 0x50
 8004c4a:	d03c      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c4c:	2b50      	cmp	r3, #80	; 0x50
 8004c4e:	d873      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b40      	cmp	r3, #64	; 0x40
 8004c52:	d058      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x13a>
 8004c54:	2b40      	cmp	r3, #64	; 0x40
 8004c56:	d86f      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b30      	cmp	r3, #48	; 0x30
 8004c5a:	d064      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	2b30      	cmp	r3, #48	; 0x30
 8004c5e:	d86b      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d060      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d867      	bhi.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d05c      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d05a      	beq.n	8004d26 <HAL_TIM_ConfigClockSource+0x15a>
 8004c70:	e062      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6899      	ldr	r1, [r3, #8]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	f000 f9ad 	bl	8004fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	609a      	str	r2, [r3, #8]
      break;
 8004c9e:	e04f      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6899      	ldr	r1, [r3, #8]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f000 f996 	bl	8004fe0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cc2:	609a      	str	r2, [r3, #8]
      break;
 8004cc4:	e03c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 f90a 	bl	8004eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2150      	movs	r1, #80	; 0x50
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f963 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e02c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 f929 	bl	8004f4a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2160      	movs	r1, #96	; 0x60
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 f953 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004d04:	e01c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6859      	ldr	r1, [r3, #4]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	461a      	mov	r2, r3
 8004d14:	f000 f8ea 	bl	8004eec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2140      	movs	r1, #64	; 0x40
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f943 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004d24:	e00c      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4610      	mov	r0, r2
 8004d32:	f000 f93a 	bl	8004faa <TIM_ITRx_SetConfig>
      break;
 8004d36:	e003      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d62:	bf00      	nop
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a40      	ldr	r2, [pc, #256]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d00f      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a3c      	ldr	r2, [pc, #240]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d007      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <TIM_Base_SetConfig+0x40>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a3a      	ldr	r2, [pc, #232]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d108      	bne.n	8004dfe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a2f      	ldr	r2, [pc, #188]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e0c:	d027      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a2c      	ldr	r2, [pc, #176]	; (8004ec4 <TIM_Base_SetConfig+0x118>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d023      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a2b      	ldr	r2, [pc, #172]	; (8004ec8 <TIM_Base_SetConfig+0x11c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a2a      	ldr	r2, [pc, #168]	; (8004ecc <TIM_Base_SetConfig+0x120>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d01b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d017      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a28      	ldr	r2, [pc, #160]	; (8004ed4 <TIM_Base_SetConfig+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a27      	ldr	r2, [pc, #156]	; (8004ed8 <TIM_Base_SetConfig+0x12c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a26      	ldr	r2, [pc, #152]	; (8004edc <TIM_Base_SetConfig+0x130>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a25      	ldr	r2, [pc, #148]	; (8004ee0 <TIM_Base_SetConfig+0x134>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <TIM_Base_SetConfig+0x138>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a23      	ldr	r2, [pc, #140]	; (8004ee8 <TIM_Base_SetConfig+0x13c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a0a      	ldr	r2, [pc, #40]	; (8004ec0 <TIM_Base_SetConfig+0x114>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <TIM_Base_SetConfig+0xf8>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <TIM_Base_SetConfig+0x124>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d103      	bne.n	8004eac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	615a      	str	r2, [r3, #20]
}
 8004eb2:	bf00      	nop
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40010000 	.word	0x40010000
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800
 8004ecc:	40000c00 	.word	0x40000c00
 8004ed0:	40010400 	.word	0x40010400
 8004ed4:	40014000 	.word	0x40014000
 8004ed8:	40014400 	.word	0x40014400
 8004edc:	40014800 	.word	0x40014800
 8004ee0:	40001800 	.word	0x40001800
 8004ee4:	40001c00 	.word	0x40001c00
 8004ee8:	40002000 	.word	0x40002000

08004eec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	f023 0201 	bic.w	r2, r3, #1
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 030a 	bic.w	r3, r3, #10
 8004f28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b087      	sub	sp, #28
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	f023 0210 	bic.w	r2, r3, #16
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	621a      	str	r2, [r3, #32]
}
 8004f9e:	bf00      	nop
 8004fa0:	371c      	adds	r7, #28
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b085      	sub	sp, #20
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f043 0307 	orr.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	431a      	orrs	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005034:	2302      	movs	r3, #2
 8005036:	e05a      	b.n	80050ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a21      	ldr	r2, [pc, #132]	; (80050fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d022      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005084:	d01d      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d018      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1b      	ldr	r2, [pc, #108]	; (8005104 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d013      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a1a      	ldr	r2, [pc, #104]	; (8005108 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00e      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	; (800510c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a17      	ldr	r2, [pc, #92]	; (8005110 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d004      	beq.n	80050c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d10c      	bne.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40010000 	.word	0x40010000
 8005100:	40000400 	.word	0x40000400
 8005104:	40000800 	.word	0x40000800
 8005108:	40000c00 	.word	0x40000c00
 800510c:	40010400 	.word	0x40010400
 8005110:	40014000 	.word	0x40014000
 8005114:	40001800 	.word	0x40001800

08005118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e04a      	b.n	80051e8 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d111      	bne.n	8005182 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fc92 	bl	8005a90 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <HAL_UART_Init+0xb0>)
 8005178:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2224      	movs	r2, #36	; 0x24
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005198:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f001 f8dc 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695a      	ldr	r2, [r3, #20]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	080029e5 	.word	0x080029e5

080051f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b20      	cmp	r3, #32
 8005212:	d17c      	bne.n	800530e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d002      	beq.n	8005220 <HAL_UART_Transmit+0x2c>
 800521a:	88fb      	ldrh	r3, [r7, #6]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e075      	b.n	8005310 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800522a:	2b01      	cmp	r3, #1
 800522c:	d101      	bne.n	8005232 <HAL_UART_Transmit+0x3e>
 800522e:	2302      	movs	r3, #2
 8005230:	e06e      	b.n	8005310 <HAL_UART_Transmit+0x11c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2221      	movs	r2, #33	; 0x21
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005248:	f7fd ff34 	bl	80030b4 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005262:	d108      	bne.n	8005276 <HAL_UART_Transmit+0x82>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	e003      	b.n	800527e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527a:	2300      	movs	r3, #0
 800527c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005286:	e02a      	b.n	80052de <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	2200      	movs	r2, #0
 8005290:	2180      	movs	r1, #128	; 0x80
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fd8e 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e036      	b.n	8005310 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	3302      	adds	r3, #2
 80052bc:	61bb      	str	r3, [r7, #24]
 80052be:	e007      	b.n	80052d0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	781a      	ldrb	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3301      	adds	r3, #1
 80052ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1cf      	bne.n	8005288 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2200      	movs	r2, #0
 80052f0:	2140      	movs	r1, #64	; 0x40
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 fd5e 	bl	8005db4 <UART_WaitOnFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e006      	b.n	8005310 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3720      	adds	r7, #32
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b08c      	sub	sp, #48	; 0x30
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b20      	cmp	r3, #32
 8005330:	d165      	bne.n	80053fe <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <HAL_UART_Transmit_DMA+0x26>
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e05e      	b.n	8005400 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005348:	2b01      	cmp	r3, #1
 800534a:	d101      	bne.n	8005350 <HAL_UART_Transmit_DMA+0x38>
 800534c:	2302      	movs	r3, #2
 800534e:	e057      	b.n	8005400 <HAL_UART_Transmit_DMA+0xe8>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	88fa      	ldrh	r2, [r7, #6]
 8005362:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2221      	movs	r2, #33	; 0x21
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	4a22      	ldr	r2, [pc, #136]	; (8005408 <HAL_UART_Transmit_DMA+0xf0>)
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005384:	4a21      	ldr	r2, [pc, #132]	; (800540c <HAL_UART_Transmit_DMA+0xf4>)
 8005386:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538c:	4a20      	ldr	r2, [pc, #128]	; (8005410 <HAL_UART_Transmit_DMA+0xf8>)
 800538e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005394:	2200      	movs	r2, #0
 8005396:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	6819      	ldr	r1, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3304      	adds	r3, #4
 80053ac:	461a      	mov	r2, r3
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f7fe f870 	bl	8003494 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053bc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3314      	adds	r3, #20
 80053cc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	617b      	str	r3, [r7, #20]
   return(result);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3314      	adds	r3, #20
 80053e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e6:	627a      	str	r2, [r7, #36]	; 0x24
 80053e8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6a39      	ldr	r1, [r7, #32]
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3730      	adds	r7, #48	; 0x30
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	08005b01 	.word	0x08005b01
 800540c:	08005b9d 	.word	0x08005b9d
 8005410:	08005d1f 	.word	0x08005d1f

08005414 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	4613      	mov	r3, r2
 8005420:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b20      	cmp	r3, #32
 800542c:	d152      	bne.n	80054d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d002      	beq.n	800543a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e04b      	b.n	80054d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d101      	bne.n	800544c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8005448:	2302      	movs	r3, #2
 800544a:	e044      	b.n	80054d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2201      	movs	r2, #1
 8005458:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	461a      	mov	r2, r3
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 fd15 	bl	8005e90 <UART_Start_Receive_DMA>
 8005466:	4603      	mov	r3, r0
 8005468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800546c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005470:	2b00      	cmp	r3, #0
 8005472:	d12c      	bne.n	80054ce <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	2b01      	cmp	r3, #1
 800547a:	d125      	bne.n	80054c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	330c      	adds	r3, #12
 8005498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	617b      	str	r3, [r7, #20]
   return(result);
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f043 0310 	orr.w	r3, r3, #16
 80054a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	330c      	adds	r3, #12
 80054b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b2:	627a      	str	r2, [r7, #36]	; 0x24
 80054b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b6:	6a39      	ldr	r1, [r7, #32]
 80054b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ba:	e841 2300 	strex	r3, r2, [r1]
 80054be:	61fb      	str	r3, [r7, #28]
   return(result);
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1e5      	bne.n	8005492 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80054c6:	e002      	b.n	80054ce <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80054ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d2:	e000      	b.n	80054d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
  }
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3730      	adds	r7, #48	; 0x30
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b0ba      	sub	sp, #232	; 0xe8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005506:	2300      	movs	r3, #0
 8005508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800550c:	2300      	movs	r3, #0
 800550e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800551e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10f      	bne.n	8005546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552a:	f003 0320 	and.w	r3, r3, #32
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_UART_IRQHandler+0x66>
 8005532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fe4d 	bl	80061de <UART_Receive_IT>
      return;
 8005544:	e25b      	b.n	80059fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80e1 	beq.w	8005712 <HAL_UART_IRQHandler+0x232>
 8005550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d106      	bne.n	800556a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800555c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 80d4 	beq.w	8005712 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_UART_IRQHandler+0xae>
 8005576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800557a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f043 0201 	orr.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_UART_IRQHandler+0xd2>
 800559a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0202 	orr.w	r2, r3, #2
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xf6>
 80055be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d011      	beq.n	8005606 <HAL_UART_IRQHandler+0x126>
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d105      	bne.n	80055fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d005      	beq.n	8005606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f043 0208 	orr.w	r2, r3, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 81f2 	beq.w	80059f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_UART_IRQHandler+0x14e>
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d002      	beq.n	800562e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fdd8 	bl	80061de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005638:	2b40      	cmp	r3, #64	; 0x40
 800563a:	bf0c      	ite	eq
 800563c:	2301      	moveq	r3, #1
 800563e:	2300      	movne	r3, #0
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d103      	bne.n	800565a <HAL_UART_IRQHandler+0x17a>
 8005652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005656:	2b00      	cmp	r3, #0
 8005658:	d051      	beq.n	80056fe <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fcde 	bl	800601c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b40      	cmp	r3, #64	; 0x40
 800566c:	d142      	bne.n	80056f4 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3314      	adds	r3, #20
 8005674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800569a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800569e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1d9      	bne.n	800566e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d013      	beq.n	80056ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4a7f      	ldr	r2, [pc, #508]	; (80058c4 <HAL_UART_IRQHandler+0x3e4>)
 80056c8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd ffa8 	bl	8003624 <HAL_DMA_Abort_IT>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d019      	beq.n	800570e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056e4:	4610      	mov	r0, r2
 80056e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e011      	b.n	800570e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f2:	e00c      	b.n	800570e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056fc:	e007      	b.n	800570e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800570c:	e172      	b.n	80059f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570e:	bf00      	nop
    return;
 8005710:	e170      	b.n	80059f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	2b01      	cmp	r3, #1
 8005718:	f040 814c 	bne.w	80059b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800571c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8145 	beq.w	80059b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800572a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572e:	f003 0310 	and.w	r3, r3, #16
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 813e 	beq.w	80059b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005738:	2300      	movs	r3, #0
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60bb      	str	r3, [r7, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	f040 80b5 	bne.w	80058c8 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8142 	beq.w	80059f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005778:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800577c:	429a      	cmp	r2, r3
 800577e:	f080 813b 	bcs.w	80059f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005788:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005794:	f000 8088 	beq.w	80058a8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	330c      	adds	r3, #12
 800579e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057a6:	e853 3f00 	ldrex	r3, [r3]
 80057aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057c4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1d9      	bne.n	8005798 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ee:	e853 3f00 	ldrex	r3, [r3]
 80057f2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80057f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80057f6:	f023 0301 	bic.w	r3, r3, #1
 80057fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	3314      	adds	r3, #20
 8005804:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005808:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800580c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005810:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800581a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e1      	bne.n	80057e4 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3314      	adds	r3, #20
 8005826:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800582a:	e853 3f00 	ldrex	r3, [r3]
 800582e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005836:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3314      	adds	r3, #20
 8005840:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005844:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005846:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800584a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e3      	bne.n	8005820 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	330c      	adds	r3, #12
 800586c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005878:	f023 0310 	bic.w	r3, r3, #16
 800587c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800588a:	65ba      	str	r2, [r7, #88]	; 0x58
 800588c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005890:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e3      	bne.n	8005866 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fd fe4e 	bl	8003544 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80058b4:	b292      	uxth	r2, r2
 80058b6:	1a8a      	subs	r2, r1, r2
 80058b8:	b292      	uxth	r2, r2
 80058ba:	4611      	mov	r1, r2
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c0:	e09a      	b.n	80059f8 <HAL_UART_IRQHandler+0x518>
 80058c2:	bf00      	nop
 80058c4:	080060e3 	.word	0x080060e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 808c 	beq.w	80059fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8087 	beq.w	80059fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	330c      	adds	r3, #12
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005912:	647a      	str	r2, [r7, #68]	; 0x44
 8005914:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e3      	bne.n	80058ee <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	3314      	adds	r3, #20
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	623b      	str	r3, [r7, #32]
   return(result);
 8005936:	6a3b      	ldr	r3, [r7, #32]
 8005938:	f023 0301 	bic.w	r3, r3, #1
 800593c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3314      	adds	r3, #20
 8005946:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800594a:	633a      	str	r2, [r7, #48]	; 0x30
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e3      	bne.n	8005926 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	60fb      	str	r3, [r7, #12]
   return(result);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0310 	bic.w	r3, r3, #16
 8005982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	330c      	adds	r3, #12
 800598c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	69fa      	ldr	r2, [r7, #28]
 8005998:	e841 2300 	strex	r3, r2, [r1]
 800599c:	617b      	str	r3, [r7, #20]
   return(result);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e3      	bne.n	800596c <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059a8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80059ac:	4611      	mov	r1, r2
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059b2:	e023      	b.n	80059fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_UART_IRQHandler+0x4f4>
 80059c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f000 fb9d 	bl	800610c <UART_Transmit_IT>
    return;
 80059d2:	e014      	b.n	80059fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00e      	beq.n	80059fe <HAL_UART_IRQHandler+0x51e>
 80059e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fbdd 	bl	80061ac <UART_EndTransmit_IT>
    return;
 80059f2:	e004      	b.n	80059fe <HAL_UART_IRQHandler+0x51e>
    return;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <HAL_UART_IRQHandler+0x51e>
      return;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <HAL_UART_IRQHandler+0x51e>
      return;
 80059fc:	bf00      	nop
  }
}
 80059fe:	37e8      	adds	r7, #232	; 0xe8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a10      	ldr	r2, [pc, #64]	; (8005adc <UART_InitCallbacksToDefault+0x4c>)
 8005a9c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <UART_InitCallbacksToDefault+0x50>)
 8005aa2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <UART_InitCallbacksToDefault+0x54>)
 8005aa8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a0e      	ldr	r2, [pc, #56]	; (8005ae8 <UART_InitCallbacksToDefault+0x58>)
 8005aae:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <UART_InitCallbacksToDefault+0x5c>)
 8005ab4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a0d      	ldr	r2, [pc, #52]	; (8005af0 <UART_InitCallbacksToDefault+0x60>)
 8005aba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0d      	ldr	r2, [pc, #52]	; (8005af4 <UART_InitCallbacksToDefault+0x64>)
 8005ac0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <UART_InitCallbacksToDefault+0x68>)
 8005ac6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a0c      	ldr	r2, [pc, #48]	; (8005afc <UART_InitCallbacksToDefault+0x6c>)
 8005acc:	669a      	str	r2, [r3, #104]	; 0x68

}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	08005a05 	.word	0x08005a05
 8005ae0:	080012d5 	.word	0x080012d5
 8005ae4:	08005a2d 	.word	0x08005a2d
 8005ae8:	08005a19 	.word	0x08005a19
 8005aec:	08005a41 	.word	0x08005a41
 8005af0:	08005a55 	.word	0x08005a55
 8005af4:	08005a69 	.word	0x08005a69
 8005af8:	08005a7d 	.word	0x08005a7d
 8005afc:	080025c9 	.word	0x080025c9

08005b00 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b090      	sub	sp, #64	; 0x40
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d137      	bne.n	8005b8c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1e:	2200      	movs	r2, #0
 8005b20:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	623b      	str	r3, [r7, #32]
   return(result);
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b38:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b42:	633a      	str	r2, [r7, #48]	; 0x30
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b4a:	e841 2300 	strex	r3, r2, [r1]
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1e5      	bne.n	8005b22 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b76:	61fa      	str	r2, [r7, #28]
 8005b78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	69b9      	ldr	r1, [r7, #24]
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	617b      	str	r3, [r7, #20]
   return(result);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b8a:	e003      	b.n	8005b94 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005b92:	4798      	blx	r3
}
 8005b94:	bf00      	nop
 8005b96:	3740      	adds	r7, #64	; 0x40
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b09c      	sub	sp, #112	; 0x70
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d172      	bne.n	8005cbc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd8:	2200      	movs	r2, #0
 8005bda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005bec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	330c      	adds	r3, #12
 8005bfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8005bfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e5      	bne.n	8005bdc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	f023 0301 	bic.w	r3, r3, #1
 8005c26:	667b      	str	r3, [r7, #100]	; 0x64
 8005c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3314      	adds	r3, #20
 8005c2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c30:	647a      	str	r2, [r7, #68]	; 0x44
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3314      	adds	r3, #20
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	623b      	str	r3, [r7, #32]
   return(result);
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c5a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3314      	adds	r3, #20
 8005c62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c64:	633a      	str	r2, [r7, #48]	; 0x30
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d119      	bne.n	8005cbc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	330c      	adds	r3, #12
 8005c8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	e853 3f00 	ldrex	r3, [r3]
 8005c96:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f023 0310 	bic.w	r3, r3, #16
 8005c9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ca8:	61fa      	str	r2, [r7, #28]
 8005caa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cac:	69b9      	ldr	r1, [r7, #24]
 8005cae:	69fa      	ldr	r2, [r7, #28]
 8005cb0:	e841 2300 	strex	r3, r2, [r1]
 8005cb4:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1e5      	bne.n	8005c88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d107      	bne.n	8005cd4 <UART_DMAReceiveCplt+0x11a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cca:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005ccc:	4611      	mov	r1, r2
 8005cce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cd0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005cd2:	e003      	b.n	8005cdc <UART_DMAReceiveCplt+0x122>
    huart->RxCpltCallback(huart);
 8005cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005cda:	4798      	blx	r3
}
 8005cdc:	bf00      	nop
 8005cde:	3770      	adds	r7, #112	; 0x70
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d109      	bne.n	8005d0e <UART_DMARxHalfCplt+0x2a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005d02:	0852      	lsrs	r2, r2, #1
 8005d04:	b292      	uxth	r2, r2
 8005d06:	4611      	mov	r1, r2
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005d0c:	e003      	b.n	8005d16 <UART_DMARxHalfCplt+0x32>
    huart->RxHalfCpltCallback(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	4798      	blx	r3
}
 8005d16:	bf00      	nop
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d3a:	2b80      	cmp	r3, #128	; 0x80
 8005d3c:	bf0c      	ite	eq
 8005d3e:	2301      	moveq	r3, #1
 8005d40:	2300      	movne	r3, #0
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b21      	cmp	r3, #33	; 0x21
 8005d50:	d108      	bne.n	8005d64 <UART_DMAError+0x46>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d005      	beq.n	8005d64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d5e:	68b8      	ldr	r0, [r7, #8]
 8005d60:	f000 f934 	bl	8005fcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b22      	cmp	r3, #34	; 0x22
 8005d84:	d108      	bne.n	8005d98 <UART_DMAError+0x7a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d92:	68b8      	ldr	r0, [r7, #8]
 8005d94:	f000 f942 	bl	800601c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f043 0210 	orr.w	r2, r3, #16
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da8:	68b8      	ldr	r0, [r7, #8]
 8005daa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b090      	sub	sp, #64	; 0x40
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dc4:	e050      	b.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d04c      	beq.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d007      	beq.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dd4:	f7fd f96e 	bl	80030b4 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d241      	bcs.n	8005e68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dee:	e853 3f00 	ldrex	r3, [r3]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e04:	637a      	str	r2, [r7, #52]	; 0x34
 8005e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e0c:	e841 2300 	strex	r3, r2, [r1]
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1e5      	bne.n	8005de4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3314      	adds	r3, #20
 8005e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	613b      	str	r3, [r7, #16]
   return(result);
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f023 0301 	bic.w	r3, r3, #1
 8005e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3314      	adds	r3, #20
 8005e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e38:	623a      	str	r2, [r7, #32]
 8005e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	6a3a      	ldr	r2, [r7, #32]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e5      	bne.n	8005e18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2220      	movs	r2, #32
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e00f      	b.n	8005e88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d09f      	beq.n	8005dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3740      	adds	r7, #64	; 0x40
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b098      	sub	sp, #96	; 0x60
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2222      	movs	r2, #34	; 0x22
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	4a40      	ldr	r2, [pc, #256]	; (8005fc0 <UART_Start_Receive_DMA+0x130>)
 8005ebe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec4:	4a3f      	ldr	r2, [pc, #252]	; (8005fc4 <UART_Start_Receive_DMA+0x134>)
 8005ec6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	4a3e      	ldr	r2, [pc, #248]	; (8005fc8 <UART_Start_Receive_DMA+0x138>)
 8005ece:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005ed8:	f107 0308 	add.w	r3, r7, #8
 8005edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	88fb      	ldrh	r3, [r7, #6]
 8005ef0:	f7fd fad0 	bl	8003494 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d019      	beq.n	8005f4e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	330c      	adds	r3, #12
 8005f20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3314      	adds	r3, #20
 8005f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	f043 0301 	orr.w	r3, r3, #1
 8005f64:	657b      	str	r3, [r7, #84]	; 0x54
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3314      	adds	r3, #20
 8005f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3314      	adds	r3, #20
 8005f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	617b      	str	r3, [r7, #20]
   return(result);
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f98:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3314      	adds	r3, #20
 8005fa0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fa2:	627a      	str	r2, [r7, #36]	; 0x24
 8005fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6a39      	ldr	r1, [r7, #32]
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e5      	bne.n	8005f82 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3760      	adds	r7, #96	; 0x60
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	08005bbb 	.word	0x08005bbb
 8005fc4:	08005ce5 	.word	0x08005ce5
 8005fc8:	08005d1f 	.word	0x08005d1f

08005fcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b089      	sub	sp, #36	; 0x24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	e853 3f00 	ldrex	r3, [r3]
 8005fe2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	61ba      	str	r2, [r7, #24]
 8005ff6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	613b      	str	r3, [r7, #16]
   return(result);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e5      	bne.n	8005fd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006010:	bf00      	nop
 8006012:	3724      	adds	r7, #36	; 0x24
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800601c:	b480      	push	{r7}
 800601e:	b095      	sub	sp, #84	; 0x54
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006036:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800603a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	330c      	adds	r3, #12
 8006042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006044:	643a      	str	r2, [r7, #64]	; 0x40
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800604a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e5      	bne.n	8006024 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	e853 3f00 	ldrex	r3, [r3]
 8006066:	61fb      	str	r3, [r7, #28]
   return(result);
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3314      	adds	r3, #20
 8006076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006078:	62fa      	str	r2, [r7, #44]	; 0x2c
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800607e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e5      	bne.n	8006058 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	2b01      	cmp	r3, #1
 8006092:	d119      	bne.n	80060c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	647b      	str	r3, [r7, #68]	; 0x44
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b4:	61ba      	str	r2, [r7, #24]
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6979      	ldr	r1, [r7, #20]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	613b      	str	r3, [r7, #16]
   return(result);
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e5      	bne.n	8006094 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80060d6:	bf00      	nop
 80060d8:	3754      	adds	r7, #84	; 0x54
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006104:	bf00      	nop
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611a:	b2db      	uxtb	r3, r3
 800611c:	2b21      	cmp	r3, #33	; 0x21
 800611e:	d13e      	bne.n	800619e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d114      	bne.n	8006154 <UART_Transmit_IT+0x48>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d110      	bne.n	8006154 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006146:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	1c9a      	adds	r2, r3, #2
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	621a      	str	r2, [r3, #32]
 8006152:	e008      	b.n	8006166 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	1c59      	adds	r1, r3, #1
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6211      	str	r1, [r2, #32]
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29b      	uxth	r3, r3
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	4619      	mov	r1, r3
 8006174:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10f      	bne.n	800619a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006188:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006198:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	e000      	b.n	80061a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800619e:	2302      	movs	r3, #2
  }
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b08c      	sub	sp, #48	; 0x30
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	2b22      	cmp	r3, #34	; 0x22
 80061f0:	f040 80ad 	bne.w	800634e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fc:	d117      	bne.n	800622e <UART_Receive_IT+0x50>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d113      	bne.n	800622e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b29b      	uxth	r3, r3
 8006218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800621c:	b29a      	uxth	r2, r3
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	1c9a      	adds	r2, r3, #2
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
 800622c:	e026      	b.n	800627c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006234:	2300      	movs	r3, #0
 8006236:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006240:	d007      	beq.n	8006252 <UART_Receive_IT+0x74>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <UART_Receive_IT+0x82>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d106      	bne.n	8006260 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e008      	b.n	8006272 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006280:	b29b      	uxth	r3, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	b29b      	uxth	r3, r3
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	4619      	mov	r1, r3
 800628a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800628c:	2b00      	cmp	r3, #0
 800628e:	d15c      	bne.n	800634a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0220 	bic.w	r2, r2, #32
 800629e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	695a      	ldr	r2, [r3, #20]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f022 0201 	bic.w	r2, r2, #1
 80062be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d136      	bne.n	800633e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	613b      	str	r3, [r7, #16]
   return(result);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f023 0310 	bic.w	r3, r3, #16
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	623a      	str	r2, [r7, #32]
 80062f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	6a3a      	ldr	r2, [r7, #32]
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	61bb      	str	r3, [r7, #24]
   return(result);
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d10a      	bne.n	800632e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006318:	2300      	movs	r3, #0
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006332:	687a      	ldr	r2, [r7, #4]
 8006334:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006336:	4611      	mov	r1, r2
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
 800633c:	e003      	b.n	8006346 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e002      	b.n	8006350 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	4618      	mov	r0, r3
 8006352:	3730      	adds	r7, #48	; 0x30
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800635c:	b0c0      	sub	sp, #256	; 0x100
 800635e:	af00      	add	r7, sp, #0
 8006360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	ea40 0301 	orr.w	r3, r0, r1
 8006380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063b0:	f021 010c 	bic.w	r1, r1, #12
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063be:	430b      	orrs	r3, r1
 80063c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	ea40 0301 	orr.w	r3, r0, r1
 80063de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <UART_SetConfig+0x2cc>)
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d005      	beq.n	80063f8 <UART_SetConfig+0xa0>
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <UART_SetConfig+0x2d0>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d104      	bne.n	8006402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fe fa0c 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80063fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006400:	e003      	b.n	800640a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7fe f9f3 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 8006406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006414:	f040 810c 	bne.w	8006630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	1891      	adds	r1, r2, r2
 8006430:	65b9      	str	r1, [r7, #88]	; 0x58
 8006432:	415b      	adcs	r3, r3
 8006434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643a:	4621      	mov	r1, r4
 800643c:	eb12 0801 	adds.w	r8, r2, r1
 8006440:	4629      	mov	r1, r5
 8006442:	eb43 0901 	adc.w	r9, r3, r1
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645a:	4690      	mov	r8, r2
 800645c:	4699      	mov	r9, r3
 800645e:	4623      	mov	r3, r4
 8006460:	eb18 0303 	adds.w	r3, r8, r3
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006468:	462b      	mov	r3, r5
 800646a:	eb49 0303 	adc.w	r3, r9, r3
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800647e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006486:	460b      	mov	r3, r1
 8006488:	18db      	adds	r3, r3, r3
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
 800648c:	4613      	mov	r3, r2
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	657b      	str	r3, [r7, #84]	; 0x54
 8006494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800649c:	f7fa fc04 	bl	8000ca8 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4b61      	ldr	r3, [pc, #388]	; (800662c <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2302 	umull	r2, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	011c      	lsls	r4, r3, #4
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80064c8:	415b      	adcs	r3, r3
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064d0:	4641      	mov	r1, r8
 80064d2:	eb12 0a01 	adds.w	sl, r2, r1
 80064d6:	4649      	mov	r1, r9
 80064d8:	eb43 0b01 	adc.w	fp, r3, r1
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	4692      	mov	sl, r2
 80064f2:	469b      	mov	fp, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	eb1a 0303 	adds.w	r3, sl, r3
 80064fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064fe:	464b      	mov	r3, r9
 8006500:	eb4b 0303 	adc.w	r3, fp, r3
 8006504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800651c:	460b      	mov	r3, r1
 800651e:	18db      	adds	r3, r3, r3
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800652e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006532:	f7fa fbb9 	bl	8000ca8 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <UART_SetConfig+0x2d4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	; 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <UART_SetConfig+0x2d4>)
 8006554:	fba3 2302 	umull	r2, r3, r3, r2
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	441c      	add	r4, r3
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	63b9      	str	r1, [r7, #56]	; 0x38
 800657c:	415b      	adcs	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	6339      	str	r1, [r7, #48]	; 0x30
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	464b      	mov	r3, r9
 80065ba:	460a      	mov	r2, r1
 80065bc:	eb42 0303 	adc.w	r3, r2, r3
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065ee:	f7fa fb5b 	bl	8000ca8 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <UART_SetConfig+0x2d4>)
 80065f8:	fba3 1302 	umull	r1, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2164      	movs	r1, #100	; 0x64
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	3332      	adds	r3, #50	; 0x32
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <UART_SetConfig+0x2d4>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4422      	add	r2, r4
 800661e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006620:	e106      	b.n	8006830 <UART_SetConfig+0x4d8>
 8006622:	bf00      	nop
 8006624:	40011000 	.word	0x40011000
 8006628:	40011400 	.word	0x40011400
 800662c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800663a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800663e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006642:	4642      	mov	r2, r8
 8006644:	464b      	mov	r3, r9
 8006646:	1891      	adds	r1, r2, r2
 8006648:	6239      	str	r1, [r7, #32]
 800664a:	415b      	adcs	r3, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006652:	4641      	mov	r1, r8
 8006654:	1854      	adds	r4, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0501 	adc.w	r5, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	00eb      	lsls	r3, r5, #3
 8006666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666a:	00e2      	lsls	r2, r4, #3
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	4643      	mov	r3, r8
 8006672:	18e3      	adds	r3, r4, r3
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006678:	464b      	mov	r3, r9
 800667a:	eb45 0303 	adc.w	r3, r5, r3
 800667e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800668e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800669e:	4629      	mov	r1, r5
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4621      	mov	r1, r4
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4621      	mov	r1, r4
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b0:	f7fa fafa 	bl	8000ca8 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <UART_SetConfig+0x4e4>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	011c      	lsls	r4, r3, #4
 80066c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066d4:	4642      	mov	r2, r8
 80066d6:	464b      	mov	r3, r9
 80066d8:	1891      	adds	r1, r2, r2
 80066da:	61b9      	str	r1, [r7, #24]
 80066dc:	415b      	adcs	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e4:	4641      	mov	r1, r8
 80066e6:	1851      	adds	r1, r2, r1
 80066e8:	6139      	str	r1, [r7, #16]
 80066ea:	4649      	mov	r1, r9
 80066ec:	414b      	adcs	r3, r1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066fc:	4659      	mov	r1, fp
 80066fe:	00cb      	lsls	r3, r1, #3
 8006700:	4651      	mov	r1, sl
 8006702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006706:	4651      	mov	r1, sl
 8006708:	00ca      	lsls	r2, r1, #3
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	4603      	mov	r3, r0
 8006710:	4642      	mov	r2, r8
 8006712:	189b      	adds	r3, r3, r2
 8006714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006718:	464b      	mov	r3, r9
 800671a:	460a      	mov	r2, r1
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
 800672e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800673c:	4649      	mov	r1, r9
 800673e:	008b      	lsls	r3, r1, #2
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006746:	4641      	mov	r1, r8
 8006748:	008a      	lsls	r2, r1, #2
 800674a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800674e:	f7fa faab 	bl	8000ca8 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4611      	mov	r1, r2
 8006758:	4b38      	ldr	r3, [pc, #224]	; (800683c <UART_SetConfig+0x4e4>)
 800675a:	fba3 2301 	umull	r2, r3, r3, r1
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	2264      	movs	r2, #100	; 0x64
 8006762:	fb02 f303 	mul.w	r3, r2, r3
 8006766:	1acb      	subs	r3, r1, r3
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	3332      	adds	r3, #50	; 0x32
 800676c:	4a33      	ldr	r2, [pc, #204]	; (800683c <UART_SetConfig+0x4e4>)
 800676e:	fba2 2303 	umull	r2, r3, r2, r3
 8006772:	095b      	lsrs	r3, r3, #5
 8006774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006778:	441c      	add	r4, r3
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	673b      	str	r3, [r7, #112]	; 0x70
 8006782:	677a      	str	r2, [r7, #116]	; 0x74
 8006784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006788:	4642      	mov	r2, r8
 800678a:	464b      	mov	r3, r9
 800678c:	1891      	adds	r1, r2, r2
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	415b      	adcs	r3, r3
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006798:	4641      	mov	r1, r8
 800679a:	1851      	adds	r1, r2, r1
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	4649      	mov	r1, r9
 80067a0:	414b      	adcs	r3, r1
 80067a2:	607b      	str	r3, [r7, #4]
 80067a4:	f04f 0200 	mov.w	r2, #0
 80067a8:	f04f 0300 	mov.w	r3, #0
 80067ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067b0:	4659      	mov	r1, fp
 80067b2:	00cb      	lsls	r3, r1, #3
 80067b4:	4651      	mov	r1, sl
 80067b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067ba:	4651      	mov	r1, sl
 80067bc:	00ca      	lsls	r2, r1, #3
 80067be:	4610      	mov	r0, r2
 80067c0:	4619      	mov	r1, r3
 80067c2:	4603      	mov	r3, r0
 80067c4:	4642      	mov	r2, r8
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80067ca:	464b      	mov	r3, r9
 80067cc:	460a      	mov	r2, r1
 80067ce:	eb42 0303 	adc.w	r3, r2, r3
 80067d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	663b      	str	r3, [r7, #96]	; 0x60
 80067de:	667a      	str	r2, [r7, #100]	; 0x64
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067ec:	4649      	mov	r1, r9
 80067ee:	008b      	lsls	r3, r1, #2
 80067f0:	4641      	mov	r1, r8
 80067f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f6:	4641      	mov	r1, r8
 80067f8:	008a      	lsls	r2, r1, #2
 80067fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067fe:	f7fa fa53 	bl	8000ca8 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4b0d      	ldr	r3, [pc, #52]	; (800683c <UART_SetConfig+0x4e4>)
 8006808:	fba3 1302 	umull	r1, r3, r3, r2
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	fb01 f303 	mul.w	r3, r1, r3
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	011b      	lsls	r3, r3, #4
 8006818:	3332      	adds	r3, #50	; 0x32
 800681a:	4a08      	ldr	r2, [pc, #32]	; (800683c <UART_SetConfig+0x4e4>)
 800681c:	fba2 2303 	umull	r2, r3, r2, r3
 8006820:	095b      	lsrs	r3, r3, #5
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4422      	add	r2, r4
 800682e:	609a      	str	r2, [r3, #8]
}
 8006830:	bf00      	nop
 8006832:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006836:	46bd      	mov	sp, r7
 8006838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683c:	51eb851f 	.word	0x51eb851f

08006840 <__cvt>:
 8006840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006844:	ec55 4b10 	vmov	r4, r5, d0
 8006848:	2d00      	cmp	r5, #0
 800684a:	460e      	mov	r6, r1
 800684c:	4619      	mov	r1, r3
 800684e:	462b      	mov	r3, r5
 8006850:	bfbb      	ittet	lt
 8006852:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006856:	461d      	movlt	r5, r3
 8006858:	2300      	movge	r3, #0
 800685a:	232d      	movlt	r3, #45	; 0x2d
 800685c:	700b      	strb	r3, [r1, #0]
 800685e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006860:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006864:	4691      	mov	r9, r2
 8006866:	f023 0820 	bic.w	r8, r3, #32
 800686a:	bfbc      	itt	lt
 800686c:	4622      	movlt	r2, r4
 800686e:	4614      	movlt	r4, r2
 8006870:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006874:	d005      	beq.n	8006882 <__cvt+0x42>
 8006876:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800687a:	d100      	bne.n	800687e <__cvt+0x3e>
 800687c:	3601      	adds	r6, #1
 800687e:	2102      	movs	r1, #2
 8006880:	e000      	b.n	8006884 <__cvt+0x44>
 8006882:	2103      	movs	r1, #3
 8006884:	ab03      	add	r3, sp, #12
 8006886:	9301      	str	r3, [sp, #4]
 8006888:	ab02      	add	r3, sp, #8
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	ec45 4b10 	vmov	d0, r4, r5
 8006890:	4653      	mov	r3, sl
 8006892:	4632      	mov	r2, r6
 8006894:	f001 ff5c 	bl	8008750 <_dtoa_r>
 8006898:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800689c:	4607      	mov	r7, r0
 800689e:	d102      	bne.n	80068a6 <__cvt+0x66>
 80068a0:	f019 0f01 	tst.w	r9, #1
 80068a4:	d022      	beq.n	80068ec <__cvt+0xac>
 80068a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068aa:	eb07 0906 	add.w	r9, r7, r6
 80068ae:	d110      	bne.n	80068d2 <__cvt+0x92>
 80068b0:	783b      	ldrb	r3, [r7, #0]
 80068b2:	2b30      	cmp	r3, #48	; 0x30
 80068b4:	d10a      	bne.n	80068cc <__cvt+0x8c>
 80068b6:	2200      	movs	r2, #0
 80068b8:	2300      	movs	r3, #0
 80068ba:	4620      	mov	r0, r4
 80068bc:	4629      	mov	r1, r5
 80068be:	f7fa f913 	bl	8000ae8 <__aeabi_dcmpeq>
 80068c2:	b918      	cbnz	r0, 80068cc <__cvt+0x8c>
 80068c4:	f1c6 0601 	rsb	r6, r6, #1
 80068c8:	f8ca 6000 	str.w	r6, [sl]
 80068cc:	f8da 3000 	ldr.w	r3, [sl]
 80068d0:	4499      	add	r9, r3
 80068d2:	2200      	movs	r2, #0
 80068d4:	2300      	movs	r3, #0
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	f7fa f905 	bl	8000ae8 <__aeabi_dcmpeq>
 80068de:	b108      	cbz	r0, 80068e4 <__cvt+0xa4>
 80068e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80068e4:	2230      	movs	r2, #48	; 0x30
 80068e6:	9b03      	ldr	r3, [sp, #12]
 80068e8:	454b      	cmp	r3, r9
 80068ea:	d307      	bcc.n	80068fc <__cvt+0xbc>
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068f0:	1bdb      	subs	r3, r3, r7
 80068f2:	4638      	mov	r0, r7
 80068f4:	6013      	str	r3, [r2, #0]
 80068f6:	b004      	add	sp, #16
 80068f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	9103      	str	r1, [sp, #12]
 8006900:	701a      	strb	r2, [r3, #0]
 8006902:	e7f0      	b.n	80068e6 <__cvt+0xa6>

08006904 <__exponent>:
 8006904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006906:	4603      	mov	r3, r0
 8006908:	2900      	cmp	r1, #0
 800690a:	bfb8      	it	lt
 800690c:	4249      	neglt	r1, r1
 800690e:	f803 2b02 	strb.w	r2, [r3], #2
 8006912:	bfb4      	ite	lt
 8006914:	222d      	movlt	r2, #45	; 0x2d
 8006916:	222b      	movge	r2, #43	; 0x2b
 8006918:	2909      	cmp	r1, #9
 800691a:	7042      	strb	r2, [r0, #1]
 800691c:	dd2a      	ble.n	8006974 <__exponent+0x70>
 800691e:	f10d 0207 	add.w	r2, sp, #7
 8006922:	4617      	mov	r7, r2
 8006924:	260a      	movs	r6, #10
 8006926:	4694      	mov	ip, r2
 8006928:	fb91 f5f6 	sdiv	r5, r1, r6
 800692c:	fb06 1415 	mls	r4, r6, r5, r1
 8006930:	3430      	adds	r4, #48	; 0x30
 8006932:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006936:	460c      	mov	r4, r1
 8006938:	2c63      	cmp	r4, #99	; 0x63
 800693a:	f102 32ff 	add.w	r2, r2, #4294967295
 800693e:	4629      	mov	r1, r5
 8006940:	dcf1      	bgt.n	8006926 <__exponent+0x22>
 8006942:	3130      	adds	r1, #48	; 0x30
 8006944:	f1ac 0402 	sub.w	r4, ip, #2
 8006948:	f802 1c01 	strb.w	r1, [r2, #-1]
 800694c:	1c41      	adds	r1, r0, #1
 800694e:	4622      	mov	r2, r4
 8006950:	42ba      	cmp	r2, r7
 8006952:	d30a      	bcc.n	800696a <__exponent+0x66>
 8006954:	f10d 0209 	add.w	r2, sp, #9
 8006958:	eba2 020c 	sub.w	r2, r2, ip
 800695c:	42bc      	cmp	r4, r7
 800695e:	bf88      	it	hi
 8006960:	2200      	movhi	r2, #0
 8006962:	4413      	add	r3, r2
 8006964:	1a18      	subs	r0, r3, r0
 8006966:	b003      	add	sp, #12
 8006968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800696e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006972:	e7ed      	b.n	8006950 <__exponent+0x4c>
 8006974:	2330      	movs	r3, #48	; 0x30
 8006976:	3130      	adds	r1, #48	; 0x30
 8006978:	7083      	strb	r3, [r0, #2]
 800697a:	70c1      	strb	r1, [r0, #3]
 800697c:	1d03      	adds	r3, r0, #4
 800697e:	e7f1      	b.n	8006964 <__exponent+0x60>

08006980 <_printf_float>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b02 	vpush	{d8}
 8006988:	b08d      	sub	sp, #52	; 0x34
 800698a:	460c      	mov	r4, r1
 800698c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006990:	4616      	mov	r6, r2
 8006992:	461f      	mov	r7, r3
 8006994:	4605      	mov	r5, r0
 8006996:	f001 fdab 	bl	80084f0 <_localeconv_r>
 800699a:	f8d0 a000 	ldr.w	sl, [r0]
 800699e:	4650      	mov	r0, sl
 80069a0:	f7f9 fc76 	bl	8000290 <strlen>
 80069a4:	2300      	movs	r3, #0
 80069a6:	930a      	str	r3, [sp, #40]	; 0x28
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069b4:	3307      	adds	r3, #7
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	f103 0208 	add.w	r2, r3, #8
 80069be:	f8c8 2000 	str.w	r2, [r8]
 80069c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80069d0:	ee08 0a10 	vmov	s16, r0
 80069d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80069d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069dc:	4b9e      	ldr	r3, [pc, #632]	; (8006c58 <_printf_float+0x2d8>)
 80069de:	f04f 32ff 	mov.w	r2, #4294967295
 80069e2:	f7fa f8b3 	bl	8000b4c <__aeabi_dcmpun>
 80069e6:	bb88      	cbnz	r0, 8006a4c <_printf_float+0xcc>
 80069e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <_printf_float+0x2d8>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295
 80069f2:	f7fa f88d 	bl	8000b10 <__aeabi_dcmple>
 80069f6:	bb48      	cbnz	r0, 8006a4c <_printf_float+0xcc>
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7fa f87c 	bl	8000afc <__aeabi_dcmplt>
 8006a04:	b110      	cbz	r0, 8006a0c <_printf_float+0x8c>
 8006a06:	232d      	movs	r3, #45	; 0x2d
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	4a93      	ldr	r2, [pc, #588]	; (8006c5c <_printf_float+0x2dc>)
 8006a0e:	4b94      	ldr	r3, [pc, #592]	; (8006c60 <_printf_float+0x2e0>)
 8006a10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a14:	bf94      	ite	ls
 8006a16:	4690      	movls	r8, r2
 8006a18:	4698      	movhi	r8, r3
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	f04f 0900 	mov.w	r9, #0
 8006a2a:	9700      	str	r7, [sp, #0]
 8006a2c:	4633      	mov	r3, r6
 8006a2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f9da 	bl	8006dec <_printf_common>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f040 8090 	bne.w	8006b5e <_printf_float+0x1de>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	b00d      	add	sp, #52	; 0x34
 8006a44:	ecbd 8b02 	vpop	{d8}
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7fa f87a 	bl	8000b4c <__aeabi_dcmpun>
 8006a58:	b140      	cbz	r0, 8006a6c <_printf_float+0xec>
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfbc      	itt	lt
 8006a60:	232d      	movlt	r3, #45	; 0x2d
 8006a62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a66:	4a7f      	ldr	r2, [pc, #508]	; (8006c64 <_printf_float+0x2e4>)
 8006a68:	4b7f      	ldr	r3, [pc, #508]	; (8006c68 <_printf_float+0x2e8>)
 8006a6a:	e7d1      	b.n	8006a10 <_printf_float+0x90>
 8006a6c:	6863      	ldr	r3, [r4, #4]
 8006a6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a72:	9206      	str	r2, [sp, #24]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	d13f      	bne.n	8006af8 <_printf_float+0x178>
 8006a78:	2306      	movs	r3, #6
 8006a7a:	6063      	str	r3, [r4, #4]
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	6861      	ldr	r1, [r4, #4]
 8006a80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a84:	2300      	movs	r3, #0
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	ab0a      	add	r3, sp, #40	; 0x28
 8006a8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a8e:	ab09      	add	r3, sp, #36	; 0x24
 8006a90:	ec49 8b10 	vmov	d0, r8, r9
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f7ff fecf 	bl	8006840 <__cvt>
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa6:	2b47      	cmp	r3, #71	; 0x47
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	d108      	bne.n	8006abe <_printf_float+0x13e>
 8006aac:	1cc8      	adds	r0, r1, #3
 8006aae:	db02      	blt.n	8006ab6 <_printf_float+0x136>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	dd41      	ble.n	8006b3a <_printf_float+0x1ba>
 8006ab6:	f1ab 0302 	sub.w	r3, fp, #2
 8006aba:	fa5f fb83 	uxtb.w	fp, r3
 8006abe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac2:	d820      	bhi.n	8006b06 <_printf_float+0x186>
 8006ac4:	3901      	subs	r1, #1
 8006ac6:	465a      	mov	r2, fp
 8006ac8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006acc:	9109      	str	r1, [sp, #36]	; 0x24
 8006ace:	f7ff ff19 	bl	8006904 <__exponent>
 8006ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ad4:	1813      	adds	r3, r2, r0
 8006ad6:	2a01      	cmp	r2, #1
 8006ad8:	4681      	mov	r9, r0
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	dc02      	bgt.n	8006ae4 <_printf_float+0x164>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	07d2      	lsls	r2, r2, #31
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_float+0x168>
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d09c      	beq.n	8006a2a <_printf_float+0xaa>
 8006af0:	232d      	movs	r3, #45	; 0x2d
 8006af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af6:	e798      	b.n	8006a2a <_printf_float+0xaa>
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	2a47      	cmp	r2, #71	; 0x47
 8006afc:	d1be      	bne.n	8006a7c <_printf_float+0xfc>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1bc      	bne.n	8006a7c <_printf_float+0xfc>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7b9      	b.n	8006a7a <_printf_float+0xfa>
 8006b06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b0a:	d118      	bne.n	8006b3e <_printf_float+0x1be>
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	6863      	ldr	r3, [r4, #4]
 8006b10:	dd0b      	ble.n	8006b2a <_printf_float+0x1aa>
 8006b12:	6121      	str	r1, [r4, #16]
 8006b14:	b913      	cbnz	r3, 8006b1c <_printf_float+0x19c>
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	07d0      	lsls	r0, r2, #31
 8006b1a:	d502      	bpl.n	8006b22 <_printf_float+0x1a2>
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	440b      	add	r3, r1
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b24:	f04f 0900 	mov.w	r9, #0
 8006b28:	e7de      	b.n	8006ae8 <_printf_float+0x168>
 8006b2a:	b913      	cbnz	r3, 8006b32 <_printf_float+0x1b2>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	07d2      	lsls	r2, r2, #31
 8006b30:	d501      	bpl.n	8006b36 <_printf_float+0x1b6>
 8006b32:	3302      	adds	r3, #2
 8006b34:	e7f4      	b.n	8006b20 <_printf_float+0x1a0>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e7f2      	b.n	8006b20 <_printf_float+0x1a0>
 8006b3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b40:	4299      	cmp	r1, r3
 8006b42:	db05      	blt.n	8006b50 <_printf_float+0x1d0>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	6121      	str	r1, [r4, #16]
 8006b48:	07d8      	lsls	r0, r3, #31
 8006b4a:	d5ea      	bpl.n	8006b22 <_printf_float+0x1a2>
 8006b4c:	1c4b      	adds	r3, r1, #1
 8006b4e:	e7e7      	b.n	8006b20 <_printf_float+0x1a0>
 8006b50:	2900      	cmp	r1, #0
 8006b52:	bfd4      	ite	le
 8006b54:	f1c1 0202 	rsble	r2, r1, #2
 8006b58:	2201      	movgt	r2, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	e7e0      	b.n	8006b20 <_printf_float+0x1a0>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	055a      	lsls	r2, r3, #21
 8006b62:	d407      	bmi.n	8006b74 <_printf_float+0x1f4>
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	4642      	mov	r2, r8
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d12c      	bne.n	8006bcc <_printf_float+0x24c>
 8006b72:	e764      	b.n	8006a3e <_printf_float+0xbe>
 8006b74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b78:	f240 80e0 	bls.w	8006d3c <_printf_float+0x3bc>
 8006b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	f7f9 ffb0 	bl	8000ae8 <__aeabi_dcmpeq>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d034      	beq.n	8006bf6 <_printf_float+0x276>
 8006b8c:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <_printf_float+0x2ec>)
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f af51 	beq.w	8006a3e <_printf_float+0xbe>
 8006b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	db02      	blt.n	8006baa <_printf_float+0x22a>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07d8      	lsls	r0, r3, #31
 8006ba8:	d510      	bpl.n	8006bcc <_printf_float+0x24c>
 8006baa:	ee18 3a10 	vmov	r3, s16
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f af41 	beq.w	8006a3e <_printf_float+0xbe>
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	f104 091a 	add.w	r9, r4, #26
 8006bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4543      	cmp	r3, r8
 8006bca:	dc09      	bgt.n	8006be0 <_printf_float+0x260>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	f100 8107 	bmi.w	8006de2 <_printf_float+0x462>
 8006bd4:	68e0      	ldr	r0, [r4, #12]
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	bfb8      	it	lt
 8006bdc:	4618      	movlt	r0, r3
 8006bde:	e730      	b.n	8006a42 <_printf_float+0xc2>
 8006be0:	2301      	movs	r3, #1
 8006be2:	464a      	mov	r2, r9
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f af27 	beq.w	8006a3e <_printf_float+0xbe>
 8006bf0:	f108 0801 	add.w	r8, r8, #1
 8006bf4:	e7e6      	b.n	8006bc4 <_printf_float+0x244>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc39      	bgt.n	8006c70 <_printf_float+0x2f0>
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <_printf_float+0x2ec>)
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f af19 	beq.w	8006a3e <_printf_float+0xbe>
 8006c0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d102      	bne.n	8006c1a <_printf_float+0x29a>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07d9      	lsls	r1, r3, #31
 8006c18:	d5d8      	bpl.n	8006bcc <_printf_float+0x24c>
 8006c1a:	ee18 3a10 	vmov	r3, s16
 8006c1e:	4652      	mov	r2, sl
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	f43f af09 	beq.w	8006a3e <_printf_float+0xbe>
 8006c2c:	f04f 0900 	mov.w	r9, #0
 8006c30:	f104 0a1a 	add.w	sl, r4, #26
 8006c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c36:	425b      	negs	r3, r3
 8006c38:	454b      	cmp	r3, r9
 8006c3a:	dc01      	bgt.n	8006c40 <_printf_float+0x2c0>
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	e792      	b.n	8006b66 <_printf_float+0x1e6>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4652      	mov	r2, sl
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f aef7 	beq.w	8006a3e <_printf_float+0xbe>
 8006c50:	f109 0901 	add.w	r9, r9, #1
 8006c54:	e7ee      	b.n	8006c34 <_printf_float+0x2b4>
 8006c56:	bf00      	nop
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	0800c838 	.word	0x0800c838
 8006c60:	0800c83c 	.word	0x0800c83c
 8006c64:	0800c840 	.word	0x0800c840
 8006c68:	0800c844 	.word	0x0800c844
 8006c6c:	0800cc80 	.word	0x0800cc80
 8006c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bfa8      	it	ge
 8006c78:	461a      	movge	r2, r3
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	4691      	mov	r9, r2
 8006c7e:	dc37      	bgt.n	8006cf0 <_printf_float+0x370>
 8006c80:	f04f 0b00 	mov.w	fp, #0
 8006c84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c88:	f104 021a 	add.w	r2, r4, #26
 8006c8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	eba3 0309 	sub.w	r3, r3, r9
 8006c94:	455b      	cmp	r3, fp
 8006c96:	dc33      	bgt.n	8006d00 <_printf_float+0x380>
 8006c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	db3b      	blt.n	8006d18 <_printf_float+0x398>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07da      	lsls	r2, r3, #31
 8006ca4:	d438      	bmi.n	8006d18 <_printf_float+0x398>
 8006ca6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006caa:	eba2 0903 	sub.w	r9, r2, r3
 8006cae:	9b05      	ldr	r3, [sp, #20]
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	4591      	cmp	r9, r2
 8006cb4:	bfa8      	it	ge
 8006cb6:	4691      	movge	r9, r2
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	dc35      	bgt.n	8006d2a <_printf_float+0x3aa>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cc6:	f104 0a1a 	add.w	sl, r4, #26
 8006cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	eba3 0309 	sub.w	r3, r3, r9
 8006cd4:	4543      	cmp	r3, r8
 8006cd6:	f77f af79 	ble.w	8006bcc <_printf_float+0x24c>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f aeaa 	beq.w	8006a3e <_printf_float+0xbe>
 8006cea:	f108 0801 	add.w	r8, r8, #1
 8006cee:	e7ec      	b.n	8006cca <_printf_float+0x34a>
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d1c0      	bne.n	8006c80 <_printf_float+0x300>
 8006cfe:	e69e      	b.n	8006a3e <_printf_float+0xbe>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	9205      	str	r2, [sp, #20]
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f ae97 	beq.w	8006a3e <_printf_float+0xbe>
 8006d10:	9a05      	ldr	r2, [sp, #20]
 8006d12:	f10b 0b01 	add.w	fp, fp, #1
 8006d16:	e7b9      	b.n	8006c8c <_printf_float+0x30c>
 8006d18:	ee18 3a10 	vmov	r3, s16
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	d1be      	bne.n	8006ca6 <_printf_float+0x326>
 8006d28:	e689      	b.n	8006a3e <_printf_float+0xbe>
 8006d2a:	9a05      	ldr	r2, [sp, #20]
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	4442      	add	r2, r8
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	d1c1      	bne.n	8006cbe <_printf_float+0x33e>
 8006d3a:	e680      	b.n	8006a3e <_printf_float+0xbe>
 8006d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d3e:	2a01      	cmp	r2, #1
 8006d40:	dc01      	bgt.n	8006d46 <_printf_float+0x3c6>
 8006d42:	07db      	lsls	r3, r3, #31
 8006d44:	d53a      	bpl.n	8006dbc <_printf_float+0x43c>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4642      	mov	r2, r8
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae74 	beq.w	8006a3e <_printf_float+0xbe>
 8006d56:	ee18 3a10 	vmov	r3, s16
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f ae6b 	beq.w	8006a3e <_printf_float+0xbe>
 8006d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d74:	f7f9 feb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d78:	b9d8      	cbnz	r0, 8006db2 <_printf_float+0x432>
 8006d7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d7e:	f108 0201 	add.w	r2, r8, #1
 8006d82:	4631      	mov	r1, r6
 8006d84:	4628      	mov	r0, r5
 8006d86:	47b8      	blx	r7
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d10e      	bne.n	8006daa <_printf_float+0x42a>
 8006d8c:	e657      	b.n	8006a3e <_printf_float+0xbe>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4652      	mov	r2, sl
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f ae50 	beq.w	8006a3e <_printf_float+0xbe>
 8006d9e:	f108 0801 	add.w	r8, r8, #1
 8006da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	4543      	cmp	r3, r8
 8006da8:	dcf1      	bgt.n	8006d8e <_printf_float+0x40e>
 8006daa:	464b      	mov	r3, r9
 8006dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006db0:	e6da      	b.n	8006b68 <_printf_float+0x1e8>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	f104 0a1a 	add.w	sl, r4, #26
 8006dba:	e7f2      	b.n	8006da2 <_printf_float+0x422>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	e7df      	b.n	8006d82 <_printf_float+0x402>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f ae36 	beq.w	8006a3e <_printf_float+0xbe>
 8006dd2:	f108 0801 	add.w	r8, r8, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	4543      	cmp	r3, r8
 8006dde:	dcf0      	bgt.n	8006dc2 <_printf_float+0x442>
 8006de0:	e6f8      	b.n	8006bd4 <_printf_float+0x254>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 0919 	add.w	r9, r4, #25
 8006dea:	e7f4      	b.n	8006dd6 <_printf_float+0x456>

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e38:	1e13      	subs	r3, r2, #0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	bf02      	ittt	eq
 8006e5e:	68e5      	ldreq	r5, [r4, #12]
 8006e60:	6833      	ldreq	r3, [r6, #0]
 8006e62:	1aed      	subeq	r5, r5, r3
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4649      	mov	r1, r9
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c0      	blx	r8
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	; 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed0:	2f78      	cmp	r7, #120	; 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	; 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d4 	beq.w	8007092 <_printf_i+0x1ca>
 8006eea:	2f58      	cmp	r7, #88	; 0x58
 8006eec:	f000 80c0 	beq.w	8007070 <_printf_i+0x1a8>
 8006ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	; (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007079 	.word	0x08007079
 8006f38:	08006fa1 	.word	0x08006fa1
 8006f3c:	08007033 	.word	0x08007033
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	0800709b 	.word	0x0800709b
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	0800703b 	.word	0x0800703b
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e09f      	b.n	80070b4 <_printf_i+0x1ec>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	0607      	lsls	r7, r0, #24
 8006f7a:	f103 0104 	add.w	r1, r3, #4
 8006f7e:	6029      	str	r1, [r5, #0]
 8006f80:	d501      	bpl.n	8006f86 <_printf_i+0xbe>
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	e003      	b.n	8006f8e <_printf_i+0xc6>
 8006f86:	0646      	lsls	r6, r0, #25
 8006f88:	d5fb      	bpl.n	8006f82 <_printf_i+0xba>
 8006f8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	da03      	bge.n	8006f9a <_printf_i+0xd2>
 8006f92:	232d      	movs	r3, #45	; 0x2d
 8006f94:	4276      	negs	r6, r6
 8006f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9a:	485a      	ldr	r0, [pc, #360]	; (8007104 <_printf_i+0x23c>)
 8006f9c:	230a      	movs	r3, #10
 8006f9e:	e012      	b.n	8006fc6 <_printf_i+0xfe>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	1d19      	adds	r1, r3, #4
 8006fa6:	6029      	str	r1, [r5, #0]
 8006fa8:	0605      	lsls	r5, r0, #24
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0xe8>
 8006fac:	681e      	ldr	r6, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0xee>
 8006fb0:	0641      	lsls	r1, r0, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0xe4>
 8006fb4:	881e      	ldrh	r6, [r3, #0]
 8006fb6:	4853      	ldr	r0, [pc, #332]	; (8007104 <_printf_i+0x23c>)
 8006fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8006fba:	bf0c      	ite	eq
 8006fbc:	2308      	moveq	r3, #8
 8006fbe:	230a      	movne	r3, #10
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fc6:	6865      	ldr	r5, [r4, #4]
 8006fc8:	60a5      	str	r5, [r4, #8]
 8006fca:	2d00      	cmp	r5, #0
 8006fcc:	bfa2      	ittt	ge
 8006fce:	6821      	ldrge	r1, [r4, #0]
 8006fd0:	f021 0104 	bicge.w	r1, r1, #4
 8006fd4:	6021      	strge	r1, [r4, #0]
 8006fd6:	b90e      	cbnz	r6, 8006fdc <_printf_i+0x114>
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	d04b      	beq.n	8007074 <_printf_i+0x1ac>
 8006fdc:	4615      	mov	r5, r2
 8006fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fe6:	5dc7      	ldrb	r7, [r0, r7]
 8006fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fec:	4637      	mov	r7, r6
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	460e      	mov	r6, r1
 8006ff2:	d9f4      	bls.n	8006fde <_printf_i+0x116>
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d10b      	bne.n	8007010 <_printf_i+0x148>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	07de      	lsls	r6, r3, #31
 8006ffc:	d508      	bpl.n	8007010 <_printf_i+0x148>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6861      	ldr	r1, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	bfde      	ittt	le
 8007006:	2330      	movle	r3, #48	; 0x30
 8007008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800700c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007010:	1b52      	subs	r2, r2, r5
 8007012:	6122      	str	r2, [r4, #16]
 8007014:	f8cd a000 	str.w	sl, [sp]
 8007018:	464b      	mov	r3, r9
 800701a:	aa03      	add	r2, sp, #12
 800701c:	4621      	mov	r1, r4
 800701e:	4640      	mov	r0, r8
 8007020:	f7ff fee4 	bl	8006dec <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	d14a      	bne.n	80070be <_printf_i+0x1f6>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	b004      	add	sp, #16
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f043 0320 	orr.w	r3, r3, #32
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	4833      	ldr	r0, [pc, #204]	; (8007108 <_printf_i+0x240>)
 800703c:	2778      	movs	r7, #120	; 0x78
 800703e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	061f      	lsls	r7, r3, #24
 8007048:	f851 6b04 	ldr.w	r6, [r1], #4
 800704c:	d402      	bmi.n	8007054 <_printf_i+0x18c>
 800704e:	065f      	lsls	r7, r3, #25
 8007050:	bf48      	it	mi
 8007052:	b2b6      	uxthmi	r6, r6
 8007054:	07df      	lsls	r7, r3, #31
 8007056:	bf48      	it	mi
 8007058:	f043 0320 	orrmi.w	r3, r3, #32
 800705c:	6029      	str	r1, [r5, #0]
 800705e:	bf48      	it	mi
 8007060:	6023      	strmi	r3, [r4, #0]
 8007062:	b91e      	cbnz	r6, 800706c <_printf_i+0x1a4>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f023 0320 	bic.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	2310      	movs	r3, #16
 800706e:	e7a7      	b.n	8006fc0 <_printf_i+0xf8>
 8007070:	4824      	ldr	r0, [pc, #144]	; (8007104 <_printf_i+0x23c>)
 8007072:	e7e4      	b.n	800703e <_printf_i+0x176>
 8007074:	4615      	mov	r5, r2
 8007076:	e7bd      	b.n	8006ff4 <_printf_i+0x12c>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	6826      	ldr	r6, [r4, #0]
 800707c:	6961      	ldr	r1, [r4, #20]
 800707e:	1d18      	adds	r0, r3, #4
 8007080:	6028      	str	r0, [r5, #0]
 8007082:	0635      	lsls	r5, r6, #24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	d501      	bpl.n	800708c <_printf_i+0x1c4>
 8007088:	6019      	str	r1, [r3, #0]
 800708a:	e002      	b.n	8007092 <_printf_i+0x1ca>
 800708c:	0670      	lsls	r0, r6, #25
 800708e:	d5fb      	bpl.n	8007088 <_printf_i+0x1c0>
 8007090:	8019      	strh	r1, [r3, #0]
 8007092:	2300      	movs	r3, #0
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	4615      	mov	r5, r2
 8007098:	e7bc      	b.n	8007014 <_printf_i+0x14c>
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	602a      	str	r2, [r5, #0]
 80070a0:	681d      	ldr	r5, [r3, #0]
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	2100      	movs	r1, #0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f7f9 f8a2 	bl	80001f0 <memchr>
 80070ac:	b108      	cbz	r0, 80070b2 <_printf_i+0x1ea>
 80070ae:	1b40      	subs	r0, r0, r5
 80070b0:	6060      	str	r0, [r4, #4]
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070bc:	e7aa      	b.n	8007014 <_printf_i+0x14c>
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4649      	mov	r1, r9
 80070c4:	4640      	mov	r0, r8
 80070c6:	47d0      	blx	sl
 80070c8:	3001      	adds	r0, #1
 80070ca:	d0ad      	beq.n	8007028 <_printf_i+0x160>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	079b      	lsls	r3, r3, #30
 80070d0:	d413      	bmi.n	80070fa <_printf_i+0x232>
 80070d2:	68e0      	ldr	r0, [r4, #12]
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	4298      	cmp	r0, r3
 80070d8:	bfb8      	it	lt
 80070da:	4618      	movlt	r0, r3
 80070dc:	e7a6      	b.n	800702c <_printf_i+0x164>
 80070de:	2301      	movs	r3, #1
 80070e0:	4632      	mov	r2, r6
 80070e2:	4649      	mov	r1, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	47d0      	blx	sl
 80070e8:	3001      	adds	r0, #1
 80070ea:	d09d      	beq.n	8007028 <_printf_i+0x160>
 80070ec:	3501      	adds	r5, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	9903      	ldr	r1, [sp, #12]
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dcf2      	bgt.n	80070de <_printf_i+0x216>
 80070f8:	e7eb      	b.n	80070d2 <_printf_i+0x20a>
 80070fa:	2500      	movs	r5, #0
 80070fc:	f104 0619 	add.w	r6, r4, #25
 8007100:	e7f5      	b.n	80070ee <_printf_i+0x226>
 8007102:	bf00      	nop
 8007104:	0800c848 	.word	0x0800c848
 8007108:	0800c859 	.word	0x0800c859

0800710c <_scanf_float>:
 800710c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007110:	b087      	sub	sp, #28
 8007112:	4617      	mov	r7, r2
 8007114:	9303      	str	r3, [sp, #12]
 8007116:	688b      	ldr	r3, [r1, #8]
 8007118:	1e5a      	subs	r2, r3, #1
 800711a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800711e:	bf83      	ittte	hi
 8007120:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007124:	195b      	addhi	r3, r3, r5
 8007126:	9302      	strhi	r3, [sp, #8]
 8007128:	2300      	movls	r3, #0
 800712a:	bf86      	itte	hi
 800712c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007130:	608b      	strhi	r3, [r1, #8]
 8007132:	9302      	strls	r3, [sp, #8]
 8007134:	680b      	ldr	r3, [r1, #0]
 8007136:	468b      	mov	fp, r1
 8007138:	2500      	movs	r5, #0
 800713a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800713e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007142:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007146:	4680      	mov	r8, r0
 8007148:	460c      	mov	r4, r1
 800714a:	465e      	mov	r6, fp
 800714c:	46aa      	mov	sl, r5
 800714e:	46a9      	mov	r9, r5
 8007150:	9501      	str	r5, [sp, #4]
 8007152:	68a2      	ldr	r2, [r4, #8]
 8007154:	b152      	cbz	r2, 800716c <_scanf_float+0x60>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b4e      	cmp	r3, #78	; 0x4e
 800715c:	d864      	bhi.n	8007228 <_scanf_float+0x11c>
 800715e:	2b40      	cmp	r3, #64	; 0x40
 8007160:	d83c      	bhi.n	80071dc <_scanf_float+0xd0>
 8007162:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007166:	b2c8      	uxtb	r0, r1
 8007168:	280e      	cmp	r0, #14
 800716a:	d93a      	bls.n	80071e2 <_scanf_float+0xd6>
 800716c:	f1b9 0f00 	cmp.w	r9, #0
 8007170:	d003      	beq.n	800717a <_scanf_float+0x6e>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800717e:	f1ba 0f01 	cmp.w	sl, #1
 8007182:	f200 8113 	bhi.w	80073ac <_scanf_float+0x2a0>
 8007186:	455e      	cmp	r6, fp
 8007188:	f200 8105 	bhi.w	8007396 <_scanf_float+0x28a>
 800718c:	2501      	movs	r5, #1
 800718e:	4628      	mov	r0, r5
 8007190:	b007      	add	sp, #28
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800719a:	2a0d      	cmp	r2, #13
 800719c:	d8e6      	bhi.n	800716c <_scanf_float+0x60>
 800719e:	a101      	add	r1, pc, #4	; (adr r1, 80071a4 <_scanf_float+0x98>)
 80071a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071a4:	080072e3 	.word	0x080072e3
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	0800716d 	.word	0x0800716d
 80071b4:	08007343 	.word	0x08007343
 80071b8:	0800731b 	.word	0x0800731b
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	080072f1 	.word	0x080072f1
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	0800716d 	.word	0x0800716d
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072a9 	.word	0x080072a9
 80071dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80071e0:	e7db      	b.n	800719a <_scanf_float+0x8e>
 80071e2:	290e      	cmp	r1, #14
 80071e4:	d8c2      	bhi.n	800716c <_scanf_float+0x60>
 80071e6:	a001      	add	r0, pc, #4	; (adr r0, 80071ec <_scanf_float+0xe0>)
 80071e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071ec:	0800729b 	.word	0x0800729b
 80071f0:	0800716d 	.word	0x0800716d
 80071f4:	0800729b 	.word	0x0800729b
 80071f8:	0800732f 	.word	0x0800732f
 80071fc:	0800716d 	.word	0x0800716d
 8007200:	08007249 	.word	0x08007249
 8007204:	08007285 	.word	0x08007285
 8007208:	08007285 	.word	0x08007285
 800720c:	08007285 	.word	0x08007285
 8007210:	08007285 	.word	0x08007285
 8007214:	08007285 	.word	0x08007285
 8007218:	08007285 	.word	0x08007285
 800721c:	08007285 	.word	0x08007285
 8007220:	08007285 	.word	0x08007285
 8007224:	08007285 	.word	0x08007285
 8007228:	2b6e      	cmp	r3, #110	; 0x6e
 800722a:	d809      	bhi.n	8007240 <_scanf_float+0x134>
 800722c:	2b60      	cmp	r3, #96	; 0x60
 800722e:	d8b2      	bhi.n	8007196 <_scanf_float+0x8a>
 8007230:	2b54      	cmp	r3, #84	; 0x54
 8007232:	d077      	beq.n	8007324 <_scanf_float+0x218>
 8007234:	2b59      	cmp	r3, #89	; 0x59
 8007236:	d199      	bne.n	800716c <_scanf_float+0x60>
 8007238:	2d07      	cmp	r5, #7
 800723a:	d197      	bne.n	800716c <_scanf_float+0x60>
 800723c:	2508      	movs	r5, #8
 800723e:	e029      	b.n	8007294 <_scanf_float+0x188>
 8007240:	2b74      	cmp	r3, #116	; 0x74
 8007242:	d06f      	beq.n	8007324 <_scanf_float+0x218>
 8007244:	2b79      	cmp	r3, #121	; 0x79
 8007246:	e7f6      	b.n	8007236 <_scanf_float+0x12a>
 8007248:	6821      	ldr	r1, [r4, #0]
 800724a:	05c8      	lsls	r0, r1, #23
 800724c:	d51a      	bpl.n	8007284 <_scanf_float+0x178>
 800724e:	9b02      	ldr	r3, [sp, #8]
 8007250:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007254:	6021      	str	r1, [r4, #0]
 8007256:	f109 0901 	add.w	r9, r9, #1
 800725a:	b11b      	cbz	r3, 8007264 <_scanf_float+0x158>
 800725c:	3b01      	subs	r3, #1
 800725e:	3201      	adds	r2, #1
 8007260:	9302      	str	r3, [sp, #8]
 8007262:	60a2      	str	r2, [r4, #8]
 8007264:	68a3      	ldr	r3, [r4, #8]
 8007266:	3b01      	subs	r3, #1
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	3301      	adds	r3, #1
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3b01      	subs	r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	f340 8084 	ble.w	8007384 <_scanf_float+0x278>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	3301      	adds	r3, #1
 8007280:	603b      	str	r3, [r7, #0]
 8007282:	e766      	b.n	8007152 <_scanf_float+0x46>
 8007284:	eb1a 0f05 	cmn.w	sl, r5
 8007288:	f47f af70 	bne.w	800716c <_scanf_float+0x60>
 800728c:	6822      	ldr	r2, [r4, #0]
 800728e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007292:	6022      	str	r2, [r4, #0]
 8007294:	f806 3b01 	strb.w	r3, [r6], #1
 8007298:	e7e4      	b.n	8007264 <_scanf_float+0x158>
 800729a:	6822      	ldr	r2, [r4, #0]
 800729c:	0610      	lsls	r0, r2, #24
 800729e:	f57f af65 	bpl.w	800716c <_scanf_float+0x60>
 80072a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072a6:	e7f4      	b.n	8007292 <_scanf_float+0x186>
 80072a8:	f1ba 0f00 	cmp.w	sl, #0
 80072ac:	d10e      	bne.n	80072cc <_scanf_float+0x1c0>
 80072ae:	f1b9 0f00 	cmp.w	r9, #0
 80072b2:	d10e      	bne.n	80072d2 <_scanf_float+0x1c6>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80072ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80072be:	d108      	bne.n	80072d2 <_scanf_float+0x1c6>
 80072c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80072c4:	6022      	str	r2, [r4, #0]
 80072c6:	f04f 0a01 	mov.w	sl, #1
 80072ca:	e7e3      	b.n	8007294 <_scanf_float+0x188>
 80072cc:	f1ba 0f02 	cmp.w	sl, #2
 80072d0:	d055      	beq.n	800737e <_scanf_float+0x272>
 80072d2:	2d01      	cmp	r5, #1
 80072d4:	d002      	beq.n	80072dc <_scanf_float+0x1d0>
 80072d6:	2d04      	cmp	r5, #4
 80072d8:	f47f af48 	bne.w	800716c <_scanf_float+0x60>
 80072dc:	3501      	adds	r5, #1
 80072de:	b2ed      	uxtb	r5, r5
 80072e0:	e7d8      	b.n	8007294 <_scanf_float+0x188>
 80072e2:	f1ba 0f01 	cmp.w	sl, #1
 80072e6:	f47f af41 	bne.w	800716c <_scanf_float+0x60>
 80072ea:	f04f 0a02 	mov.w	sl, #2
 80072ee:	e7d1      	b.n	8007294 <_scanf_float+0x188>
 80072f0:	b97d      	cbnz	r5, 8007312 <_scanf_float+0x206>
 80072f2:	f1b9 0f00 	cmp.w	r9, #0
 80072f6:	f47f af3c 	bne.w	8007172 <_scanf_float+0x66>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007300:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007304:	f47f af39 	bne.w	800717a <_scanf_float+0x6e>
 8007308:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	2501      	movs	r5, #1
 8007310:	e7c0      	b.n	8007294 <_scanf_float+0x188>
 8007312:	2d03      	cmp	r5, #3
 8007314:	d0e2      	beq.n	80072dc <_scanf_float+0x1d0>
 8007316:	2d05      	cmp	r5, #5
 8007318:	e7de      	b.n	80072d8 <_scanf_float+0x1cc>
 800731a:	2d02      	cmp	r5, #2
 800731c:	f47f af26 	bne.w	800716c <_scanf_float+0x60>
 8007320:	2503      	movs	r5, #3
 8007322:	e7b7      	b.n	8007294 <_scanf_float+0x188>
 8007324:	2d06      	cmp	r5, #6
 8007326:	f47f af21 	bne.w	800716c <_scanf_float+0x60>
 800732a:	2507      	movs	r5, #7
 800732c:	e7b2      	b.n	8007294 <_scanf_float+0x188>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	0591      	lsls	r1, r2, #22
 8007332:	f57f af1b 	bpl.w	800716c <_scanf_float+0x60>
 8007336:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800733a:	6022      	str	r2, [r4, #0]
 800733c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007340:	e7a8      	b.n	8007294 <_scanf_float+0x188>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007348:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800734c:	d006      	beq.n	800735c <_scanf_float+0x250>
 800734e:	0550      	lsls	r0, r2, #21
 8007350:	f57f af0c 	bpl.w	800716c <_scanf_float+0x60>
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	f43f af0f 	beq.w	800717a <_scanf_float+0x6e>
 800735c:	0591      	lsls	r1, r2, #22
 800735e:	bf58      	it	pl
 8007360:	9901      	ldrpl	r1, [sp, #4]
 8007362:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007366:	bf58      	it	pl
 8007368:	eba9 0101 	subpl.w	r1, r9, r1
 800736c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007370:	bf58      	it	pl
 8007372:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	f04f 0900 	mov.w	r9, #0
 800737c:	e78a      	b.n	8007294 <_scanf_float+0x188>
 800737e:	f04f 0a03 	mov.w	sl, #3
 8007382:	e787      	b.n	8007294 <_scanf_float+0x188>
 8007384:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007388:	4639      	mov	r1, r7
 800738a:	4640      	mov	r0, r8
 800738c:	4798      	blx	r3
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f aedf 	beq.w	8007152 <_scanf_float+0x46>
 8007394:	e6ea      	b.n	800716c <_scanf_float+0x60>
 8007396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800739a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800739e:	463a      	mov	r2, r7
 80073a0:	4640      	mov	r0, r8
 80073a2:	4798      	blx	r3
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	6123      	str	r3, [r4, #16]
 80073aa:	e6ec      	b.n	8007186 <_scanf_float+0x7a>
 80073ac:	1e6b      	subs	r3, r5, #1
 80073ae:	2b06      	cmp	r3, #6
 80073b0:	d825      	bhi.n	80073fe <_scanf_float+0x2f2>
 80073b2:	2d02      	cmp	r5, #2
 80073b4:	d836      	bhi.n	8007424 <_scanf_float+0x318>
 80073b6:	455e      	cmp	r6, fp
 80073b8:	f67f aee8 	bls.w	800718c <_scanf_float+0x80>
 80073bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073c4:	463a      	mov	r2, r7
 80073c6:	4640      	mov	r0, r8
 80073c8:	4798      	blx	r3
 80073ca:	6923      	ldr	r3, [r4, #16]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	6123      	str	r3, [r4, #16]
 80073d0:	e7f1      	b.n	80073b6 <_scanf_float+0x2aa>
 80073d2:	9802      	ldr	r0, [sp, #8]
 80073d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80073d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80073dc:	9002      	str	r0, [sp, #8]
 80073de:	463a      	mov	r2, r7
 80073e0:	4640      	mov	r0, r8
 80073e2:	4798      	blx	r3
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ee:	fa5f fa8a 	uxtb.w	sl, sl
 80073f2:	f1ba 0f02 	cmp.w	sl, #2
 80073f6:	d1ec      	bne.n	80073d2 <_scanf_float+0x2c6>
 80073f8:	3d03      	subs	r5, #3
 80073fa:	b2ed      	uxtb	r5, r5
 80073fc:	1b76      	subs	r6, r6, r5
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	05da      	lsls	r2, r3, #23
 8007402:	d52f      	bpl.n	8007464 <_scanf_float+0x358>
 8007404:	055b      	lsls	r3, r3, #21
 8007406:	d510      	bpl.n	800742a <_scanf_float+0x31e>
 8007408:	455e      	cmp	r6, fp
 800740a:	f67f aebf 	bls.w	800718c <_scanf_float+0x80>
 800740e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007416:	463a      	mov	r2, r7
 8007418:	4640      	mov	r0, r8
 800741a:	4798      	blx	r3
 800741c:	6923      	ldr	r3, [r4, #16]
 800741e:	3b01      	subs	r3, #1
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	e7f1      	b.n	8007408 <_scanf_float+0x2fc>
 8007424:	46aa      	mov	sl, r5
 8007426:	9602      	str	r6, [sp, #8]
 8007428:	e7df      	b.n	80073ea <_scanf_float+0x2de>
 800742a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	2965      	cmp	r1, #101	; 0x65
 8007432:	f103 33ff 	add.w	r3, r3, #4294967295
 8007436:	f106 35ff 	add.w	r5, r6, #4294967295
 800743a:	6123      	str	r3, [r4, #16]
 800743c:	d00c      	beq.n	8007458 <_scanf_float+0x34c>
 800743e:	2945      	cmp	r1, #69	; 0x45
 8007440:	d00a      	beq.n	8007458 <_scanf_float+0x34c>
 8007442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007446:	463a      	mov	r2, r7
 8007448:	4640      	mov	r0, r8
 800744a:	4798      	blx	r3
 800744c:	6923      	ldr	r3, [r4, #16]
 800744e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007452:	3b01      	subs	r3, #1
 8007454:	1eb5      	subs	r5, r6, #2
 8007456:	6123      	str	r3, [r4, #16]
 8007458:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800745c:	463a      	mov	r2, r7
 800745e:	4640      	mov	r0, r8
 8007460:	4798      	blx	r3
 8007462:	462e      	mov	r6, r5
 8007464:	6825      	ldr	r5, [r4, #0]
 8007466:	f015 0510 	ands.w	r5, r5, #16
 800746a:	d158      	bne.n	800751e <_scanf_float+0x412>
 800746c:	7035      	strb	r5, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007478:	d11c      	bne.n	80074b4 <_scanf_float+0x3a8>
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	454b      	cmp	r3, r9
 800747e:	eba3 0209 	sub.w	r2, r3, r9
 8007482:	d124      	bne.n	80074ce <_scanf_float+0x3c2>
 8007484:	2200      	movs	r2, #0
 8007486:	4659      	mov	r1, fp
 8007488:	4640      	mov	r0, r8
 800748a:	f003 fb59 	bl	800ab40 <_strtod_r>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	6821      	ldr	r1, [r4, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f011 0f02 	tst.w	r1, #2
 8007498:	ec57 6b10 	vmov	r6, r7, d0
 800749c:	f103 0204 	add.w	r2, r3, #4
 80074a0:	d020      	beq.n	80074e4 <_scanf_float+0x3d8>
 80074a2:	9903      	ldr	r1, [sp, #12]
 80074a4:	600a      	str	r2, [r1, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	e9c3 6700 	strd	r6, r7, [r3]
 80074ac:	68e3      	ldr	r3, [r4, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60e3      	str	r3, [r4, #12]
 80074b2:	e66c      	b.n	800718e <_scanf_float+0x82>
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0e4      	beq.n	8007484 <_scanf_float+0x378>
 80074ba:	9905      	ldr	r1, [sp, #20]
 80074bc:	230a      	movs	r3, #10
 80074be:	462a      	mov	r2, r5
 80074c0:	3101      	adds	r1, #1
 80074c2:	4640      	mov	r0, r8
 80074c4:	f003 fbc4 	bl	800ac50 <_strtol_r>
 80074c8:	9b04      	ldr	r3, [sp, #16]
 80074ca:	9e05      	ldr	r6, [sp, #20]
 80074cc:	1ac2      	subs	r2, r0, r3
 80074ce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80074d2:	429e      	cmp	r6, r3
 80074d4:	bf28      	it	cs
 80074d6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80074da:	4912      	ldr	r1, [pc, #72]	; (8007524 <_scanf_float+0x418>)
 80074dc:	4630      	mov	r0, r6
 80074de:	f000 f965 	bl	80077ac <siprintf>
 80074e2:	e7cf      	b.n	8007484 <_scanf_float+0x378>
 80074e4:	f011 0f04 	tst.w	r1, #4
 80074e8:	9903      	ldr	r1, [sp, #12]
 80074ea:	600a      	str	r2, [r1, #0]
 80074ec:	d1db      	bne.n	80074a6 <_scanf_float+0x39a>
 80074ee:	f8d3 8000 	ldr.w	r8, [r3]
 80074f2:	ee10 2a10 	vmov	r2, s0
 80074f6:	ee10 0a10 	vmov	r0, s0
 80074fa:	463b      	mov	r3, r7
 80074fc:	4639      	mov	r1, r7
 80074fe:	f7f9 fb25 	bl	8000b4c <__aeabi_dcmpun>
 8007502:	b128      	cbz	r0, 8007510 <_scanf_float+0x404>
 8007504:	4808      	ldr	r0, [pc, #32]	; (8007528 <_scanf_float+0x41c>)
 8007506:	f001 f881 	bl	800860c <nanf>
 800750a:	ed88 0a00 	vstr	s0, [r8]
 800750e:	e7cd      	b.n	80074ac <_scanf_float+0x3a0>
 8007510:	4630      	mov	r0, r6
 8007512:	4639      	mov	r1, r7
 8007514:	f7f9 fb78 	bl	8000c08 <__aeabi_d2f>
 8007518:	f8c8 0000 	str.w	r0, [r8]
 800751c:	e7c6      	b.n	80074ac <_scanf_float+0x3a0>
 800751e:	2500      	movs	r5, #0
 8007520:	e635      	b.n	800718e <_scanf_float+0x82>
 8007522:	bf00      	nop
 8007524:	0800c86a 	.word	0x0800c86a
 8007528:	0800cd2b 	.word	0x0800cd2b

0800752c <std>:
 800752c:	2300      	movs	r3, #0
 800752e:	b510      	push	{r4, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	e9c0 3300 	strd	r3, r3, [r0]
 8007536:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800753a:	6083      	str	r3, [r0, #8]
 800753c:	8181      	strh	r1, [r0, #12]
 800753e:	6643      	str	r3, [r0, #100]	; 0x64
 8007540:	81c2      	strh	r2, [r0, #14]
 8007542:	6183      	str	r3, [r0, #24]
 8007544:	4619      	mov	r1, r3
 8007546:	2208      	movs	r2, #8
 8007548:	305c      	adds	r0, #92	; 0x5c
 800754a:	f000 fa55 	bl	80079f8 <memset>
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <std+0x38>)
 8007550:	6263      	str	r3, [r4, #36]	; 0x24
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <std+0x3c>)
 8007554:	62a3      	str	r3, [r4, #40]	; 0x28
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <std+0x40>)
 8007558:	62e3      	str	r3, [r4, #44]	; 0x2c
 800755a:	4b05      	ldr	r3, [pc, #20]	; (8007570 <std+0x44>)
 800755c:	6224      	str	r4, [r4, #32]
 800755e:	6323      	str	r3, [r4, #48]	; 0x30
 8007560:	bd10      	pop	{r4, pc}
 8007562:	bf00      	nop
 8007564:	08007845 	.word	0x08007845
 8007568:	0800786b 	.word	0x0800786b
 800756c:	080078a3 	.word	0x080078a3
 8007570:	080078c7 	.word	0x080078c7

08007574 <stdio_exit_handler>:
 8007574:	4a02      	ldr	r2, [pc, #8]	; (8007580 <stdio_exit_handler+0xc>)
 8007576:	4903      	ldr	r1, [pc, #12]	; (8007584 <stdio_exit_handler+0x10>)
 8007578:	4803      	ldr	r0, [pc, #12]	; (8007588 <stdio_exit_handler+0x14>)
 800757a:	f000 b869 	b.w	8007650 <_fwalk_sglue>
 800757e:	bf00      	nop
 8007580:	20000014 	.word	0x20000014
 8007584:	0800b74d 	.word	0x0800b74d
 8007588:	20000028 	.word	0x20000028

0800758c <cleanup_stdio>:
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <cleanup_stdio+0x34>)
 8007590:	4299      	cmp	r1, r3
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	d001      	beq.n	800759c <cleanup_stdio+0x10>
 8007598:	f004 f8d8 	bl	800b74c <_fflush_r>
 800759c:	68a1      	ldr	r1, [r4, #8]
 800759e:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <cleanup_stdio+0x38>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <cleanup_stdio+0x1e>
 80075a4:	4620      	mov	r0, r4
 80075a6:	f004 f8d1 	bl	800b74c <_fflush_r>
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <cleanup_stdio+0x3c>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d004      	beq.n	80075bc <cleanup_stdio+0x30>
 80075b2:	4620      	mov	r0, r4
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f004 b8c8 	b.w	800b74c <_fflush_r>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	200008a0 	.word	0x200008a0
 80075c4:	20000908 	.word	0x20000908
 80075c8:	20000970 	.word	0x20000970

080075cc <global_stdio_init.part.0>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <global_stdio_init.part.0+0x30>)
 80075d0:	4c0b      	ldr	r4, [pc, #44]	; (8007600 <global_stdio_init.part.0+0x34>)
 80075d2:	4a0c      	ldr	r2, [pc, #48]	; (8007604 <global_stdio_init.part.0+0x38>)
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	2104      	movs	r1, #4
 80075dc:	f7ff ffa6 	bl	800752c <std>
 80075e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80075e4:	2201      	movs	r2, #1
 80075e6:	2109      	movs	r1, #9
 80075e8:	f7ff ffa0 	bl	800752c <std>
 80075ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80075f0:	2202      	movs	r2, #2
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f6:	2112      	movs	r1, #18
 80075f8:	f7ff bf98 	b.w	800752c <std>
 80075fc:	200009d8 	.word	0x200009d8
 8007600:	200008a0 	.word	0x200008a0
 8007604:	08007575 	.word	0x08007575

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 bfe6 	b.w	80085da <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20000a06 	.word	0x20000a06

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 bfe2 	b.w	80085de <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20000a06 	.word	0x20000a06

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sfp_lock_acquire>
 8007628:	6a23      	ldr	r3, [r4, #32]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sfp_lock_release>
 8007634:	4b04      	ldr	r3, [pc, #16]	; (8007648 <__sinit+0x28>)
 8007636:	6223      	str	r3, [r4, #32]
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <__sinit+0x2c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f5      	bne.n	800762c <__sinit+0xc>
 8007640:	f7ff ffc4 	bl	80075cc <global_stdio_init.part.0>
 8007644:	e7f2      	b.n	800762c <__sinit+0xc>
 8007646:	bf00      	nop
 8007648:	0800758d 	.word	0x0800758d
 800764c:	200009d8 	.word	0x200009d8

08007650 <_fwalk_sglue>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4688      	mov	r8, r1
 8007658:	4614      	mov	r4, r2
 800765a:	2600      	movs	r6, #0
 800765c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007660:	f1b9 0901 	subs.w	r9, r9, #1
 8007664:	d505      	bpl.n	8007672 <_fwalk_sglue+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1f7      	bne.n	800765c <_fwalk_sglue+0xc>
 800766c:	4630      	mov	r0, r6
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <_fwalk_sglue+0x38>
 8007678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	d003      	beq.n	8007688 <_fwalk_sglue+0x38>
 8007680:	4629      	mov	r1, r5
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	4306      	orrs	r6, r0
 8007688:	3568      	adds	r5, #104	; 0x68
 800768a:	e7e9      	b.n	8007660 <_fwalk_sglue+0x10>

0800768c <_puts_r>:
 800768c:	6a03      	ldr	r3, [r0, #32]
 800768e:	b570      	push	{r4, r5, r6, lr}
 8007690:	6884      	ldr	r4, [r0, #8]
 8007692:	4605      	mov	r5, r0
 8007694:	460e      	mov	r6, r1
 8007696:	b90b      	cbnz	r3, 800769c <_puts_r+0x10>
 8007698:	f7ff ffc2 	bl	8007620 <__sinit>
 800769c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d405      	bmi.n	80076ae <_puts_r+0x22>
 80076a2:	89a3      	ldrh	r3, [r4, #12]
 80076a4:	0598      	lsls	r0, r3, #22
 80076a6:	d402      	bmi.n	80076ae <_puts_r+0x22>
 80076a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076aa:	f000 ff96 	bl	80085da <__retarget_lock_acquire_recursive>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	0719      	lsls	r1, r3, #28
 80076b2:	d513      	bpl.n	80076dc <_puts_r+0x50>
 80076b4:	6923      	ldr	r3, [r4, #16]
 80076b6:	b18b      	cbz	r3, 80076dc <_puts_r+0x50>
 80076b8:	3e01      	subs	r6, #1
 80076ba:	68a3      	ldr	r3, [r4, #8]
 80076bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076c0:	3b01      	subs	r3, #1
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	b9e9      	cbnz	r1, 8007702 <_puts_r+0x76>
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da2e      	bge.n	8007728 <_puts_r+0x9c>
 80076ca:	4622      	mov	r2, r4
 80076cc:	210a      	movs	r1, #10
 80076ce:	4628      	mov	r0, r5
 80076d0:	f000 f8fd 	bl	80078ce <__swbuf_r>
 80076d4:	3001      	adds	r0, #1
 80076d6:	d007      	beq.n	80076e8 <_puts_r+0x5c>
 80076d8:	250a      	movs	r5, #10
 80076da:	e007      	b.n	80076ec <_puts_r+0x60>
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f932 	bl	8007948 <__swsetup_r>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0e7      	beq.n	80076b8 <_puts_r+0x2c>
 80076e8:	f04f 35ff 	mov.w	r5, #4294967295
 80076ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076ee:	07da      	lsls	r2, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_puts_r+0x72>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	059b      	lsls	r3, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_puts_r+0x72>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f000 ff70 	bl	80085de <__retarget_lock_release_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	2b00      	cmp	r3, #0
 8007704:	da04      	bge.n	8007710 <_puts_r+0x84>
 8007706:	69a2      	ldr	r2, [r4, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	dc06      	bgt.n	800771a <_puts_r+0x8e>
 800770c:	290a      	cmp	r1, #10
 800770e:	d004      	beq.n	800771a <_puts_r+0x8e>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	7019      	strb	r1, [r3, #0]
 8007718:	e7cf      	b.n	80076ba <_puts_r+0x2e>
 800771a:	4622      	mov	r2, r4
 800771c:	4628      	mov	r0, r5
 800771e:	f000 f8d6 	bl	80078ce <__swbuf_r>
 8007722:	3001      	adds	r0, #1
 8007724:	d1c9      	bne.n	80076ba <_puts_r+0x2e>
 8007726:	e7df      	b.n	80076e8 <_puts_r+0x5c>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	250a      	movs	r5, #10
 800772c:	1c5a      	adds	r2, r3, #1
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	701d      	strb	r5, [r3, #0]
 8007732:	e7db      	b.n	80076ec <_puts_r+0x60>

08007734 <puts>:
 8007734:	4b02      	ldr	r3, [pc, #8]	; (8007740 <puts+0xc>)
 8007736:	4601      	mov	r1, r0
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	f7ff bfa7 	b.w	800768c <_puts_r>
 800773e:	bf00      	nop
 8007740:	20000074 	.word	0x20000074

08007744 <sniprintf>:
 8007744:	b40c      	push	{r2, r3}
 8007746:	b530      	push	{r4, r5, lr}
 8007748:	4b17      	ldr	r3, [pc, #92]	; (80077a8 <sniprintf+0x64>)
 800774a:	1e0c      	subs	r4, r1, #0
 800774c:	681d      	ldr	r5, [r3, #0]
 800774e:	b09d      	sub	sp, #116	; 0x74
 8007750:	da08      	bge.n	8007764 <sniprintf+0x20>
 8007752:	238b      	movs	r3, #139	; 0x8b
 8007754:	602b      	str	r3, [r5, #0]
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	b01d      	add	sp, #116	; 0x74
 800775c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007760:	b002      	add	sp, #8
 8007762:	4770      	bx	lr
 8007764:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007768:	f8ad 3014 	strh.w	r3, [sp, #20]
 800776c:	bf14      	ite	ne
 800776e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007772:	4623      	moveq	r3, r4
 8007774:	9304      	str	r3, [sp, #16]
 8007776:	9307      	str	r3, [sp, #28]
 8007778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800777c:	9002      	str	r0, [sp, #8]
 800777e:	9006      	str	r0, [sp, #24]
 8007780:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007784:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007786:	ab21      	add	r3, sp, #132	; 0x84
 8007788:	a902      	add	r1, sp, #8
 800778a:	4628      	mov	r0, r5
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	f003 fb39 	bl	800ae04 <_svfiprintf_r>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	bfbc      	itt	lt
 8007796:	238b      	movlt	r3, #139	; 0x8b
 8007798:	602b      	strlt	r3, [r5, #0]
 800779a:	2c00      	cmp	r4, #0
 800779c:	d0dd      	beq.n	800775a <sniprintf+0x16>
 800779e:	9b02      	ldr	r3, [sp, #8]
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e7d9      	b.n	800775a <sniprintf+0x16>
 80077a6:	bf00      	nop
 80077a8:	20000074 	.word	0x20000074

080077ac <siprintf>:
 80077ac:	b40e      	push	{r1, r2, r3}
 80077ae:	b500      	push	{lr}
 80077b0:	b09c      	sub	sp, #112	; 0x70
 80077b2:	ab1d      	add	r3, sp, #116	; 0x74
 80077b4:	9002      	str	r0, [sp, #8]
 80077b6:	9006      	str	r0, [sp, #24]
 80077b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80077bc:	4809      	ldr	r0, [pc, #36]	; (80077e4 <siprintf+0x38>)
 80077be:	9107      	str	r1, [sp, #28]
 80077c0:	9104      	str	r1, [sp, #16]
 80077c2:	4909      	ldr	r1, [pc, #36]	; (80077e8 <siprintf+0x3c>)
 80077c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80077c8:	9105      	str	r1, [sp, #20]
 80077ca:	6800      	ldr	r0, [r0, #0]
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	a902      	add	r1, sp, #8
 80077d0:	f003 fb18 	bl	800ae04 <_svfiprintf_r>
 80077d4:	9b02      	ldr	r3, [sp, #8]
 80077d6:	2200      	movs	r2, #0
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	b01c      	add	sp, #112	; 0x70
 80077dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e0:	b003      	add	sp, #12
 80077e2:	4770      	bx	lr
 80077e4:	20000074 	.word	0x20000074
 80077e8:	ffff0208 	.word	0xffff0208

080077ec <siscanf>:
 80077ec:	b40e      	push	{r1, r2, r3}
 80077ee:	b510      	push	{r4, lr}
 80077f0:	b09f      	sub	sp, #124	; 0x7c
 80077f2:	ac21      	add	r4, sp, #132	; 0x84
 80077f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80077f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80077fc:	9201      	str	r2, [sp, #4]
 80077fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007802:	9004      	str	r0, [sp, #16]
 8007804:	9008      	str	r0, [sp, #32]
 8007806:	f7f8 fd43 	bl	8000290 <strlen>
 800780a:	4b0c      	ldr	r3, [pc, #48]	; (800783c <siscanf+0x50>)
 800780c:	9005      	str	r0, [sp, #20]
 800780e:	9009      	str	r0, [sp, #36]	; 0x24
 8007810:	930d      	str	r3, [sp, #52]	; 0x34
 8007812:	480b      	ldr	r0, [pc, #44]	; (8007840 <siscanf+0x54>)
 8007814:	9a01      	ldr	r2, [sp, #4]
 8007816:	6800      	ldr	r0, [r0, #0]
 8007818:	9403      	str	r4, [sp, #12]
 800781a:	2300      	movs	r3, #0
 800781c:	9311      	str	r3, [sp, #68]	; 0x44
 800781e:	9316      	str	r3, [sp, #88]	; 0x58
 8007820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007824:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007828:	a904      	add	r1, sp, #16
 800782a:	4623      	mov	r3, r4
 800782c:	f003 fc42 	bl	800b0b4 <__ssvfiscanf_r>
 8007830:	b01f      	add	sp, #124	; 0x7c
 8007832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007836:	b003      	add	sp, #12
 8007838:	4770      	bx	lr
 800783a:	bf00      	nop
 800783c:	08007867 	.word	0x08007867
 8007840:	20000074 	.word	0x20000074

08007844 <__sread>:
 8007844:	b510      	push	{r4, lr}
 8007846:	460c      	mov	r4, r1
 8007848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800784c:	f000 fe76 	bl	800853c <_read_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	bfab      	itete	ge
 8007854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007856:	89a3      	ldrhlt	r3, [r4, #12]
 8007858:	181b      	addge	r3, r3, r0
 800785a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800785e:	bfac      	ite	ge
 8007860:	6563      	strge	r3, [r4, #84]	; 0x54
 8007862:	81a3      	strhlt	r3, [r4, #12]
 8007864:	bd10      	pop	{r4, pc}

08007866 <__seofread>:
 8007866:	2000      	movs	r0, #0
 8007868:	4770      	bx	lr

0800786a <__swrite>:
 800786a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800786e:	461f      	mov	r7, r3
 8007870:	898b      	ldrh	r3, [r1, #12]
 8007872:	05db      	lsls	r3, r3, #23
 8007874:	4605      	mov	r5, r0
 8007876:	460c      	mov	r4, r1
 8007878:	4616      	mov	r6, r2
 800787a:	d505      	bpl.n	8007888 <__swrite+0x1e>
 800787c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007880:	2302      	movs	r3, #2
 8007882:	2200      	movs	r2, #0
 8007884:	f000 fe48 	bl	8008518 <_lseek_r>
 8007888:	89a3      	ldrh	r3, [r4, #12]
 800788a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800788e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007892:	81a3      	strh	r3, [r4, #12]
 8007894:	4632      	mov	r2, r6
 8007896:	463b      	mov	r3, r7
 8007898:	4628      	mov	r0, r5
 800789a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789e:	f000 be5f 	b.w	8008560 <_write_r>

080078a2 <__sseek>:
 80078a2:	b510      	push	{r4, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078aa:	f000 fe35 	bl	8008518 <_lseek_r>
 80078ae:	1c43      	adds	r3, r0, #1
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	bf15      	itete	ne
 80078b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078be:	81a3      	strheq	r3, [r4, #12]
 80078c0:	bf18      	it	ne
 80078c2:	81a3      	strhne	r3, [r4, #12]
 80078c4:	bd10      	pop	{r4, pc}

080078c6 <__sclose>:
 80078c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ca:	f000 be15 	b.w	80084f8 <_close_r>

080078ce <__swbuf_r>:
 80078ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d0:	460e      	mov	r6, r1
 80078d2:	4614      	mov	r4, r2
 80078d4:	4605      	mov	r5, r0
 80078d6:	b118      	cbz	r0, 80078e0 <__swbuf_r+0x12>
 80078d8:	6a03      	ldr	r3, [r0, #32]
 80078da:	b90b      	cbnz	r3, 80078e0 <__swbuf_r+0x12>
 80078dc:	f7ff fea0 	bl	8007620 <__sinit>
 80078e0:	69a3      	ldr	r3, [r4, #24]
 80078e2:	60a3      	str	r3, [r4, #8]
 80078e4:	89a3      	ldrh	r3, [r4, #12]
 80078e6:	071a      	lsls	r2, r3, #28
 80078e8:	d525      	bpl.n	8007936 <__swbuf_r+0x68>
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	b31b      	cbz	r3, 8007936 <__swbuf_r+0x68>
 80078ee:	6823      	ldr	r3, [r4, #0]
 80078f0:	6922      	ldr	r2, [r4, #16]
 80078f2:	1a98      	subs	r0, r3, r2
 80078f4:	6963      	ldr	r3, [r4, #20]
 80078f6:	b2f6      	uxtb	r6, r6
 80078f8:	4283      	cmp	r3, r0
 80078fa:	4637      	mov	r7, r6
 80078fc:	dc04      	bgt.n	8007908 <__swbuf_r+0x3a>
 80078fe:	4621      	mov	r1, r4
 8007900:	4628      	mov	r0, r5
 8007902:	f003 ff23 	bl	800b74c <_fflush_r>
 8007906:	b9e0      	cbnz	r0, 8007942 <__swbuf_r+0x74>
 8007908:	68a3      	ldr	r3, [r4, #8]
 800790a:	3b01      	subs	r3, #1
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	6022      	str	r2, [r4, #0]
 8007914:	701e      	strb	r6, [r3, #0]
 8007916:	6962      	ldr	r2, [r4, #20]
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	429a      	cmp	r2, r3
 800791c:	d004      	beq.n	8007928 <__swbuf_r+0x5a>
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	07db      	lsls	r3, r3, #31
 8007922:	d506      	bpl.n	8007932 <__swbuf_r+0x64>
 8007924:	2e0a      	cmp	r6, #10
 8007926:	d104      	bne.n	8007932 <__swbuf_r+0x64>
 8007928:	4621      	mov	r1, r4
 800792a:	4628      	mov	r0, r5
 800792c:	f003 ff0e 	bl	800b74c <_fflush_r>
 8007930:	b938      	cbnz	r0, 8007942 <__swbuf_r+0x74>
 8007932:	4638      	mov	r0, r7
 8007934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007936:	4621      	mov	r1, r4
 8007938:	4628      	mov	r0, r5
 800793a:	f000 f805 	bl	8007948 <__swsetup_r>
 800793e:	2800      	cmp	r0, #0
 8007940:	d0d5      	beq.n	80078ee <__swbuf_r+0x20>
 8007942:	f04f 37ff 	mov.w	r7, #4294967295
 8007946:	e7f4      	b.n	8007932 <__swbuf_r+0x64>

08007948 <__swsetup_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4b2a      	ldr	r3, [pc, #168]	; (80079f4 <__swsetup_r+0xac>)
 800794c:	4605      	mov	r5, r0
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	460c      	mov	r4, r1
 8007952:	b118      	cbz	r0, 800795c <__swsetup_r+0x14>
 8007954:	6a03      	ldr	r3, [r0, #32]
 8007956:	b90b      	cbnz	r3, 800795c <__swsetup_r+0x14>
 8007958:	f7ff fe62 	bl	8007620 <__sinit>
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007962:	0718      	lsls	r0, r3, #28
 8007964:	d422      	bmi.n	80079ac <__swsetup_r+0x64>
 8007966:	06d9      	lsls	r1, r3, #27
 8007968:	d407      	bmi.n	800797a <__swsetup_r+0x32>
 800796a:	2309      	movs	r3, #9
 800796c:	602b      	str	r3, [r5, #0]
 800796e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007972:	81a3      	strh	r3, [r4, #12]
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e034      	b.n	80079e4 <__swsetup_r+0x9c>
 800797a:	0758      	lsls	r0, r3, #29
 800797c:	d512      	bpl.n	80079a4 <__swsetup_r+0x5c>
 800797e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007980:	b141      	cbz	r1, 8007994 <__swsetup_r+0x4c>
 8007982:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007986:	4299      	cmp	r1, r3
 8007988:	d002      	beq.n	8007990 <__swsetup_r+0x48>
 800798a:	4628      	mov	r0, r5
 800798c:	f001 fcd2 	bl	8009334 <_free_r>
 8007990:	2300      	movs	r3, #0
 8007992:	6363      	str	r3, [r4, #52]	; 0x34
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800799a:	81a3      	strh	r3, [r4, #12]
 800799c:	2300      	movs	r3, #0
 800799e:	6063      	str	r3, [r4, #4]
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	89a3      	ldrh	r3, [r4, #12]
 80079a6:	f043 0308 	orr.w	r3, r3, #8
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	b94b      	cbnz	r3, 80079c4 <__swsetup_r+0x7c>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ba:	d003      	beq.n	80079c4 <__swsetup_r+0x7c>
 80079bc:	4621      	mov	r1, r4
 80079be:	4628      	mov	r0, r5
 80079c0:	f003 ff12 	bl	800b7e8 <__smakebuf_r>
 80079c4:	89a0      	ldrh	r0, [r4, #12]
 80079c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079ca:	f010 0301 	ands.w	r3, r0, #1
 80079ce:	d00a      	beq.n	80079e6 <__swsetup_r+0x9e>
 80079d0:	2300      	movs	r3, #0
 80079d2:	60a3      	str	r3, [r4, #8]
 80079d4:	6963      	ldr	r3, [r4, #20]
 80079d6:	425b      	negs	r3, r3
 80079d8:	61a3      	str	r3, [r4, #24]
 80079da:	6923      	ldr	r3, [r4, #16]
 80079dc:	b943      	cbnz	r3, 80079f0 <__swsetup_r+0xa8>
 80079de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079e2:	d1c4      	bne.n	800796e <__swsetup_r+0x26>
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	0781      	lsls	r1, r0, #30
 80079e8:	bf58      	it	pl
 80079ea:	6963      	ldrpl	r3, [r4, #20]
 80079ec:	60a3      	str	r3, [r4, #8]
 80079ee:	e7f4      	b.n	80079da <__swsetup_r+0x92>
 80079f0:	2000      	movs	r0, #0
 80079f2:	e7f7      	b.n	80079e4 <__swsetup_r+0x9c>
 80079f4:	20000074 	.word	0x20000074

080079f8 <memset>:
 80079f8:	4402      	add	r2, r0
 80079fa:	4603      	mov	r3, r0
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d100      	bne.n	8007a02 <memset+0xa>
 8007a00:	4770      	bx	lr
 8007a02:	f803 1b01 	strb.w	r1, [r3], #1
 8007a06:	e7f9      	b.n	80079fc <memset+0x4>

08007a08 <strchr>:
 8007a08:	b2c9      	uxtb	r1, r1
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a10:	b11a      	cbz	r2, 8007a1a <strchr+0x12>
 8007a12:	428a      	cmp	r2, r1
 8007a14:	d1f9      	bne.n	8007a0a <strchr+0x2>
 8007a16:	4618      	mov	r0, r3
 8007a18:	4770      	bx	lr
 8007a1a:	2900      	cmp	r1, #0
 8007a1c:	bf18      	it	ne
 8007a1e:	2300      	movne	r3, #0
 8007a20:	e7f9      	b.n	8007a16 <strchr+0xe>

08007a22 <strncpy>:
 8007a22:	b510      	push	{r4, lr}
 8007a24:	3901      	subs	r1, #1
 8007a26:	4603      	mov	r3, r0
 8007a28:	b132      	cbz	r2, 8007a38 <strncpy+0x16>
 8007a2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a2e:	f803 4b01 	strb.w	r4, [r3], #1
 8007a32:	3a01      	subs	r2, #1
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	d1f7      	bne.n	8007a28 <strncpy+0x6>
 8007a38:	441a      	add	r2, r3
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d100      	bne.n	8007a42 <strncpy+0x20>
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	f803 1b01 	strb.w	r1, [r3], #1
 8007a46:	e7f9      	b.n	8007a3c <strncpy+0x1a>

08007a48 <difftime>:
 8007a48:	1a80      	subs	r0, r0, r2
 8007a4a:	b508      	push	{r3, lr}
 8007a4c:	eb61 0103 	sbc.w	r1, r1, r3
 8007a50:	f7f8 fdb4 	bl	80005bc <__aeabi_l2d>
 8007a54:	ec41 0b10 	vmov	d0, r0, r1
 8007a58:	bd08      	pop	{r3, pc}
	...

08007a5c <validate_structure>:
 8007a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a5e:	6801      	ldr	r1, [r0, #0]
 8007a60:	293b      	cmp	r1, #59	; 0x3b
 8007a62:	4604      	mov	r4, r0
 8007a64:	d911      	bls.n	8007a8a <validate_structure+0x2e>
 8007a66:	223c      	movs	r2, #60	; 0x3c
 8007a68:	4668      	mov	r0, sp
 8007a6a:	f000 fdd5 	bl	8008618 <div>
 8007a6e:	9a01      	ldr	r2, [sp, #4]
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	9900      	ldr	r1, [sp, #0]
 8007a74:	2a00      	cmp	r2, #0
 8007a76:	440b      	add	r3, r1
 8007a78:	6063      	str	r3, [r4, #4]
 8007a7a:	bfbb      	ittet	lt
 8007a7c:	323c      	addlt	r2, #60	; 0x3c
 8007a7e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007a82:	6022      	strge	r2, [r4, #0]
 8007a84:	6022      	strlt	r2, [r4, #0]
 8007a86:	bfb8      	it	lt
 8007a88:	6063      	strlt	r3, [r4, #4]
 8007a8a:	6861      	ldr	r1, [r4, #4]
 8007a8c:	293b      	cmp	r1, #59	; 0x3b
 8007a8e:	d911      	bls.n	8007ab4 <validate_structure+0x58>
 8007a90:	223c      	movs	r2, #60	; 0x3c
 8007a92:	4668      	mov	r0, sp
 8007a94:	f000 fdc0 	bl	8008618 <div>
 8007a98:	9a01      	ldr	r2, [sp, #4]
 8007a9a:	68a3      	ldr	r3, [r4, #8]
 8007a9c:	9900      	ldr	r1, [sp, #0]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	440b      	add	r3, r1
 8007aa2:	60a3      	str	r3, [r4, #8]
 8007aa4:	bfbb      	ittet	lt
 8007aa6:	323c      	addlt	r2, #60	; 0x3c
 8007aa8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007aac:	6062      	strge	r2, [r4, #4]
 8007aae:	6062      	strlt	r2, [r4, #4]
 8007ab0:	bfb8      	it	lt
 8007ab2:	60a3      	strlt	r3, [r4, #8]
 8007ab4:	68a1      	ldr	r1, [r4, #8]
 8007ab6:	2917      	cmp	r1, #23
 8007ab8:	d911      	bls.n	8007ade <validate_structure+0x82>
 8007aba:	2218      	movs	r2, #24
 8007abc:	4668      	mov	r0, sp
 8007abe:	f000 fdab 	bl	8008618 <div>
 8007ac2:	9a01      	ldr	r2, [sp, #4]
 8007ac4:	68e3      	ldr	r3, [r4, #12]
 8007ac6:	9900      	ldr	r1, [sp, #0]
 8007ac8:	2a00      	cmp	r2, #0
 8007aca:	440b      	add	r3, r1
 8007acc:	60e3      	str	r3, [r4, #12]
 8007ace:	bfbb      	ittet	lt
 8007ad0:	3218      	addlt	r2, #24
 8007ad2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007ad6:	60a2      	strge	r2, [r4, #8]
 8007ad8:	60a2      	strlt	r2, [r4, #8]
 8007ada:	bfb8      	it	lt
 8007adc:	60e3      	strlt	r3, [r4, #12]
 8007ade:	6921      	ldr	r1, [r4, #16]
 8007ae0:	290b      	cmp	r1, #11
 8007ae2:	d911      	bls.n	8007b08 <validate_structure+0xac>
 8007ae4:	220c      	movs	r2, #12
 8007ae6:	4668      	mov	r0, sp
 8007ae8:	f000 fd96 	bl	8008618 <div>
 8007aec:	9a01      	ldr	r2, [sp, #4]
 8007aee:	6963      	ldr	r3, [r4, #20]
 8007af0:	9900      	ldr	r1, [sp, #0]
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	440b      	add	r3, r1
 8007af6:	6163      	str	r3, [r4, #20]
 8007af8:	bfbb      	ittet	lt
 8007afa:	320c      	addlt	r2, #12
 8007afc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8007b00:	6122      	strge	r2, [r4, #16]
 8007b02:	6122      	strlt	r2, [r4, #16]
 8007b04:	bfb8      	it	lt
 8007b06:	6163      	strlt	r3, [r4, #20]
 8007b08:	6963      	ldr	r3, [r4, #20]
 8007b0a:	079a      	lsls	r2, r3, #30
 8007b0c:	d11e      	bne.n	8007b4c <validate_structure+0xf0>
 8007b0e:	2164      	movs	r1, #100	; 0x64
 8007b10:	fb93 f2f1 	sdiv	r2, r3, r1
 8007b14:	fb01 3212 	mls	r2, r1, r2, r3
 8007b18:	b9d2      	cbnz	r2, 8007b50 <validate_structure+0xf4>
 8007b1a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8007b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b22:	fb93 f1f2 	sdiv	r1, r3, r2
 8007b26:	fb02 3311 	mls	r3, r2, r1, r3
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	231c      	movne	r3, #28
 8007b30:	231d      	moveq	r3, #29
 8007b32:	68e2      	ldr	r2, [r4, #12]
 8007b34:	2a00      	cmp	r2, #0
 8007b36:	dc0d      	bgt.n	8007b54 <validate_structure+0xf8>
 8007b38:	4e32      	ldr	r6, [pc, #200]	; (8007c04 <validate_structure+0x1a8>)
 8007b3a:	250b      	movs	r5, #11
 8007b3c:	2164      	movs	r1, #100	; 0x64
 8007b3e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007b42:	68e7      	ldr	r7, [r4, #12]
 8007b44:	2f00      	cmp	r7, #0
 8007b46:	dd31      	ble.n	8007bac <validate_structure+0x150>
 8007b48:	b003      	add	sp, #12
 8007b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4c:	231c      	movs	r3, #28
 8007b4e:	e7f0      	b.n	8007b32 <validate_structure+0xd6>
 8007b50:	231d      	movs	r3, #29
 8007b52:	e7ee      	b.n	8007b32 <validate_structure+0xd6>
 8007b54:	4e2b      	ldr	r6, [pc, #172]	; (8007c04 <validate_structure+0x1a8>)
 8007b56:	2700      	movs	r7, #0
 8007b58:	2064      	movs	r0, #100	; 0x64
 8007b5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8007b5e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	bf14      	ite	ne
 8007b66:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8007b6a:	469c      	moveq	ip, r3
 8007b6c:	4561      	cmp	r1, ip
 8007b6e:	ddeb      	ble.n	8007b48 <validate_structure+0xec>
 8007b70:	3201      	adds	r2, #1
 8007b72:	eba1 010c 	sub.w	r1, r1, ip
 8007b76:	2a0c      	cmp	r2, #12
 8007b78:	60e1      	str	r1, [r4, #12]
 8007b7a:	6122      	str	r2, [r4, #16]
 8007b7c:	d1ef      	bne.n	8007b5e <validate_structure+0x102>
 8007b7e:	6963      	ldr	r3, [r4, #20]
 8007b80:	1c5a      	adds	r2, r3, #1
 8007b82:	0791      	lsls	r1, r2, #30
 8007b84:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8007b88:	d138      	bne.n	8007bfc <validate_structure+0x1a0>
 8007b8a:	fb92 f1f0 	sdiv	r1, r2, r0
 8007b8e:	fb00 2211 	mls	r2, r0, r1, r2
 8007b92:	2a00      	cmp	r2, #0
 8007b94:	d134      	bne.n	8007c00 <validate_structure+0x1a4>
 8007b96:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8007b9a:	fb93 f2f5 	sdiv	r2, r3, r5
 8007b9e:	fb05 3312 	mls	r3, r5, r2, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	bf14      	ite	ne
 8007ba6:	231c      	movne	r3, #28
 8007ba8:	231d      	moveq	r3, #29
 8007baa:	e7d8      	b.n	8007b5e <validate_structure+0x102>
 8007bac:	6922      	ldr	r2, [r4, #16]
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	6122      	str	r2, [r4, #16]
 8007bb2:	3201      	adds	r2, #1
 8007bb4:	d115      	bne.n	8007be2 <validate_structure+0x186>
 8007bb6:	6963      	ldr	r3, [r4, #20]
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	f012 0f03 	tst.w	r2, #3
 8007bbe:	e9c4 5204 	strd	r5, r2, [r4, #16]
 8007bc2:	d117      	bne.n	8007bf4 <validate_structure+0x198>
 8007bc4:	fb92 fcf1 	sdiv	ip, r2, r1
 8007bc8:	fb01 221c 	mls	r2, r1, ip, r2
 8007bcc:	b9a2      	cbnz	r2, 8007bf8 <validate_structure+0x19c>
 8007bce:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8007bd2:	fb93 f2f0 	sdiv	r2, r3, r0
 8007bd6:	fb00 3312 	mls	r3, r0, r2, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bf14      	ite	ne
 8007bde:	231c      	movne	r3, #28
 8007be0:	231d      	moveq	r3, #29
 8007be2:	6922      	ldr	r2, [r4, #16]
 8007be4:	2a01      	cmp	r2, #1
 8007be6:	bf14      	ite	ne
 8007be8:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 8007bec:	461a      	moveq	r2, r3
 8007bee:	443a      	add	r2, r7
 8007bf0:	60e2      	str	r2, [r4, #12]
 8007bf2:	e7a6      	b.n	8007b42 <validate_structure+0xe6>
 8007bf4:	231c      	movs	r3, #28
 8007bf6:	e7f4      	b.n	8007be2 <validate_structure+0x186>
 8007bf8:	231d      	movs	r3, #29
 8007bfa:	e7f2      	b.n	8007be2 <validate_structure+0x186>
 8007bfc:	231c      	movs	r3, #28
 8007bfe:	e7ae      	b.n	8007b5e <validate_structure+0x102>
 8007c00:	231d      	movs	r3, #29
 8007c02:	e7ac      	b.n	8007b5e <validate_structure+0x102>
 8007c04:	0800c870 	.word	0x0800c870

08007c08 <mktime>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	4607      	mov	r7, r0
 8007c10:	f003 fec6 	bl	800b9a0 <__gettzinfo>
 8007c14:	4681      	mov	r9, r0
 8007c16:	4638      	mov	r0, r7
 8007c18:	f7ff ff20 	bl	8007a5c <validate_structure>
 8007c1c:	e9d7 4300 	ldrd	r4, r3, [r7]
 8007c20:	223c      	movs	r2, #60	; 0x3c
 8007c22:	fb02 4403 	mla	r4, r2, r3, r4
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	697e      	ldr	r6, [r7, #20]
 8007c2a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8007c2e:	fb02 4403 	mla	r4, r2, r3, r4
 8007c32:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8007c36:	4abb      	ldr	r2, [pc, #748]	; (8007f24 <mktime+0x31c>)
 8007c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c3c:	3d01      	subs	r5, #1
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	4415      	add	r5, r2
 8007c42:	dd11      	ble.n	8007c68 <mktime+0x60>
 8007c44:	07b1      	lsls	r1, r6, #30
 8007c46:	d10f      	bne.n	8007c68 <mktime+0x60>
 8007c48:	2264      	movs	r2, #100	; 0x64
 8007c4a:	fb96 f3f2 	sdiv	r3, r6, r2
 8007c4e:	fb02 6313 	mls	r3, r2, r3, r6
 8007c52:	b943      	cbnz	r3, 8007c66 <mktime+0x5e>
 8007c54:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8007c58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007c5c:	fb93 f1f2 	sdiv	r1, r3, r2
 8007c60:	fb02 3311 	mls	r3, r2, r1, r3
 8007c64:	b903      	cbnz	r3, 8007c68 <mktime+0x60>
 8007c66:	3501      	adds	r5, #1
 8007c68:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8007c6c:	3310      	adds	r3, #16
 8007c6e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8007c72:	4293      	cmp	r3, r2
 8007c74:	61fd      	str	r5, [r7, #28]
 8007c76:	f200 815e 	bhi.w	8007f36 <mktime+0x32e>
 8007c7a:	2e46      	cmp	r6, #70	; 0x46
 8007c7c:	dd72      	ble.n	8007d64 <mktime+0x15c>
 8007c7e:	2346      	movs	r3, #70	; 0x46
 8007c80:	f240 1c6d 	movw	ip, #365	; 0x16d
 8007c84:	2164      	movs	r1, #100	; 0x64
 8007c86:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007c8a:	079a      	lsls	r2, r3, #30
 8007c8c:	d164      	bne.n	8007d58 <mktime+0x150>
 8007c8e:	fb93 f2f1 	sdiv	r2, r3, r1
 8007c92:	fb01 3212 	mls	r2, r1, r2, r3
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d161      	bne.n	8007d5e <mktime+0x156>
 8007c9a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8007c9e:	fb92 fef0 	sdiv	lr, r2, r0
 8007ca2:	fb00 221e 	mls	r2, r0, lr, r2
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	bf14      	ite	ne
 8007caa:	4662      	movne	r2, ip
 8007cac:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	429e      	cmp	r6, r3
 8007cb4:	4415      	add	r5, r2
 8007cb6:	d1e8      	bne.n	8007c8a <mktime+0x82>
 8007cb8:	4b9b      	ldr	r3, [pc, #620]	; (8007f28 <mktime+0x320>)
 8007cba:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8007cbe:	fbc5 4803 	smlal	r4, r8, r5, r3
 8007cc2:	f000 f9e3 	bl	800808c <__tz_lock>
 8007cc6:	f000 f9ed 	bl	80080a4 <_tzset_unlocked>
 8007cca:	4b98      	ldr	r3, [pc, #608]	; (8007f2c <mktime+0x324>)
 8007ccc:	f8d3 b000 	ldr.w	fp, [r3]
 8007cd0:	f1bb 0f00 	cmp.w	fp, #0
 8007cd4:	d03a      	beq.n	8007d4c <mktime+0x144>
 8007cd6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8007cda:	6978      	ldr	r0, [r7, #20]
 8007cdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007ce0:	f1bb 0f01 	cmp.w	fp, #1
 8007ce4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8007ce8:	46da      	mov	sl, fp
 8007cea:	bfa8      	it	ge
 8007cec:	f04f 0a01 	movge.w	sl, #1
 8007cf0:	4283      	cmp	r3, r0
 8007cf2:	d179      	bne.n	8007de8 <mktime+0x1e0>
 8007cf4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 8007cf8:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 8007cfc:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 8007d00:	1a13      	subs	r3, r2, r0
 8007d02:	9302      	str	r3, [sp, #8]
 8007d04:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 8007d08:	9303      	str	r3, [sp, #12]
 8007d0a:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8007d16:	ebb2 0e03 	subs.w	lr, r2, r3
 8007d1a:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 8007d1e:	4574      	cmp	r4, lr
 8007d20:	eb78 0201 	sbcs.w	r2, r8, r1
 8007d24:	da66      	bge.n	8007df4 <mktime+0x1ec>
 8007d26:	f8d9 2000 	ldr.w	r2, [r9]
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d06f      	beq.n	8007e0e <mktime+0x206>
 8007d2e:	9a02      	ldr	r2, [sp, #8]
 8007d30:	4294      	cmp	r4, r2
 8007d32:	9a03      	ldr	r2, [sp, #12]
 8007d34:	eb78 0202 	sbcs.w	r2, r8, r2
 8007d38:	db03      	blt.n	8007d42 <mktime+0x13a>
 8007d3a:	4574      	cmp	r4, lr
 8007d3c:	eb78 0101 	sbcs.w	r1, r8, r1
 8007d40:	db6b      	blt.n	8007e1a <mktime+0x212>
 8007d42:	f1bb 0f00 	cmp.w	fp, #0
 8007d46:	f04f 0b00 	mov.w	fp, #0
 8007d4a:	da6b      	bge.n	8007e24 <mktime+0x21c>
 8007d4c:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8007d50:	191c      	adds	r4, r3, r4
 8007d52:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007d56:	e0a9      	b.n	8007eac <mktime+0x2a4>
 8007d58:	f240 126d 	movw	r2, #365	; 0x16d
 8007d5c:	e7a8      	b.n	8007cb0 <mktime+0xa8>
 8007d5e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007d62:	e7a5      	b.n	8007cb0 <mktime+0xa8>
 8007d64:	d0a8      	beq.n	8007cb8 <mktime+0xb0>
 8007d66:	2345      	movs	r3, #69	; 0x45
 8007d68:	f240 1c6d 	movw	ip, #365	; 0x16d
 8007d6c:	2164      	movs	r1, #100	; 0x64
 8007d6e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007d72:	e012      	b.n	8007d9a <mktime+0x192>
 8007d74:	bb62      	cbnz	r2, 8007dd0 <mktime+0x1c8>
 8007d76:	fb93 f2f1 	sdiv	r2, r3, r1
 8007d7a:	fb01 3212 	mls	r2, r1, r2, r3
 8007d7e:	bb52      	cbnz	r2, 8007dd6 <mktime+0x1ce>
 8007d80:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8007d84:	fb92 fef0 	sdiv	lr, r2, r0
 8007d88:	fb00 221e 	mls	r2, r0, lr, r2
 8007d8c:	2a00      	cmp	r2, #0
 8007d8e:	bf14      	ite	ne
 8007d90:	4662      	movne	r2, ip
 8007d92:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8007d96:	1aad      	subs	r5, r5, r2
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	429e      	cmp	r6, r3
 8007d9c:	f003 0203 	and.w	r2, r3, #3
 8007da0:	dbe8      	blt.n	8007d74 <mktime+0x16c>
 8007da2:	b9da      	cbnz	r2, 8007ddc <mktime+0x1d4>
 8007da4:	2264      	movs	r2, #100	; 0x64
 8007da6:	fb96 f3f2 	sdiv	r3, r6, r2
 8007daa:	fb02 6313 	mls	r3, r2, r3, r6
 8007dae:	b9c3      	cbnz	r3, 8007de2 <mktime+0x1da>
 8007db0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8007db4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007db8:	fb93 f1f2 	sdiv	r1, r3, r2
 8007dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f240 136d 	movw	r3, #365	; 0x16d
 8007dc6:	bf08      	it	eq
 8007dc8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007dcc:	1aed      	subs	r5, r5, r3
 8007dce:	e773      	b.n	8007cb8 <mktime+0xb0>
 8007dd0:	f240 126d 	movw	r2, #365	; 0x16d
 8007dd4:	e7df      	b.n	8007d96 <mktime+0x18e>
 8007dd6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8007dda:	e7dc      	b.n	8007d96 <mktime+0x18e>
 8007ddc:	f240 136d 	movw	r3, #365	; 0x16d
 8007de0:	e7f4      	b.n	8007dcc <mktime+0x1c4>
 8007de2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007de6:	e7f1      	b.n	8007dcc <mktime+0x1c4>
 8007de8:	f000 f8aa 	bl	8007f40 <__tzcalc_limits>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d181      	bne.n	8007cf4 <mktime+0xec>
 8007df0:	46d3      	mov	fp, sl
 8007df2:	e050      	b.n	8007e96 <mktime+0x28e>
 8007df4:	9a01      	ldr	r2, [sp, #4]
 8007df6:	1a12      	subs	r2, r2, r0
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	ea4f 72e0 	mov.w	r2, r0, asr #31
 8007dfe:	eb6c 0c02 	sbc.w	ip, ip, r2
 8007e02:	9a01      	ldr	r2, [sp, #4]
 8007e04:	4294      	cmp	r4, r2
 8007e06:	eb78 0c0c 	sbcs.w	ip, r8, ip
 8007e0a:	dbf1      	blt.n	8007df0 <mktime+0x1e8>
 8007e0c:	e78b      	b.n	8007d26 <mktime+0x11e>
 8007e0e:	9a02      	ldr	r2, [sp, #8]
 8007e10:	4294      	cmp	r4, r2
 8007e12:	9a03      	ldr	r2, [sp, #12]
 8007e14:	eb78 0202 	sbcs.w	r2, r8, r2
 8007e18:	db8f      	blt.n	8007d3a <mktime+0x132>
 8007e1a:	f1bb 0f00 	cmp.w	fp, #0
 8007e1e:	db3e      	blt.n	8007e9e <mktime+0x296>
 8007e20:	f04f 0b01 	mov.w	fp, #1
 8007e24:	ea8a 0a0b 	eor.w	sl, sl, fp
 8007e28:	f1ba 0f01 	cmp.w	sl, #1
 8007e2c:	d133      	bne.n	8007e96 <mktime+0x28e>
 8007e2e:	f1bb 0f00 	cmp.w	fp, #0
 8007e32:	d04e      	beq.n	8007ed2 <mktime+0x2ca>
 8007e34:	1a1b      	subs	r3, r3, r0
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8007e3c:	441a      	add	r2, r3
 8007e3e:	191c      	adds	r4, r3, r4
 8007e40:	603a      	str	r2, [r7, #0]
 8007e42:	4638      	mov	r0, r7
 8007e44:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007e48:	f7ff fe08 	bl	8007a5c <validate_structure>
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	ebb2 020a 	subs.w	r2, r2, sl
 8007e52:	d020      	beq.n	8007e96 <mktime+0x28e>
 8007e54:	2a01      	cmp	r2, #1
 8007e56:	dc3e      	bgt.n	8007ed6 <mktime+0x2ce>
 8007e58:	1c91      	adds	r1, r2, #2
 8007e5a:	bfd8      	it	le
 8007e5c:	2201      	movle	r2, #1
 8007e5e:	69fb      	ldr	r3, [r7, #28]
 8007e60:	4415      	add	r5, r2
 8007e62:	18d2      	adds	r2, r2, r3
 8007e64:	d540      	bpl.n	8007ee8 <mktime+0x2e0>
 8007e66:	1e73      	subs	r3, r6, #1
 8007e68:	079a      	lsls	r2, r3, #30
 8007e6a:	d137      	bne.n	8007edc <mktime+0x2d4>
 8007e6c:	2264      	movs	r2, #100	; 0x64
 8007e6e:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e72:	fb02 3311 	mls	r3, r2, r1, r3
 8007e76:	bba3      	cbnz	r3, 8007ee2 <mktime+0x2da>
 8007e78:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007e7c:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8007e80:	fb96 f2f3 	sdiv	r2, r6, r3
 8007e84:	fb03 6612 	mls	r6, r3, r2, r6
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	f240 136d 	movw	r3, #365	; 0x16d
 8007e8e:	bf18      	it	ne
 8007e90:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8007e94:	61fb      	str	r3, [r7, #28]
 8007e96:	f1bb 0f01 	cmp.w	fp, #1
 8007e9a:	f47f af57 	bne.w	8007d4c <mktime+0x144>
 8007e9e:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 8007ea2:	191c      	adds	r4, r3, r4
 8007ea4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 8007ea8:	f04f 0b01 	mov.w	fp, #1
 8007eac:	f000 f8f4 	bl	8008098 <__tz_unlock>
 8007eb0:	3504      	adds	r5, #4
 8007eb2:	2307      	movs	r3, #7
 8007eb4:	fb95 f3f3 	sdiv	r3, r5, r3
 8007eb8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ebc:	1aed      	subs	r5, r5, r3
 8007ebe:	bf48      	it	mi
 8007ec0:	3507      	addmi	r5, #7
 8007ec2:	f8c7 b020 	str.w	fp, [r7, #32]
 8007ec6:	61bd      	str	r5, [r7, #24]
 8007ec8:	4620      	mov	r0, r4
 8007eca:	4641      	mov	r1, r8
 8007ecc:	b005      	add	sp, #20
 8007ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed2:	1ac3      	subs	r3, r0, r3
 8007ed4:	e7af      	b.n	8007e36 <mktime+0x22e>
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	e7c0      	b.n	8007e5e <mktime+0x256>
 8007edc:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8007ee0:	e7d8      	b.n	8007e94 <mktime+0x28c>
 8007ee2:	f240 136d 	movw	r3, #365	; 0x16d
 8007ee6:	e7d5      	b.n	8007e94 <mktime+0x28c>
 8007ee8:	07b3      	lsls	r3, r6, #30
 8007eea:	d118      	bne.n	8007f1e <mktime+0x316>
 8007eec:	2164      	movs	r1, #100	; 0x64
 8007eee:	fb96 f3f1 	sdiv	r3, r6, r1
 8007ef2:	fb01 6313 	mls	r3, r1, r3, r6
 8007ef6:	b9db      	cbnz	r3, 8007f30 <mktime+0x328>
 8007ef8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007efc:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8007f00:	fb96 f1f3 	sdiv	r1, r6, r3
 8007f04:	fb03 6611 	mls	r6, r3, r1, r6
 8007f08:	2e00      	cmp	r6, #0
 8007f0a:	f240 136d 	movw	r3, #365	; 0x16d
 8007f0e:	bf08      	it	eq
 8007f10:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8007f14:	429a      	cmp	r2, r3
 8007f16:	bfa8      	it	ge
 8007f18:	1ad2      	subge	r2, r2, r3
 8007f1a:	61fa      	str	r2, [r7, #28]
 8007f1c:	e7bb      	b.n	8007e96 <mktime+0x28e>
 8007f1e:	f240 136d 	movw	r3, #365	; 0x16d
 8007f22:	e7f7      	b.n	8007f14 <mktime+0x30c>
 8007f24:	0800c8a0 	.word	0x0800c8a0
 8007f28:	00015180 	.word	0x00015180
 8007f2c:	200009f8 	.word	0x200009f8
 8007f30:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8007f34:	e7ee      	b.n	8007f14 <mktime+0x30c>
 8007f36:	f04f 34ff 	mov.w	r4, #4294967295
 8007f3a:	46a0      	mov	r8, r4
 8007f3c:	e7c4      	b.n	8007ec8 <mktime+0x2c0>
 8007f3e:	bf00      	nop

08007f40 <__tzcalc_limits>:
 8007f40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f44:	4605      	mov	r5, r0
 8007f46:	f003 fd2b 	bl	800b9a0 <__gettzinfo>
 8007f4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	f340 8095 	ble.w	800807e <__tzcalc_limits+0x13e>
 8007f54:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8007f58:	18ac      	adds	r4, r5, r2
 8007f5a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8007f5e:	f240 126d 	movw	r2, #365	; 0x16d
 8007f62:	10a4      	asrs	r4, r4, #2
 8007f64:	fb02 4403 	mla	r4, r2, r3, r4
 8007f68:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007f6c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8007f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8007f74:	441c      	add	r4, r3
 8007f76:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007f7a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8007f7e:	fb95 fcf3 	sdiv	ip, r5, r3
 8007f82:	fb03 5c1c 	mls	ip, r3, ip, r5
 8007f86:	186a      	adds	r2, r5, r1
 8007f88:	fabc f68c 	clz	r6, ip
 8007f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007f90:	f005 0303 	and.w	r3, r5, #3
 8007f94:	4414      	add	r4, r2
 8007f96:	2264      	movs	r2, #100	; 0x64
 8007f98:	6045      	str	r5, [r0, #4]
 8007f9a:	fb95 f7f2 	sdiv	r7, r5, r2
 8007f9e:	0976      	lsrs	r6, r6, #5
 8007fa0:	fb02 5717 	mls	r7, r2, r7, r5
 8007fa4:	4601      	mov	r1, r0
 8007fa6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8007faa:	9300      	str	r3, [sp, #0]
 8007fac:	f04f 0a07 	mov.w	sl, #7
 8007fb0:	7a0d      	ldrb	r5, [r1, #8]
 8007fb2:	694b      	ldr	r3, [r1, #20]
 8007fb4:	2d4a      	cmp	r5, #74	; 0x4a
 8007fb6:	d12b      	bne.n	8008010 <__tzcalc_limits+0xd0>
 8007fb8:	9a00      	ldr	r2, [sp, #0]
 8007fba:	18e5      	adds	r5, r4, r3
 8007fbc:	b902      	cbnz	r2, 8007fc0 <__tzcalc_limits+0x80>
 8007fbe:	b917      	cbnz	r7, 8007fc6 <__tzcalc_limits+0x86>
 8007fc0:	f1bc 0f00 	cmp.w	ip, #0
 8007fc4:	d122      	bne.n	800800c <__tzcalc_limits+0xcc>
 8007fc6:	2b3b      	cmp	r3, #59	; 0x3b
 8007fc8:	bfd4      	ite	le
 8007fca:	2300      	movle	r3, #0
 8007fcc:	2301      	movgt	r3, #1
 8007fce:	442b      	add	r3, r5
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	698d      	ldr	r5, [r1, #24]
 8007fd4:	4a2b      	ldr	r2, [pc, #172]	; (8008084 <__tzcalc_limits+0x144>)
 8007fd6:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8007fda:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8007fde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007fe0:	18ed      	adds	r5, r5, r3
 8007fe2:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8007fe6:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8007fea:	3128      	adds	r1, #40	; 0x28
 8007fec:	458b      	cmp	fp, r1
 8007fee:	d1df      	bne.n	8007fb0 <__tzcalc_limits+0x70>
 8007ff0:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8007ff4:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 8007ff8:	428c      	cmp	r4, r1
 8007ffa:	4193      	sbcs	r3, r2
 8007ffc:	bfb4      	ite	lt
 8007ffe:	2301      	movlt	r3, #1
 8008000:	2300      	movge	r3, #0
 8008002:	6003      	str	r3, [r0, #0]
 8008004:	2001      	movs	r0, #1
 8008006:	b003      	add	sp, #12
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	2300      	movs	r3, #0
 800800e:	e7de      	b.n	8007fce <__tzcalc_limits+0x8e>
 8008010:	2d44      	cmp	r5, #68	; 0x44
 8008012:	d101      	bne.n	8008018 <__tzcalc_limits+0xd8>
 8008014:	4423      	add	r3, r4
 8008016:	e7dc      	b.n	8007fd2 <__tzcalc_limits+0x92>
 8008018:	9a00      	ldr	r2, [sp, #0]
 800801a:	bb52      	cbnz	r2, 8008072 <__tzcalc_limits+0x132>
 800801c:	2f00      	cmp	r7, #0
 800801e:	bf0c      	ite	eq
 8008020:	4635      	moveq	r5, r6
 8008022:	2501      	movne	r5, #1
 8008024:	68ca      	ldr	r2, [r1, #12]
 8008026:	9201      	str	r2, [sp, #4]
 8008028:	4a17      	ldr	r2, [pc, #92]	; (8008088 <__tzcalc_limits+0x148>)
 800802a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800802e:	fb09 2505 	mla	r5, r9, r5, r2
 8008032:	46a6      	mov	lr, r4
 8008034:	f04f 0800 	mov.w	r8, #0
 8008038:	3d04      	subs	r5, #4
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	f108 0801 	add.w	r8, r8, #1
 8008040:	4542      	cmp	r2, r8
 8008042:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8008046:	dc16      	bgt.n	8008076 <__tzcalc_limits+0x136>
 8008048:	f10e 0504 	add.w	r5, lr, #4
 800804c:	fb95 f8fa 	sdiv	r8, r5, sl
 8008050:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8008054:	eba5 0508 	sub.w	r5, r5, r8
 8008058:	1b5d      	subs	r5, r3, r5
 800805a:	690b      	ldr	r3, [r1, #16]
 800805c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008060:	bf48      	it	mi
 8008062:	3507      	addmi	r5, #7
 8008064:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8008068:	442b      	add	r3, r5
 800806a:	454b      	cmp	r3, r9
 800806c:	da05      	bge.n	800807a <__tzcalc_limits+0x13a>
 800806e:	4473      	add	r3, lr
 8008070:	e7af      	b.n	8007fd2 <__tzcalc_limits+0x92>
 8008072:	4635      	mov	r5, r6
 8008074:	e7d6      	b.n	8008024 <__tzcalc_limits+0xe4>
 8008076:	44ce      	add	lr, r9
 8008078:	e7df      	b.n	800803a <__tzcalc_limits+0xfa>
 800807a:	3b07      	subs	r3, #7
 800807c:	e7f5      	b.n	800806a <__tzcalc_limits+0x12a>
 800807e:	2000      	movs	r0, #0
 8008080:	e7c1      	b.n	8008006 <__tzcalc_limits+0xc6>
 8008082:	bf00      	nop
 8008084:	00015180 	.word	0x00015180
 8008088:	0800cc88 	.word	0x0800cc88

0800808c <__tz_lock>:
 800808c:	4801      	ldr	r0, [pc, #4]	; (8008094 <__tz_lock+0x8>)
 800808e:	f000 baa3 	b.w	80085d8 <__retarget_lock_acquire>
 8008092:	bf00      	nop
 8008094:	20000a07 	.word	0x20000a07

08008098 <__tz_unlock>:
 8008098:	4801      	ldr	r0, [pc, #4]	; (80080a0 <__tz_unlock+0x8>)
 800809a:	f000 ba9f 	b.w	80085dc <__retarget_lock_release>
 800809e:	bf00      	nop
 80080a0:	20000a07 	.word	0x20000a07

080080a4 <_tzset_unlocked>:
 80080a4:	4b01      	ldr	r3, [pc, #4]	; (80080ac <_tzset_unlocked+0x8>)
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	f000 b802 	b.w	80080b0 <_tzset_unlocked_r>
 80080ac:	20000074 	.word	0x20000074

080080b0 <_tzset_unlocked_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	b08d      	sub	sp, #52	; 0x34
 80080b6:	4607      	mov	r7, r0
 80080b8:	f003 fc72 	bl	800b9a0 <__gettzinfo>
 80080bc:	49bb      	ldr	r1, [pc, #748]	; (80083ac <_tzset_unlocked_r+0x2fc>)
 80080be:	4dbc      	ldr	r5, [pc, #752]	; (80083b0 <_tzset_unlocked_r+0x300>)
 80080c0:	4604      	mov	r4, r0
 80080c2:	4638      	mov	r0, r7
 80080c4:	f001 f9be 	bl	8009444 <_getenv_r>
 80080c8:	4606      	mov	r6, r0
 80080ca:	bb10      	cbnz	r0, 8008112 <_tzset_unlocked_r+0x62>
 80080cc:	4bb9      	ldr	r3, [pc, #740]	; (80083b4 <_tzset_unlocked_r+0x304>)
 80080ce:	4aba      	ldr	r2, [pc, #744]	; (80083b8 <_tzset_unlocked_r+0x308>)
 80080d0:	6018      	str	r0, [r3, #0]
 80080d2:	4bba      	ldr	r3, [pc, #744]	; (80083bc <_tzset_unlocked_r+0x30c>)
 80080d4:	62a0      	str	r0, [r4, #40]	; 0x28
 80080d6:	6018      	str	r0, [r3, #0]
 80080d8:	4bb9      	ldr	r3, [pc, #740]	; (80083c0 <_tzset_unlocked_r+0x310>)
 80080da:	6520      	str	r0, [r4, #80]	; 0x50
 80080dc:	e9c3 2200 	strd	r2, r2, [r3]
 80080e0:	214a      	movs	r1, #74	; 0x4a
 80080e2:	2200      	movs	r2, #0
 80080e4:	2300      	movs	r3, #0
 80080e6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 80080ea:	e9c4 0005 	strd	r0, r0, [r4, #20]
 80080ee:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 80080f2:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80080f6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80080fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080fe:	6828      	ldr	r0, [r5, #0]
 8008100:	7221      	strb	r1, [r4, #8]
 8008102:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8008106:	f001 f9ad 	bl	8009464 <free>
 800810a:	602e      	str	r6, [r5, #0]
 800810c:	b00d      	add	sp, #52	; 0x34
 800810e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008112:	6829      	ldr	r1, [r5, #0]
 8008114:	2900      	cmp	r1, #0
 8008116:	f040 808e 	bne.w	8008236 <_tzset_unlocked_r+0x186>
 800811a:	6828      	ldr	r0, [r5, #0]
 800811c:	f001 f9a2 	bl	8009464 <free>
 8008120:	4630      	mov	r0, r6
 8008122:	f7f8 f8b5 	bl	8000290 <strlen>
 8008126:	1c41      	adds	r1, r0, #1
 8008128:	4638      	mov	r0, r7
 800812a:	f001 f9c3 	bl	80094b4 <_malloc_r>
 800812e:	6028      	str	r0, [r5, #0]
 8008130:	2800      	cmp	r0, #0
 8008132:	f040 8086 	bne.w	8008242 <_tzset_unlocked_r+0x192>
 8008136:	4aa1      	ldr	r2, [pc, #644]	; (80083bc <_tzset_unlocked_r+0x30c>)
 8008138:	f8df 8284 	ldr.w	r8, [pc, #644]	; 80083c0 <_tzset_unlocked_r+0x310>
 800813c:	f8df a274 	ldr.w	sl, [pc, #628]	; 80083b4 <_tzset_unlocked_r+0x304>
 8008140:	2300      	movs	r3, #0
 8008142:	6013      	str	r3, [r2, #0]
 8008144:	4a9f      	ldr	r2, [pc, #636]	; (80083c4 <_tzset_unlocked_r+0x314>)
 8008146:	f8ca 3000 	str.w	r3, [sl]
 800814a:	2000      	movs	r0, #0
 800814c:	2100      	movs	r1, #0
 800814e:	e9c8 2200 	strd	r2, r2, [r8]
 8008152:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008156:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800815a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800815e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8008162:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8008166:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800816a:	224a      	movs	r2, #74	; 0x4a
 800816c:	7222      	strb	r2, [r4, #8]
 800816e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008170:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8008174:	6523      	str	r3, [r4, #80]	; 0x50
 8008176:	7833      	ldrb	r3, [r6, #0]
 8008178:	2b3a      	cmp	r3, #58	; 0x3a
 800817a:	bf08      	it	eq
 800817c:	3601      	addeq	r6, #1
 800817e:	7833      	ldrb	r3, [r6, #0]
 8008180:	2b3c      	cmp	r3, #60	; 0x3c
 8008182:	d162      	bne.n	800824a <_tzset_unlocked_r+0x19a>
 8008184:	1c75      	adds	r5, r6, #1
 8008186:	4a90      	ldr	r2, [pc, #576]	; (80083c8 <_tzset_unlocked_r+0x318>)
 8008188:	4990      	ldr	r1, [pc, #576]	; (80083cc <_tzset_unlocked_r+0x31c>)
 800818a:	ab0a      	add	r3, sp, #40	; 0x28
 800818c:	4628      	mov	r0, r5
 800818e:	f7ff fb2d 	bl	80077ec <siscanf>
 8008192:	2800      	cmp	r0, #0
 8008194:	ddba      	ble.n	800810c <_tzset_unlocked_r+0x5c>
 8008196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008198:	1eda      	subs	r2, r3, #3
 800819a:	2a07      	cmp	r2, #7
 800819c:	d8b6      	bhi.n	800810c <_tzset_unlocked_r+0x5c>
 800819e:	5ceb      	ldrb	r3, [r5, r3]
 80081a0:	2b3e      	cmp	r3, #62	; 0x3e
 80081a2:	d1b3      	bne.n	800810c <_tzset_unlocked_r+0x5c>
 80081a4:	3602      	adds	r6, #2
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	18f5      	adds	r5, r6, r3
 80081aa:	5cf3      	ldrb	r3, [r6, r3]
 80081ac:	2b2d      	cmp	r3, #45	; 0x2d
 80081ae:	d15a      	bne.n	8008266 <_tzset_unlocked_r+0x1b6>
 80081b0:	3501      	adds	r5, #1
 80081b2:	f04f 39ff 	mov.w	r9, #4294967295
 80081b6:	2300      	movs	r3, #0
 80081b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80081bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80081c0:	af08      	add	r7, sp, #32
 80081c2:	ab0a      	add	r3, sp, #40	; 0x28
 80081c4:	e9cd 3701 	strd	r3, r7, [sp, #4]
 80081c8:	9303      	str	r3, [sp, #12]
 80081ca:	f10d 031e 	add.w	r3, sp, #30
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	497f      	ldr	r1, [pc, #508]	; (80083d0 <_tzset_unlocked_r+0x320>)
 80081d2:	ab0a      	add	r3, sp, #40	; 0x28
 80081d4:	aa07      	add	r2, sp, #28
 80081d6:	4628      	mov	r0, r5
 80081d8:	f7ff fb08 	bl	80077ec <siscanf>
 80081dc:	2800      	cmp	r0, #0
 80081de:	dd95      	ble.n	800810c <_tzset_unlocked_r+0x5c>
 80081e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80081e4:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 80081e8:	223c      	movs	r2, #60	; 0x3c
 80081ea:	fb02 6603 	mla	r6, r2, r3, r6
 80081ee:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80081f2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80081f6:	fb02 6603 	mla	r6, r2, r3, r6
 80081fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081fc:	fb09 f606 	mul.w	r6, r9, r6
 8008200:	eb05 0903 	add.w	r9, r5, r3
 8008204:	5ceb      	ldrb	r3, [r5, r3]
 8008206:	2b3c      	cmp	r3, #60	; 0x3c
 8008208:	f040 80ec 	bne.w	80083e4 <_tzset_unlocked_r+0x334>
 800820c:	f109 0501 	add.w	r5, r9, #1
 8008210:	4a70      	ldr	r2, [pc, #448]	; (80083d4 <_tzset_unlocked_r+0x324>)
 8008212:	496e      	ldr	r1, [pc, #440]	; (80083cc <_tzset_unlocked_r+0x31c>)
 8008214:	ab0a      	add	r3, sp, #40	; 0x28
 8008216:	4628      	mov	r0, r5
 8008218:	f7ff fae8 	bl	80077ec <siscanf>
 800821c:	2800      	cmp	r0, #0
 800821e:	dc28      	bgt.n	8008272 <_tzset_unlocked_r+0x1c2>
 8008220:	f899 3001 	ldrb.w	r3, [r9, #1]
 8008224:	2b3e      	cmp	r3, #62	; 0x3e
 8008226:	d124      	bne.n	8008272 <_tzset_unlocked_r+0x1c2>
 8008228:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <_tzset_unlocked_r+0x318>)
 800822a:	62a6      	str	r6, [r4, #40]	; 0x28
 800822c:	e9c8 3300 	strd	r3, r3, [r8]
 8008230:	f8ca 6000 	str.w	r6, [sl]
 8008234:	e76a      	b.n	800810c <_tzset_unlocked_r+0x5c>
 8008236:	f7f7 ffcb 	bl	80001d0 <strcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	f47f af6d 	bne.w	800811a <_tzset_unlocked_r+0x6a>
 8008240:	e764      	b.n	800810c <_tzset_unlocked_r+0x5c>
 8008242:	4631      	mov	r1, r6
 8008244:	f000 f9cc 	bl	80085e0 <strcpy>
 8008248:	e775      	b.n	8008136 <_tzset_unlocked_r+0x86>
 800824a:	4a5f      	ldr	r2, [pc, #380]	; (80083c8 <_tzset_unlocked_r+0x318>)
 800824c:	4962      	ldr	r1, [pc, #392]	; (80083d8 <_tzset_unlocked_r+0x328>)
 800824e:	ab0a      	add	r3, sp, #40	; 0x28
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff facb 	bl	80077ec <siscanf>
 8008256:	2800      	cmp	r0, #0
 8008258:	f77f af58 	ble.w	800810c <_tzset_unlocked_r+0x5c>
 800825c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800825e:	3b03      	subs	r3, #3
 8008260:	2b07      	cmp	r3, #7
 8008262:	d9a0      	bls.n	80081a6 <_tzset_unlocked_r+0xf6>
 8008264:	e752      	b.n	800810c <_tzset_unlocked_r+0x5c>
 8008266:	2b2b      	cmp	r3, #43	; 0x2b
 8008268:	bf08      	it	eq
 800826a:	3501      	addeq	r5, #1
 800826c:	f04f 0901 	mov.w	r9, #1
 8008270:	e7a1      	b.n	80081b6 <_tzset_unlocked_r+0x106>
 8008272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008274:	1eda      	subs	r2, r3, #3
 8008276:	2a07      	cmp	r2, #7
 8008278:	f63f af48 	bhi.w	800810c <_tzset_unlocked_r+0x5c>
 800827c:	5ceb      	ldrb	r3, [r5, r3]
 800827e:	2b3e      	cmp	r3, #62	; 0x3e
 8008280:	f47f af44 	bne.w	800810c <_tzset_unlocked_r+0x5c>
 8008284:	f109 0902 	add.w	r9, r9, #2
 8008288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828a:	eb09 0503 	add.w	r5, r9, r3
 800828e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008292:	2b2d      	cmp	r3, #45	; 0x2d
 8008294:	f040 80b5 	bne.w	8008402 <_tzset_unlocked_r+0x352>
 8008298:	3501      	adds	r5, #1
 800829a:	f04f 39ff 	mov.w	r9, #4294967295
 800829e:	2300      	movs	r3, #0
 80082a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80082a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80082a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80082ac:	930a      	str	r3, [sp, #40]	; 0x28
 80082ae:	ab0a      	add	r3, sp, #40	; 0x28
 80082b0:	e9cd 7302 	strd	r7, r3, [sp, #8]
 80082b4:	9301      	str	r3, [sp, #4]
 80082b6:	f10d 031e 	add.w	r3, sp, #30
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4944      	ldr	r1, [pc, #272]	; (80083d0 <_tzset_unlocked_r+0x320>)
 80082be:	ab0a      	add	r3, sp, #40	; 0x28
 80082c0:	aa07      	add	r2, sp, #28
 80082c2:	4628      	mov	r0, r5
 80082c4:	f7ff fa92 	bl	80077ec <siscanf>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	f300 80a0 	bgt.w	800840e <_tzset_unlocked_r+0x35e>
 80082ce:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082d6:	4627      	mov	r7, r4
 80082d8:	441d      	add	r5, r3
 80082da:	f04f 0b00 	mov.w	fp, #0
 80082de:	782b      	ldrb	r3, [r5, #0]
 80082e0:	2b2c      	cmp	r3, #44	; 0x2c
 80082e2:	bf08      	it	eq
 80082e4:	3501      	addeq	r5, #1
 80082e6:	f895 9000 	ldrb.w	r9, [r5]
 80082ea:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 80082ee:	f040 80a1 	bne.w	8008434 <_tzset_unlocked_r+0x384>
 80082f2:	ab0a      	add	r3, sp, #40	; 0x28
 80082f4:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 80082f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80082fc:	aa09      	add	r2, sp, #36	; 0x24
 80082fe:	9200      	str	r2, [sp, #0]
 8008300:	4936      	ldr	r1, [pc, #216]	; (80083dc <_tzset_unlocked_r+0x32c>)
 8008302:	9303      	str	r3, [sp, #12]
 8008304:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8008308:	4628      	mov	r0, r5
 800830a:	f7ff fa6f 	bl	80077ec <siscanf>
 800830e:	2803      	cmp	r0, #3
 8008310:	f47f aefc 	bne.w	800810c <_tzset_unlocked_r+0x5c>
 8008314:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8008318:	1e4b      	subs	r3, r1, #1
 800831a:	2b0b      	cmp	r3, #11
 800831c:	f63f aef6 	bhi.w	800810c <_tzset_unlocked_r+0x5c>
 8008320:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8008324:	1e53      	subs	r3, r2, #1
 8008326:	2b04      	cmp	r3, #4
 8008328:	f63f aef0 	bhi.w	800810c <_tzset_unlocked_r+0x5c>
 800832c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8008330:	2b06      	cmp	r3, #6
 8008332:	f63f aeeb 	bhi.w	800810c <_tzset_unlocked_r+0x5c>
 8008336:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800833a:	f887 9008 	strb.w	r9, [r7, #8]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008342:	eb05 0903 	add.w	r9, r5, r3
 8008346:	2500      	movs	r5, #0
 8008348:	2302      	movs	r3, #2
 800834a:	f8ad 301c 	strh.w	r3, [sp, #28]
 800834e:	f8ad 501e 	strh.w	r5, [sp, #30]
 8008352:	f8ad 5020 	strh.w	r5, [sp, #32]
 8008356:	950a      	str	r5, [sp, #40]	; 0x28
 8008358:	f899 3000 	ldrb.w	r3, [r9]
 800835c:	2b2f      	cmp	r3, #47	; 0x2f
 800835e:	f040 8095 	bne.w	800848c <_tzset_unlocked_r+0x3dc>
 8008362:	ab0a      	add	r3, sp, #40	; 0x28
 8008364:	aa08      	add	r2, sp, #32
 8008366:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800836a:	f10d 021e 	add.w	r2, sp, #30
 800836e:	9200      	str	r2, [sp, #0]
 8008370:	491b      	ldr	r1, [pc, #108]	; (80083e0 <_tzset_unlocked_r+0x330>)
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	aa07      	add	r2, sp, #28
 8008376:	4648      	mov	r0, r9
 8008378:	f7ff fa38 	bl	80077ec <siscanf>
 800837c:	42a8      	cmp	r0, r5
 800837e:	f300 8085 	bgt.w	800848c <_tzset_unlocked_r+0x3dc>
 8008382:	214a      	movs	r1, #74	; 0x4a
 8008384:	2200      	movs	r2, #0
 8008386:	2300      	movs	r3, #0
 8008388:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800838c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008390:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8008394:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008398:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800839c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083a0:	7221      	strb	r1, [r4, #8]
 80083a2:	62a5      	str	r5, [r4, #40]	; 0x28
 80083a4:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 80083a8:	6525      	str	r5, [r4, #80]	; 0x50
 80083aa:	e6af      	b.n	800810c <_tzset_unlocked_r+0x5c>
 80083ac:	0800c8d0 	.word	0x0800c8d0
 80083b0:	200009f4 	.word	0x200009f4
 80083b4:	200009fc 	.word	0x200009fc
 80083b8:	0800c8d3 	.word	0x0800c8d3
 80083bc:	200009f8 	.word	0x200009f8
 80083c0:	20000020 	.word	0x20000020
 80083c4:	0800cd2b 	.word	0x0800cd2b
 80083c8:	200009e8 	.word	0x200009e8
 80083cc:	0800c8d7 	.word	0x0800c8d7
 80083d0:	0800c90c 	.word	0x0800c90c
 80083d4:	200009dc 	.word	0x200009dc
 80083d8:	0800c8ea 	.word	0x0800c8ea
 80083dc:	0800c8f8 	.word	0x0800c8f8
 80083e0:	0800c90b 	.word	0x0800c90b
 80083e4:	4a3e      	ldr	r2, [pc, #248]	; (80084e0 <_tzset_unlocked_r+0x430>)
 80083e6:	493f      	ldr	r1, [pc, #252]	; (80084e4 <_tzset_unlocked_r+0x434>)
 80083e8:	ab0a      	add	r3, sp, #40	; 0x28
 80083ea:	4648      	mov	r0, r9
 80083ec:	f7ff f9fe 	bl	80077ec <siscanf>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f77f af19 	ble.w	8008228 <_tzset_unlocked_r+0x178>
 80083f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f8:	3b03      	subs	r3, #3
 80083fa:	2b07      	cmp	r3, #7
 80083fc:	f67f af44 	bls.w	8008288 <_tzset_unlocked_r+0x1d8>
 8008400:	e684      	b.n	800810c <_tzset_unlocked_r+0x5c>
 8008402:	2b2b      	cmp	r3, #43	; 0x2b
 8008404:	bf08      	it	eq
 8008406:	3501      	addeq	r5, #1
 8008408:	f04f 0901 	mov.w	r9, #1
 800840c:	e747      	b.n	800829e <_tzset_unlocked_r+0x1ee>
 800840e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008412:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008416:	213c      	movs	r1, #60	; 0x3c
 8008418:	fb01 3302 	mla	r3, r1, r2, r3
 800841c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8008420:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8008424:	fb01 3302 	mla	r3, r1, r2, r3
 8008428:	fb09 f303 	mul.w	r3, r9, r3
 800842c:	e751      	b.n	80082d2 <_tzset_unlocked_r+0x222>
 800842e:	f04f 0b01 	mov.w	fp, #1
 8008432:	e754      	b.n	80082de <_tzset_unlocked_r+0x22e>
 8008434:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 8008438:	bf06      	itte	eq
 800843a:	3501      	addeq	r5, #1
 800843c:	464b      	moveq	r3, r9
 800843e:	2344      	movne	r3, #68	; 0x44
 8008440:	220a      	movs	r2, #10
 8008442:	a90b      	add	r1, sp, #44	; 0x2c
 8008444:	4628      	mov	r0, r5
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	f002 fc78 	bl	800ad3c <strtoul>
 800844c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8008450:	9b05      	ldr	r3, [sp, #20]
 8008452:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8008456:	45a9      	cmp	r9, r5
 8008458:	d114      	bne.n	8008484 <_tzset_unlocked_r+0x3d4>
 800845a:	234d      	movs	r3, #77	; 0x4d
 800845c:	f1bb 0f00 	cmp.w	fp, #0
 8008460:	d107      	bne.n	8008472 <_tzset_unlocked_r+0x3c2>
 8008462:	7223      	strb	r3, [r4, #8]
 8008464:	2103      	movs	r1, #3
 8008466:	2302      	movs	r3, #2
 8008468:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800846c:	f8c4 b014 	str.w	fp, [r4, #20]
 8008470:	e769      	b.n	8008346 <_tzset_unlocked_r+0x296>
 8008472:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8008476:	220b      	movs	r2, #11
 8008478:	2301      	movs	r3, #1
 800847a:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800847e:	2300      	movs	r3, #0
 8008480:	63e3      	str	r3, [r4, #60]	; 0x3c
 8008482:	e760      	b.n	8008346 <_tzset_unlocked_r+0x296>
 8008484:	b280      	uxth	r0, r0
 8008486:	723b      	strb	r3, [r7, #8]
 8008488:	6178      	str	r0, [r7, #20]
 800848a:	e75c      	b.n	8008346 <_tzset_unlocked_r+0x296>
 800848c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8008490:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8008494:	213c      	movs	r1, #60	; 0x3c
 8008496:	fb01 3302 	mla	r3, r1, r2, r3
 800849a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800849e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80084a2:	fb01 3302 	mla	r3, r1, r2, r3
 80084a6:	61bb      	str	r3, [r7, #24]
 80084a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084aa:	3728      	adds	r7, #40	; 0x28
 80084ac:	444d      	add	r5, r9
 80084ae:	f1bb 0f00 	cmp.w	fp, #0
 80084b2:	d0bc      	beq.n	800842e <_tzset_unlocked_r+0x37e>
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	6523      	str	r3, [r4, #80]	; 0x50
 80084b8:	4b0b      	ldr	r3, [pc, #44]	; (80084e8 <_tzset_unlocked_r+0x438>)
 80084ba:	f8c8 3000 	str.w	r3, [r8]
 80084be:	6860      	ldr	r0, [r4, #4]
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <_tzset_unlocked_r+0x430>)
 80084c2:	62a6      	str	r6, [r4, #40]	; 0x28
 80084c4:	f8c8 3004 	str.w	r3, [r8, #4]
 80084c8:	f7ff fd3a 	bl	8007f40 <__tzcalc_limits>
 80084cc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80084ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80084d0:	f8ca 2000 	str.w	r2, [sl]
 80084d4:	1a9b      	subs	r3, r3, r2
 80084d6:	4a05      	ldr	r2, [pc, #20]	; (80084ec <_tzset_unlocked_r+0x43c>)
 80084d8:	bf18      	it	ne
 80084da:	2301      	movne	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
 80084de:	e615      	b.n	800810c <_tzset_unlocked_r+0x5c>
 80084e0:	200009dc 	.word	0x200009dc
 80084e4:	0800c8ea 	.word	0x0800c8ea
 80084e8:	200009e8 	.word	0x200009e8
 80084ec:	200009f8 	.word	0x200009f8

080084f0 <_localeconv_r>:
 80084f0:	4800      	ldr	r0, [pc, #0]	; (80084f4 <_localeconv_r+0x4>)
 80084f2:	4770      	bx	lr
 80084f4:	200001c0 	.word	0x200001c0

080084f8 <_close_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d06      	ldr	r5, [pc, #24]	; (8008514 <_close_r+0x1c>)
 80084fc:	2300      	movs	r3, #0
 80084fe:	4604      	mov	r4, r0
 8008500:	4608      	mov	r0, r1
 8008502:	602b      	str	r3, [r5, #0]
 8008504:	f7fa f901 	bl	800270a <_close>
 8008508:	1c43      	adds	r3, r0, #1
 800850a:	d102      	bne.n	8008512 <_close_r+0x1a>
 800850c:	682b      	ldr	r3, [r5, #0]
 800850e:	b103      	cbz	r3, 8008512 <_close_r+0x1a>
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	bd38      	pop	{r3, r4, r5, pc}
 8008514:	20000a00 	.word	0x20000a00

08008518 <_lseek_r>:
 8008518:	b538      	push	{r3, r4, r5, lr}
 800851a:	4d07      	ldr	r5, [pc, #28]	; (8008538 <_lseek_r+0x20>)
 800851c:	4604      	mov	r4, r0
 800851e:	4608      	mov	r0, r1
 8008520:	4611      	mov	r1, r2
 8008522:	2200      	movs	r2, #0
 8008524:	602a      	str	r2, [r5, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f7fa f916 	bl	8002758 <_lseek>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d102      	bne.n	8008536 <_lseek_r+0x1e>
 8008530:	682b      	ldr	r3, [r5, #0]
 8008532:	b103      	cbz	r3, 8008536 <_lseek_r+0x1e>
 8008534:	6023      	str	r3, [r4, #0]
 8008536:	bd38      	pop	{r3, r4, r5, pc}
 8008538:	20000a00 	.word	0x20000a00

0800853c <_read_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d07      	ldr	r5, [pc, #28]	; (800855c <_read_r+0x20>)
 8008540:	4604      	mov	r4, r0
 8008542:	4608      	mov	r0, r1
 8008544:	4611      	mov	r1, r2
 8008546:	2200      	movs	r2, #0
 8008548:	602a      	str	r2, [r5, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	f7fa f8a4 	bl	8002698 <_read>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_read_r+0x1e>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_read_r+0x1e>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	20000a00 	.word	0x20000a00

08008560 <_write_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	; (8008580 <_write_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7fa f8af 	bl	80026d2 <_write>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_write_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_write_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	20000a00 	.word	0x20000a00

08008584 <__errno>:
 8008584:	4b01      	ldr	r3, [pc, #4]	; (800858c <__errno+0x8>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	20000074 	.word	0x20000074

08008590 <__libc_init_array>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4d0d      	ldr	r5, [pc, #52]	; (80085c8 <__libc_init_array+0x38>)
 8008594:	4c0d      	ldr	r4, [pc, #52]	; (80085cc <__libc_init_array+0x3c>)
 8008596:	1b64      	subs	r4, r4, r5
 8008598:	10a4      	asrs	r4, r4, #2
 800859a:	2600      	movs	r6, #0
 800859c:	42a6      	cmp	r6, r4
 800859e:	d109      	bne.n	80085b4 <__libc_init_array+0x24>
 80085a0:	4d0b      	ldr	r5, [pc, #44]	; (80085d0 <__libc_init_array+0x40>)
 80085a2:	4c0c      	ldr	r4, [pc, #48]	; (80085d4 <__libc_init_array+0x44>)
 80085a4:	f003 ffca 	bl	800c53c <_init>
 80085a8:	1b64      	subs	r4, r4, r5
 80085aa:	10a4      	asrs	r4, r4, #2
 80085ac:	2600      	movs	r6, #0
 80085ae:	42a6      	cmp	r6, r4
 80085b0:	d105      	bne.n	80085be <__libc_init_array+0x2e>
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085b8:	4798      	blx	r3
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7ee      	b.n	800859c <__libc_init_array+0xc>
 80085be:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c2:	4798      	blx	r3
 80085c4:	3601      	adds	r6, #1
 80085c6:	e7f2      	b.n	80085ae <__libc_init_array+0x1e>
 80085c8:	0800cd94 	.word	0x0800cd94
 80085cc:	0800cd94 	.word	0x0800cd94
 80085d0:	0800cd94 	.word	0x0800cd94
 80085d4:	0800cd98 	.word	0x0800cd98

080085d8 <__retarget_lock_acquire>:
 80085d8:	4770      	bx	lr

080085da <__retarget_lock_acquire_recursive>:
 80085da:	4770      	bx	lr

080085dc <__retarget_lock_release>:
 80085dc:	4770      	bx	lr

080085de <__retarget_lock_release_recursive>:
 80085de:	4770      	bx	lr

080085e0 <strcpy>:
 80085e0:	4603      	mov	r3, r0
 80085e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085e6:	f803 2b01 	strb.w	r2, [r3], #1
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d1f9      	bne.n	80085e2 <strcpy+0x2>
 80085ee:	4770      	bx	lr

080085f0 <memcpy>:
 80085f0:	440a      	add	r2, r1
 80085f2:	4291      	cmp	r1, r2
 80085f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80085f8:	d100      	bne.n	80085fc <memcpy+0xc>
 80085fa:	4770      	bx	lr
 80085fc:	b510      	push	{r4, lr}
 80085fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008606:	4291      	cmp	r1, r2
 8008608:	d1f9      	bne.n	80085fe <memcpy+0xe>
 800860a:	bd10      	pop	{r4, pc}

0800860c <nanf>:
 800860c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008614 <nanf+0x8>
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	7fc00000 	.word	0x7fc00000

08008618 <div>:
 8008618:	2900      	cmp	r1, #0
 800861a:	b510      	push	{r4, lr}
 800861c:	fb91 f4f2 	sdiv	r4, r1, r2
 8008620:	fb02 1314 	mls	r3, r2, r4, r1
 8008624:	db06      	blt.n	8008634 <div+0x1c>
 8008626:	2b00      	cmp	r3, #0
 8008628:	da01      	bge.n	800862e <div+0x16>
 800862a:	3401      	adds	r4, #1
 800862c:	1a9b      	subs	r3, r3, r2
 800862e:	e9c0 4300 	strd	r4, r3, [r0]
 8008632:	bd10      	pop	{r4, pc}
 8008634:	2b00      	cmp	r3, #0
 8008636:	bfc4      	itt	gt
 8008638:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800863c:	189b      	addgt	r3, r3, r2
 800863e:	e7f6      	b.n	800862e <div+0x16>

08008640 <quorem>:
 8008640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	6903      	ldr	r3, [r0, #16]
 8008646:	690c      	ldr	r4, [r1, #16]
 8008648:	42a3      	cmp	r3, r4
 800864a:	4607      	mov	r7, r0
 800864c:	db7e      	blt.n	800874c <quorem+0x10c>
 800864e:	3c01      	subs	r4, #1
 8008650:	f101 0814 	add.w	r8, r1, #20
 8008654:	f100 0514 	add.w	r5, r0, #20
 8008658:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008662:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008666:	3301      	adds	r3, #1
 8008668:	429a      	cmp	r2, r3
 800866a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800866e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008672:	fbb2 f6f3 	udiv	r6, r2, r3
 8008676:	d331      	bcc.n	80086dc <quorem+0x9c>
 8008678:	f04f 0e00 	mov.w	lr, #0
 800867c:	4640      	mov	r0, r8
 800867e:	46ac      	mov	ip, r5
 8008680:	46f2      	mov	sl, lr
 8008682:	f850 2b04 	ldr.w	r2, [r0], #4
 8008686:	b293      	uxth	r3, r2
 8008688:	fb06 e303 	mla	r3, r6, r3, lr
 800868c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008690:	0c1a      	lsrs	r2, r3, #16
 8008692:	b29b      	uxth	r3, r3
 8008694:	ebaa 0303 	sub.w	r3, sl, r3
 8008698:	f8dc a000 	ldr.w	sl, [ip]
 800869c:	fa13 f38a 	uxtah	r3, r3, sl
 80086a0:	fb06 220e 	mla	r2, r6, lr, r2
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	9b00      	ldr	r3, [sp, #0]
 80086a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80086ac:	b292      	uxth	r2, r2
 80086ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80086b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80086ba:	4581      	cmp	r9, r0
 80086bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086c0:	f84c 3b04 	str.w	r3, [ip], #4
 80086c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086c8:	d2db      	bcs.n	8008682 <quorem+0x42>
 80086ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80086ce:	b92b      	cbnz	r3, 80086dc <quorem+0x9c>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	3b04      	subs	r3, #4
 80086d4:	429d      	cmp	r5, r3
 80086d6:	461a      	mov	r2, r3
 80086d8:	d32c      	bcc.n	8008734 <quorem+0xf4>
 80086da:	613c      	str	r4, [r7, #16]
 80086dc:	4638      	mov	r0, r7
 80086de:	f001 fa3b 	bl	8009b58 <__mcmp>
 80086e2:	2800      	cmp	r0, #0
 80086e4:	db22      	blt.n	800872c <quorem+0xec>
 80086e6:	3601      	adds	r6, #1
 80086e8:	4629      	mov	r1, r5
 80086ea:	2000      	movs	r0, #0
 80086ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80086f0:	f8d1 c000 	ldr.w	ip, [r1]
 80086f4:	b293      	uxth	r3, r2
 80086f6:	1ac3      	subs	r3, r0, r3
 80086f8:	0c12      	lsrs	r2, r2, #16
 80086fa:	fa13 f38c 	uxtah	r3, r3, ip
 80086fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008706:	b29b      	uxth	r3, r3
 8008708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800870c:	45c1      	cmp	r9, r8
 800870e:	f841 3b04 	str.w	r3, [r1], #4
 8008712:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008716:	d2e9      	bcs.n	80086ec <quorem+0xac>
 8008718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800871c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008720:	b922      	cbnz	r2, 800872c <quorem+0xec>
 8008722:	3b04      	subs	r3, #4
 8008724:	429d      	cmp	r5, r3
 8008726:	461a      	mov	r2, r3
 8008728:	d30a      	bcc.n	8008740 <quorem+0x100>
 800872a:	613c      	str	r4, [r7, #16]
 800872c:	4630      	mov	r0, r6
 800872e:	b003      	add	sp, #12
 8008730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	6812      	ldr	r2, [r2, #0]
 8008736:	3b04      	subs	r3, #4
 8008738:	2a00      	cmp	r2, #0
 800873a:	d1ce      	bne.n	80086da <quorem+0x9a>
 800873c:	3c01      	subs	r4, #1
 800873e:	e7c9      	b.n	80086d4 <quorem+0x94>
 8008740:	6812      	ldr	r2, [r2, #0]
 8008742:	3b04      	subs	r3, #4
 8008744:	2a00      	cmp	r2, #0
 8008746:	d1f0      	bne.n	800872a <quorem+0xea>
 8008748:	3c01      	subs	r4, #1
 800874a:	e7eb      	b.n	8008724 <quorem+0xe4>
 800874c:	2000      	movs	r0, #0
 800874e:	e7ee      	b.n	800872e <quorem+0xee>

08008750 <_dtoa_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	ed2d 8b04 	vpush	{d8-d9}
 8008758:	69c5      	ldr	r5, [r0, #28]
 800875a:	b093      	sub	sp, #76	; 0x4c
 800875c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008760:	ec57 6b10 	vmov	r6, r7, d0
 8008764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008768:	9107      	str	r1, [sp, #28]
 800876a:	4604      	mov	r4, r0
 800876c:	920a      	str	r2, [sp, #40]	; 0x28
 800876e:	930d      	str	r3, [sp, #52]	; 0x34
 8008770:	b975      	cbnz	r5, 8008790 <_dtoa_r+0x40>
 8008772:	2010      	movs	r0, #16
 8008774:	f000 fe6e 	bl	8009454 <malloc>
 8008778:	4602      	mov	r2, r0
 800877a:	61e0      	str	r0, [r4, #28]
 800877c:	b920      	cbnz	r0, 8008788 <_dtoa_r+0x38>
 800877e:	4bae      	ldr	r3, [pc, #696]	; (8008a38 <_dtoa_r+0x2e8>)
 8008780:	21ef      	movs	r1, #239	; 0xef
 8008782:	48ae      	ldr	r0, [pc, #696]	; (8008a3c <_dtoa_r+0x2ec>)
 8008784:	f003 f94c 	bl	800ba20 <__assert_func>
 8008788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800878c:	6005      	str	r5, [r0, #0]
 800878e:	60c5      	str	r5, [r0, #12]
 8008790:	69e3      	ldr	r3, [r4, #28]
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	b151      	cbz	r1, 80087ac <_dtoa_r+0x5c>
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	604a      	str	r2, [r1, #4]
 800879a:	2301      	movs	r3, #1
 800879c:	4093      	lsls	r3, r2
 800879e:	608b      	str	r3, [r1, #8]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 ff53 	bl	800964c <_Bfree>
 80087a6:	69e3      	ldr	r3, [r4, #28]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	1e3b      	subs	r3, r7, #0
 80087ae:	bfbb      	ittet	lt
 80087b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	9303      	strlt	r3, [sp, #12]
 80087b6:	2300      	movge	r3, #0
 80087b8:	2201      	movlt	r2, #1
 80087ba:	bfac      	ite	ge
 80087bc:	f8c8 3000 	strge.w	r3, [r8]
 80087c0:	f8c8 2000 	strlt.w	r2, [r8]
 80087c4:	4b9e      	ldr	r3, [pc, #632]	; (8008a40 <_dtoa_r+0x2f0>)
 80087c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80087ca:	ea33 0308 	bics.w	r3, r3, r8
 80087ce:	d11b      	bne.n	8008808 <_dtoa_r+0xb8>
 80087d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80087dc:	4333      	orrs	r3, r6
 80087de:	f000 8593 	beq.w	8009308 <_dtoa_r+0xbb8>
 80087e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e4:	b963      	cbnz	r3, 8008800 <_dtoa_r+0xb0>
 80087e6:	4b97      	ldr	r3, [pc, #604]	; (8008a44 <_dtoa_r+0x2f4>)
 80087e8:	e027      	b.n	800883a <_dtoa_r+0xea>
 80087ea:	4b97      	ldr	r3, [pc, #604]	; (8008a48 <_dtoa_r+0x2f8>)
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	9800      	ldr	r0, [sp, #0]
 80087f6:	b013      	add	sp, #76	; 0x4c
 80087f8:	ecbd 8b04 	vpop	{d8-d9}
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	4b90      	ldr	r3, [pc, #576]	; (8008a44 <_dtoa_r+0x2f4>)
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	3303      	adds	r3, #3
 8008806:	e7f3      	b.n	80087f0 <_dtoa_r+0xa0>
 8008808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	ec51 0b17 	vmov	r0, r1, d7
 8008812:	eeb0 8a47 	vmov.f32	s16, s14
 8008816:	eef0 8a67 	vmov.f32	s17, s15
 800881a:	2300      	movs	r3, #0
 800881c:	f7f8 f964 	bl	8000ae8 <__aeabi_dcmpeq>
 8008820:	4681      	mov	r9, r0
 8008822:	b160      	cbz	r0, 800883e <_dtoa_r+0xee>
 8008824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008826:	2301      	movs	r3, #1
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8568 	beq.w	8009302 <_dtoa_r+0xbb2>
 8008832:	4b86      	ldr	r3, [pc, #536]	; (8008a4c <_dtoa_r+0x2fc>)
 8008834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008836:	6013      	str	r3, [r2, #0]
 8008838:	3b01      	subs	r3, #1
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	e7da      	b.n	80087f4 <_dtoa_r+0xa4>
 800883e:	aa10      	add	r2, sp, #64	; 0x40
 8008840:	a911      	add	r1, sp, #68	; 0x44
 8008842:	4620      	mov	r0, r4
 8008844:	eeb0 0a48 	vmov.f32	s0, s16
 8008848:	eef0 0a68 	vmov.f32	s1, s17
 800884c:	f001 fa9a 	bl	8009d84 <__d2b>
 8008850:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008854:	4682      	mov	sl, r0
 8008856:	2d00      	cmp	r5, #0
 8008858:	d07f      	beq.n	800895a <_dtoa_r+0x20a>
 800885a:	ee18 3a90 	vmov	r3, s17
 800885e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008862:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008866:	ec51 0b18 	vmov	r0, r1, d8
 800886a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800886e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008872:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008876:	4619      	mov	r1, r3
 8008878:	2200      	movs	r2, #0
 800887a:	4b75      	ldr	r3, [pc, #468]	; (8008a50 <_dtoa_r+0x300>)
 800887c:	f7f7 fd14 	bl	80002a8 <__aeabi_dsub>
 8008880:	a367      	add	r3, pc, #412	; (adr r3, 8008a20 <_dtoa_r+0x2d0>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f7f7 fec7 	bl	8000618 <__aeabi_dmul>
 800888a:	a367      	add	r3, pc, #412	; (adr r3, 8008a28 <_dtoa_r+0x2d8>)
 800888c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008890:	f7f7 fd0c 	bl	80002ac <__adddf3>
 8008894:	4606      	mov	r6, r0
 8008896:	4628      	mov	r0, r5
 8008898:	460f      	mov	r7, r1
 800889a:	f7f7 fe53 	bl	8000544 <__aeabi_i2d>
 800889e:	a364      	add	r3, pc, #400	; (adr r3, 8008a30 <_dtoa_r+0x2e0>)
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f7f7 feb8 	bl	8000618 <__aeabi_dmul>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4630      	mov	r0, r6
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f7 fcfc 	bl	80002ac <__adddf3>
 80088b4:	4606      	mov	r6, r0
 80088b6:	460f      	mov	r7, r1
 80088b8:	f7f8 f95e 	bl	8000b78 <__aeabi_d2iz>
 80088bc:	2200      	movs	r2, #0
 80088be:	4683      	mov	fp, r0
 80088c0:	2300      	movs	r3, #0
 80088c2:	4630      	mov	r0, r6
 80088c4:	4639      	mov	r1, r7
 80088c6:	f7f8 f919 	bl	8000afc <__aeabi_dcmplt>
 80088ca:	b148      	cbz	r0, 80088e0 <_dtoa_r+0x190>
 80088cc:	4658      	mov	r0, fp
 80088ce:	f7f7 fe39 	bl	8000544 <__aeabi_i2d>
 80088d2:	4632      	mov	r2, r6
 80088d4:	463b      	mov	r3, r7
 80088d6:	f7f8 f907 	bl	8000ae8 <__aeabi_dcmpeq>
 80088da:	b908      	cbnz	r0, 80088e0 <_dtoa_r+0x190>
 80088dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80088e0:	f1bb 0f16 	cmp.w	fp, #22
 80088e4:	d857      	bhi.n	8008996 <_dtoa_r+0x246>
 80088e6:	4b5b      	ldr	r3, [pc, #364]	; (8008a54 <_dtoa_r+0x304>)
 80088e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	ec51 0b18 	vmov	r0, r1, d8
 80088f4:	f7f8 f902 	bl	8000afc <__aeabi_dcmplt>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d04e      	beq.n	800899a <_dtoa_r+0x24a>
 80088fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008900:	2300      	movs	r3, #0
 8008902:	930c      	str	r3, [sp, #48]	; 0x30
 8008904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008906:	1b5b      	subs	r3, r3, r5
 8008908:	1e5a      	subs	r2, r3, #1
 800890a:	bf45      	ittet	mi
 800890c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008910:	9305      	strmi	r3, [sp, #20]
 8008912:	2300      	movpl	r3, #0
 8008914:	2300      	movmi	r3, #0
 8008916:	9206      	str	r2, [sp, #24]
 8008918:	bf54      	ite	pl
 800891a:	9305      	strpl	r3, [sp, #20]
 800891c:	9306      	strmi	r3, [sp, #24]
 800891e:	f1bb 0f00 	cmp.w	fp, #0
 8008922:	db3c      	blt.n	800899e <_dtoa_r+0x24e>
 8008924:	9b06      	ldr	r3, [sp, #24]
 8008926:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800892a:	445b      	add	r3, fp
 800892c:	9306      	str	r3, [sp, #24]
 800892e:	2300      	movs	r3, #0
 8008930:	9308      	str	r3, [sp, #32]
 8008932:	9b07      	ldr	r3, [sp, #28]
 8008934:	2b09      	cmp	r3, #9
 8008936:	d868      	bhi.n	8008a0a <_dtoa_r+0x2ba>
 8008938:	2b05      	cmp	r3, #5
 800893a:	bfc4      	itt	gt
 800893c:	3b04      	subgt	r3, #4
 800893e:	9307      	strgt	r3, [sp, #28]
 8008940:	9b07      	ldr	r3, [sp, #28]
 8008942:	f1a3 0302 	sub.w	r3, r3, #2
 8008946:	bfcc      	ite	gt
 8008948:	2500      	movgt	r5, #0
 800894a:	2501      	movle	r5, #1
 800894c:	2b03      	cmp	r3, #3
 800894e:	f200 8085 	bhi.w	8008a5c <_dtoa_r+0x30c>
 8008952:	e8df f003 	tbb	[pc, r3]
 8008956:	3b2e      	.short	0x3b2e
 8008958:	5839      	.short	0x5839
 800895a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800895e:	441d      	add	r5, r3
 8008960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008964:	2b20      	cmp	r3, #32
 8008966:	bfc1      	itttt	gt
 8008968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800896c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008970:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008974:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008978:	bfd6      	itet	le
 800897a:	f1c3 0320 	rsble	r3, r3, #32
 800897e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008982:	fa06 f003 	lslle.w	r0, r6, r3
 8008986:	f7f7 fdcd 	bl	8000524 <__aeabi_ui2d>
 800898a:	2201      	movs	r2, #1
 800898c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008990:	3d01      	subs	r5, #1
 8008992:	920e      	str	r2, [sp, #56]	; 0x38
 8008994:	e76f      	b.n	8008876 <_dtoa_r+0x126>
 8008996:	2301      	movs	r3, #1
 8008998:	e7b3      	b.n	8008902 <_dtoa_r+0x1b2>
 800899a:	900c      	str	r0, [sp, #48]	; 0x30
 800899c:	e7b2      	b.n	8008904 <_dtoa_r+0x1b4>
 800899e:	9b05      	ldr	r3, [sp, #20]
 80089a0:	eba3 030b 	sub.w	r3, r3, fp
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	f1cb 0300 	rsb	r3, fp, #0
 80089aa:	9308      	str	r3, [sp, #32]
 80089ac:	2300      	movs	r3, #0
 80089ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80089b0:	e7bf      	b.n	8008932 <_dtoa_r+0x1e2>
 80089b2:	2300      	movs	r3, #0
 80089b4:	9309      	str	r3, [sp, #36]	; 0x24
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	dc52      	bgt.n	8008a62 <_dtoa_r+0x312>
 80089bc:	2301      	movs	r3, #1
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	9304      	str	r3, [sp, #16]
 80089c2:	461a      	mov	r2, r3
 80089c4:	920a      	str	r2, [sp, #40]	; 0x28
 80089c6:	e00b      	b.n	80089e0 <_dtoa_r+0x290>
 80089c8:	2301      	movs	r3, #1
 80089ca:	e7f3      	b.n	80089b4 <_dtoa_r+0x264>
 80089cc:	2300      	movs	r3, #0
 80089ce:	9309      	str	r3, [sp, #36]	; 0x24
 80089d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089d2:	445b      	add	r3, fp
 80089d4:	9301      	str	r3, [sp, #4]
 80089d6:	3301      	adds	r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	bfb8      	it	lt
 80089de:	2301      	movlt	r3, #1
 80089e0:	69e0      	ldr	r0, [r4, #28]
 80089e2:	2100      	movs	r1, #0
 80089e4:	2204      	movs	r2, #4
 80089e6:	f102 0614 	add.w	r6, r2, #20
 80089ea:	429e      	cmp	r6, r3
 80089ec:	d93d      	bls.n	8008a6a <_dtoa_r+0x31a>
 80089ee:	6041      	str	r1, [r0, #4]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fdeb 	bl	80095cc <_Balloc>
 80089f6:	9000      	str	r0, [sp, #0]
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d139      	bne.n	8008a70 <_dtoa_r+0x320>
 80089fc:	4b16      	ldr	r3, [pc, #88]	; (8008a58 <_dtoa_r+0x308>)
 80089fe:	4602      	mov	r2, r0
 8008a00:	f240 11af 	movw	r1, #431	; 0x1af
 8008a04:	e6bd      	b.n	8008782 <_dtoa_r+0x32>
 8008a06:	2301      	movs	r3, #1
 8008a08:	e7e1      	b.n	80089ce <_dtoa_r+0x27e>
 8008a0a:	2501      	movs	r5, #1
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	9307      	str	r3, [sp, #28]
 8008a10:	9509      	str	r5, [sp, #36]	; 0x24
 8008a12:	f04f 33ff 	mov.w	r3, #4294967295
 8008a16:	9301      	str	r3, [sp, #4]
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2312      	movs	r3, #18
 8008a1e:	e7d1      	b.n	80089c4 <_dtoa_r+0x274>
 8008a20:	636f4361 	.word	0x636f4361
 8008a24:	3fd287a7 	.word	0x3fd287a7
 8008a28:	8b60c8b3 	.word	0x8b60c8b3
 8008a2c:	3fc68a28 	.word	0x3fc68a28
 8008a30:	509f79fb 	.word	0x509f79fb
 8008a34:	3fd34413 	.word	0x3fd34413
 8008a38:	0800c92b 	.word	0x0800c92b
 8008a3c:	0800c942 	.word	0x0800c942
 8008a40:	7ff00000 	.word	0x7ff00000
 8008a44:	0800c927 	.word	0x0800c927
 8008a48:	0800c91e 	.word	0x0800c91e
 8008a4c:	0800cc81 	.word	0x0800cc81
 8008a50:	3ff80000 	.word	0x3ff80000
 8008a54:	0800ca30 	.word	0x0800ca30
 8008a58:	0800c99a 	.word	0x0800c99a
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a60:	e7d7      	b.n	8008a12 <_dtoa_r+0x2c2>
 8008a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	e7ba      	b.n	80089e0 <_dtoa_r+0x290>
 8008a6a:	3101      	adds	r1, #1
 8008a6c:	0052      	lsls	r2, r2, #1
 8008a6e:	e7ba      	b.n	80089e6 <_dtoa_r+0x296>
 8008a70:	69e3      	ldr	r3, [r4, #28]
 8008a72:	9a00      	ldr	r2, [sp, #0]
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	9b04      	ldr	r3, [sp, #16]
 8008a78:	2b0e      	cmp	r3, #14
 8008a7a:	f200 80a8 	bhi.w	8008bce <_dtoa_r+0x47e>
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	f000 80a5 	beq.w	8008bce <_dtoa_r+0x47e>
 8008a84:	f1bb 0f00 	cmp.w	fp, #0
 8008a88:	dd38      	ble.n	8008afc <_dtoa_r+0x3ac>
 8008a8a:	4bc0      	ldr	r3, [pc, #768]	; (8008d8c <_dtoa_r+0x63c>)
 8008a8c:	f00b 020f 	and.w	r2, fp, #15
 8008a90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008a98:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008a9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008aa0:	d019      	beq.n	8008ad6 <_dtoa_r+0x386>
 8008aa2:	4bbb      	ldr	r3, [pc, #748]	; (8008d90 <_dtoa_r+0x640>)
 8008aa4:	ec51 0b18 	vmov	r0, r1, d8
 8008aa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008aac:	f7f7 fede 	bl	800086c <__aeabi_ddiv>
 8008ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab4:	f008 080f 	and.w	r8, r8, #15
 8008ab8:	2503      	movs	r5, #3
 8008aba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008d90 <_dtoa_r+0x640>
 8008abe:	f1b8 0f00 	cmp.w	r8, #0
 8008ac2:	d10a      	bne.n	8008ada <_dtoa_r+0x38a>
 8008ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac8:	4632      	mov	r2, r6
 8008aca:	463b      	mov	r3, r7
 8008acc:	f7f7 fece 	bl	800086c <__aeabi_ddiv>
 8008ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad4:	e02b      	b.n	8008b2e <_dtoa_r+0x3de>
 8008ad6:	2502      	movs	r5, #2
 8008ad8:	e7ef      	b.n	8008aba <_dtoa_r+0x36a>
 8008ada:	f018 0f01 	tst.w	r8, #1
 8008ade:	d008      	beq.n	8008af2 <_dtoa_r+0x3a2>
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	4639      	mov	r1, r7
 8008ae4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008ae8:	f7f7 fd96 	bl	8000618 <__aeabi_dmul>
 8008aec:	3501      	adds	r5, #1
 8008aee:	4606      	mov	r6, r0
 8008af0:	460f      	mov	r7, r1
 8008af2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008af6:	f109 0908 	add.w	r9, r9, #8
 8008afa:	e7e0      	b.n	8008abe <_dtoa_r+0x36e>
 8008afc:	f000 809f 	beq.w	8008c3e <_dtoa_r+0x4ee>
 8008b00:	f1cb 0600 	rsb	r6, fp, #0
 8008b04:	4ba1      	ldr	r3, [pc, #644]	; (8008d8c <_dtoa_r+0x63c>)
 8008b06:	4fa2      	ldr	r7, [pc, #648]	; (8008d90 <_dtoa_r+0x640>)
 8008b08:	f006 020f 	and.w	r2, r6, #15
 8008b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	ec51 0b18 	vmov	r0, r1, d8
 8008b18:	f7f7 fd7e 	bl	8000618 <__aeabi_dmul>
 8008b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b20:	1136      	asrs	r6, r6, #4
 8008b22:	2300      	movs	r3, #0
 8008b24:	2502      	movs	r5, #2
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	d17e      	bne.n	8008c28 <_dtoa_r+0x4d8>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d1d0      	bne.n	8008ad0 <_dtoa_r+0x380>
 8008b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 8084 	beq.w	8008c42 <_dtoa_r+0x4f2>
 8008b3a:	4b96      	ldr	r3, [pc, #600]	; (8008d94 <_dtoa_r+0x644>)
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	f7f7 ffdb 	bl	8000afc <__aeabi_dcmplt>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d07b      	beq.n	8008c42 <_dtoa_r+0x4f2>
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d078      	beq.n	8008c42 <_dtoa_r+0x4f2>
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dd39      	ble.n	8008bca <_dtoa_r+0x47a>
 8008b56:	4b90      	ldr	r3, [pc, #576]	; (8008d98 <_dtoa_r+0x648>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fd5b 	bl	8000618 <__aeabi_dmul>
 8008b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b66:	9e01      	ldr	r6, [sp, #4]
 8008b68:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7f7 fce6 	bl	8000544 <__aeabi_i2d>
 8008b78:	4642      	mov	r2, r8
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	f7f7 fd4c 	bl	8000618 <__aeabi_dmul>
 8008b80:	4b86      	ldr	r3, [pc, #536]	; (8008d9c <_dtoa_r+0x64c>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7f7 fb92 	bl	80002ac <__adddf3>
 8008b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	d158      	bne.n	8008c48 <_dtoa_r+0x4f8>
 8008b96:	4b82      	ldr	r3, [pc, #520]	; (8008da0 <_dtoa_r+0x650>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	4649      	mov	r1, r9
 8008b9e:	f7f7 fb83 	bl	80002a8 <__aeabi_dsub>
 8008ba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba6:	4680      	mov	r8, r0
 8008ba8:	4689      	mov	r9, r1
 8008baa:	f7f7 ffc5 	bl	8000b38 <__aeabi_dcmpgt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f040 8296 	bne.w	80090e0 <_dtoa_r+0x990>
 8008bb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008bb8:	4640      	mov	r0, r8
 8008bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bbe:	4649      	mov	r1, r9
 8008bc0:	f7f7 ff9c 	bl	8000afc <__aeabi_dcmplt>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f040 8289 	bne.w	80090dc <_dtoa_r+0x98c>
 8008bca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f2c0 814e 	blt.w	8008e72 <_dtoa_r+0x722>
 8008bd6:	f1bb 0f0e 	cmp.w	fp, #14
 8008bda:	f300 814a 	bgt.w	8008e72 <_dtoa_r+0x722>
 8008bde:	4b6b      	ldr	r3, [pc, #428]	; (8008d8c <_dtoa_r+0x63c>)
 8008be0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008be4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f280 80dc 	bge.w	8008da8 <_dtoa_r+0x658>
 8008bf0:	9b04      	ldr	r3, [sp, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f300 80d8 	bgt.w	8008da8 <_dtoa_r+0x658>
 8008bf8:	f040 826f 	bne.w	80090da <_dtoa_r+0x98a>
 8008bfc:	4b68      	ldr	r3, [pc, #416]	; (8008da0 <_dtoa_r+0x650>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f7f7 fd08 	bl	8000618 <__aeabi_dmul>
 8008c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c0c:	f7f7 ff8a 	bl	8000b24 <__aeabi_dcmpge>
 8008c10:	9e04      	ldr	r6, [sp, #16]
 8008c12:	4637      	mov	r7, r6
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f040 8245 	bne.w	80090a4 <_dtoa_r+0x954>
 8008c1a:	9d00      	ldr	r5, [sp, #0]
 8008c1c:	2331      	movs	r3, #49	; 0x31
 8008c1e:	f805 3b01 	strb.w	r3, [r5], #1
 8008c22:	f10b 0b01 	add.w	fp, fp, #1
 8008c26:	e241      	b.n	80090ac <_dtoa_r+0x95c>
 8008c28:	07f2      	lsls	r2, r6, #31
 8008c2a:	d505      	bpl.n	8008c38 <_dtoa_r+0x4e8>
 8008c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c30:	f7f7 fcf2 	bl	8000618 <__aeabi_dmul>
 8008c34:	3501      	adds	r5, #1
 8008c36:	2301      	movs	r3, #1
 8008c38:	1076      	asrs	r6, r6, #1
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	e773      	b.n	8008b26 <_dtoa_r+0x3d6>
 8008c3e:	2502      	movs	r5, #2
 8008c40:	e775      	b.n	8008b2e <_dtoa_r+0x3de>
 8008c42:	9e04      	ldr	r6, [sp, #16]
 8008c44:	465f      	mov	r7, fp
 8008c46:	e792      	b.n	8008b6e <_dtoa_r+0x41e>
 8008c48:	9900      	ldr	r1, [sp, #0]
 8008c4a:	4b50      	ldr	r3, [pc, #320]	; (8008d8c <_dtoa_r+0x63c>)
 8008c4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c50:	4431      	add	r1, r6
 8008c52:	9102      	str	r1, [sp, #8]
 8008c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c56:	eeb0 9a47 	vmov.f32	s18, s14
 8008c5a:	eef0 9a67 	vmov.f32	s19, s15
 8008c5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008c62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c66:	2900      	cmp	r1, #0
 8008c68:	d044      	beq.n	8008cf4 <_dtoa_r+0x5a4>
 8008c6a:	494e      	ldr	r1, [pc, #312]	; (8008da4 <_dtoa_r+0x654>)
 8008c6c:	2000      	movs	r0, #0
 8008c6e:	f7f7 fdfd 	bl	800086c <__aeabi_ddiv>
 8008c72:	ec53 2b19 	vmov	r2, r3, d9
 8008c76:	f7f7 fb17 	bl	80002a8 <__aeabi_dsub>
 8008c7a:	9d00      	ldr	r5, [sp, #0]
 8008c7c:	ec41 0b19 	vmov	d9, r0, r1
 8008c80:	4649      	mov	r1, r9
 8008c82:	4640      	mov	r0, r8
 8008c84:	f7f7 ff78 	bl	8000b78 <__aeabi_d2iz>
 8008c88:	4606      	mov	r6, r0
 8008c8a:	f7f7 fc5b 	bl	8000544 <__aeabi_i2d>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4640      	mov	r0, r8
 8008c94:	4649      	mov	r1, r9
 8008c96:	f7f7 fb07 	bl	80002a8 <__aeabi_dsub>
 8008c9a:	3630      	adds	r6, #48	; 0x30
 8008c9c:	f805 6b01 	strb.w	r6, [r5], #1
 8008ca0:	ec53 2b19 	vmov	r2, r3, d9
 8008ca4:	4680      	mov	r8, r0
 8008ca6:	4689      	mov	r9, r1
 8008ca8:	f7f7 ff28 	bl	8000afc <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d164      	bne.n	8008d7a <_dtoa_r+0x62a>
 8008cb0:	4642      	mov	r2, r8
 8008cb2:	464b      	mov	r3, r9
 8008cb4:	4937      	ldr	r1, [pc, #220]	; (8008d94 <_dtoa_r+0x644>)
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f7f7 faf6 	bl	80002a8 <__aeabi_dsub>
 8008cbc:	ec53 2b19 	vmov	r2, r3, d9
 8008cc0:	f7f7 ff1c 	bl	8000afc <__aeabi_dcmplt>
 8008cc4:	2800      	cmp	r0, #0
 8008cc6:	f040 80b6 	bne.w	8008e36 <_dtoa_r+0x6e6>
 8008cca:	9b02      	ldr	r3, [sp, #8]
 8008ccc:	429d      	cmp	r5, r3
 8008cce:	f43f af7c 	beq.w	8008bca <_dtoa_r+0x47a>
 8008cd2:	4b31      	ldr	r3, [pc, #196]	; (8008d98 <_dtoa_r+0x648>)
 8008cd4:	ec51 0b19 	vmov	r0, r1, d9
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f7f7 fc9d 	bl	8000618 <__aeabi_dmul>
 8008cde:	4b2e      	ldr	r3, [pc, #184]	; (8008d98 <_dtoa_r+0x648>)
 8008ce0:	ec41 0b19 	vmov	d9, r0, r1
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4649      	mov	r1, r9
 8008cea:	f7f7 fc95 	bl	8000618 <__aeabi_dmul>
 8008cee:	4680      	mov	r8, r0
 8008cf0:	4689      	mov	r9, r1
 8008cf2:	e7c5      	b.n	8008c80 <_dtoa_r+0x530>
 8008cf4:	ec51 0b17 	vmov	r0, r1, d7
 8008cf8:	f7f7 fc8e 	bl	8000618 <__aeabi_dmul>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	9d00      	ldr	r5, [sp, #0]
 8008d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d02:	ec41 0b19 	vmov	d9, r0, r1
 8008d06:	4649      	mov	r1, r9
 8008d08:	4640      	mov	r0, r8
 8008d0a:	f7f7 ff35 	bl	8000b78 <__aeabi_d2iz>
 8008d0e:	4606      	mov	r6, r0
 8008d10:	f7f7 fc18 	bl	8000544 <__aeabi_i2d>
 8008d14:	3630      	adds	r6, #48	; 0x30
 8008d16:	4602      	mov	r2, r0
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	4649      	mov	r1, r9
 8008d1e:	f7f7 fac3 	bl	80002a8 <__aeabi_dsub>
 8008d22:	f805 6b01 	strb.w	r6, [r5], #1
 8008d26:	9b02      	ldr	r3, [sp, #8]
 8008d28:	429d      	cmp	r5, r3
 8008d2a:	4680      	mov	r8, r0
 8008d2c:	4689      	mov	r9, r1
 8008d2e:	f04f 0200 	mov.w	r2, #0
 8008d32:	d124      	bne.n	8008d7e <_dtoa_r+0x62e>
 8008d34:	4b1b      	ldr	r3, [pc, #108]	; (8008da4 <_dtoa_r+0x654>)
 8008d36:	ec51 0b19 	vmov	r0, r1, d9
 8008d3a:	f7f7 fab7 	bl	80002ac <__adddf3>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	460b      	mov	r3, r1
 8008d42:	4640      	mov	r0, r8
 8008d44:	4649      	mov	r1, r9
 8008d46:	f7f7 fef7 	bl	8000b38 <__aeabi_dcmpgt>
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d173      	bne.n	8008e36 <_dtoa_r+0x6e6>
 8008d4e:	ec53 2b19 	vmov	r2, r3, d9
 8008d52:	4914      	ldr	r1, [pc, #80]	; (8008da4 <_dtoa_r+0x654>)
 8008d54:	2000      	movs	r0, #0
 8008d56:	f7f7 faa7 	bl	80002a8 <__aeabi_dsub>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	4640      	mov	r0, r8
 8008d60:	4649      	mov	r1, r9
 8008d62:	f7f7 fecb 	bl	8000afc <__aeabi_dcmplt>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	f43f af2f 	beq.w	8008bca <_dtoa_r+0x47a>
 8008d6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008d6e:	1e6b      	subs	r3, r5, #1
 8008d70:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d76:	2b30      	cmp	r3, #48	; 0x30
 8008d78:	d0f8      	beq.n	8008d6c <_dtoa_r+0x61c>
 8008d7a:	46bb      	mov	fp, r7
 8008d7c:	e04a      	b.n	8008e14 <_dtoa_r+0x6c4>
 8008d7e:	4b06      	ldr	r3, [pc, #24]	; (8008d98 <_dtoa_r+0x648>)
 8008d80:	f7f7 fc4a 	bl	8000618 <__aeabi_dmul>
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	e7bd      	b.n	8008d06 <_dtoa_r+0x5b6>
 8008d8a:	bf00      	nop
 8008d8c:	0800ca30 	.word	0x0800ca30
 8008d90:	0800ca08 	.word	0x0800ca08
 8008d94:	3ff00000 	.word	0x3ff00000
 8008d98:	40240000 	.word	0x40240000
 8008d9c:	401c0000 	.word	0x401c0000
 8008da0:	40140000 	.word	0x40140000
 8008da4:	3fe00000 	.word	0x3fe00000
 8008da8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dac:	9d00      	ldr	r5, [sp, #0]
 8008dae:	4642      	mov	r2, r8
 8008db0:	464b      	mov	r3, r9
 8008db2:	4630      	mov	r0, r6
 8008db4:	4639      	mov	r1, r7
 8008db6:	f7f7 fd59 	bl	800086c <__aeabi_ddiv>
 8008dba:	f7f7 fedd 	bl	8000b78 <__aeabi_d2iz>
 8008dbe:	9001      	str	r0, [sp, #4]
 8008dc0:	f7f7 fbc0 	bl	8000544 <__aeabi_i2d>
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	464b      	mov	r3, r9
 8008dc8:	f7f7 fc26 	bl	8000618 <__aeabi_dmul>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	4639      	mov	r1, r7
 8008dd4:	f7f7 fa68 	bl	80002a8 <__aeabi_dsub>
 8008dd8:	9e01      	ldr	r6, [sp, #4]
 8008dda:	9f04      	ldr	r7, [sp, #16]
 8008ddc:	3630      	adds	r6, #48	; 0x30
 8008dde:	f805 6b01 	strb.w	r6, [r5], #1
 8008de2:	9e00      	ldr	r6, [sp, #0]
 8008de4:	1bae      	subs	r6, r5, r6
 8008de6:	42b7      	cmp	r7, r6
 8008de8:	4602      	mov	r2, r0
 8008dea:	460b      	mov	r3, r1
 8008dec:	d134      	bne.n	8008e58 <_dtoa_r+0x708>
 8008dee:	f7f7 fa5d 	bl	80002ac <__adddf3>
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f7f7 fe9d 	bl	8000b38 <__aeabi_dcmpgt>
 8008dfe:	b9c8      	cbnz	r0, 8008e34 <_dtoa_r+0x6e4>
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	4630      	mov	r0, r6
 8008e06:	4639      	mov	r1, r7
 8008e08:	f7f7 fe6e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e0c:	b110      	cbz	r0, 8008e14 <_dtoa_r+0x6c4>
 8008e0e:	9b01      	ldr	r3, [sp, #4]
 8008e10:	07db      	lsls	r3, r3, #31
 8008e12:	d40f      	bmi.n	8008e34 <_dtoa_r+0x6e4>
 8008e14:	4651      	mov	r1, sl
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fc18 	bl	800964c <_Bfree>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e20:	702b      	strb	r3, [r5, #0]
 8008e22:	f10b 0301 	add.w	r3, fp, #1
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f43f ace2 	beq.w	80087f4 <_dtoa_r+0xa4>
 8008e30:	601d      	str	r5, [r3, #0]
 8008e32:	e4df      	b.n	80087f4 <_dtoa_r+0xa4>
 8008e34:	465f      	mov	r7, fp
 8008e36:	462b      	mov	r3, r5
 8008e38:	461d      	mov	r5, r3
 8008e3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e3e:	2a39      	cmp	r2, #57	; 0x39
 8008e40:	d106      	bne.n	8008e50 <_dtoa_r+0x700>
 8008e42:	9a00      	ldr	r2, [sp, #0]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d1f7      	bne.n	8008e38 <_dtoa_r+0x6e8>
 8008e48:	9900      	ldr	r1, [sp, #0]
 8008e4a:	2230      	movs	r2, #48	; 0x30
 8008e4c:	3701      	adds	r7, #1
 8008e4e:	700a      	strb	r2, [r1, #0]
 8008e50:	781a      	ldrb	r2, [r3, #0]
 8008e52:	3201      	adds	r2, #1
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e790      	b.n	8008d7a <_dtoa_r+0x62a>
 8008e58:	4ba3      	ldr	r3, [pc, #652]	; (80090e8 <_dtoa_r+0x998>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f7f7 fbdc 	bl	8000618 <__aeabi_dmul>
 8008e60:	2200      	movs	r2, #0
 8008e62:	2300      	movs	r3, #0
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	f7f7 fe3e 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d09e      	beq.n	8008dae <_dtoa_r+0x65e>
 8008e70:	e7d0      	b.n	8008e14 <_dtoa_r+0x6c4>
 8008e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e74:	2a00      	cmp	r2, #0
 8008e76:	f000 80ca 	beq.w	800900e <_dtoa_r+0x8be>
 8008e7a:	9a07      	ldr	r2, [sp, #28]
 8008e7c:	2a01      	cmp	r2, #1
 8008e7e:	f300 80ad 	bgt.w	8008fdc <_dtoa_r+0x88c>
 8008e82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	f000 80a5 	beq.w	8008fd4 <_dtoa_r+0x884>
 8008e8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008e8e:	9e08      	ldr	r6, [sp, #32]
 8008e90:	9d05      	ldr	r5, [sp, #20]
 8008e92:	9a05      	ldr	r2, [sp, #20]
 8008e94:	441a      	add	r2, r3
 8008e96:	9205      	str	r2, [sp, #20]
 8008e98:	9a06      	ldr	r2, [sp, #24]
 8008e9a:	2101      	movs	r1, #1
 8008e9c:	441a      	add	r2, r3
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	9206      	str	r2, [sp, #24]
 8008ea2:	f000 fcd3 	bl	800984c <__i2b>
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	b165      	cbz	r5, 8008ec4 <_dtoa_r+0x774>
 8008eaa:	9b06      	ldr	r3, [sp, #24]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	dd09      	ble.n	8008ec4 <_dtoa_r+0x774>
 8008eb0:	42ab      	cmp	r3, r5
 8008eb2:	9a05      	ldr	r2, [sp, #20]
 8008eb4:	bfa8      	it	ge
 8008eb6:	462b      	movge	r3, r5
 8008eb8:	1ad2      	subs	r2, r2, r3
 8008eba:	9205      	str	r2, [sp, #20]
 8008ebc:	9a06      	ldr	r2, [sp, #24]
 8008ebe:	1aed      	subs	r5, r5, r3
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	9306      	str	r3, [sp, #24]
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	b1f3      	cbz	r3, 8008f06 <_dtoa_r+0x7b6>
 8008ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	f000 80a3 	beq.w	8009016 <_dtoa_r+0x8c6>
 8008ed0:	2e00      	cmp	r6, #0
 8008ed2:	dd10      	ble.n	8008ef6 <_dtoa_r+0x7a6>
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	4632      	mov	r2, r6
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f000 fd77 	bl	80099cc <__pow5mult>
 8008ede:	4652      	mov	r2, sl
 8008ee0:	4601      	mov	r1, r0
 8008ee2:	4607      	mov	r7, r0
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f000 fcc7 	bl	8009878 <__multiply>
 8008eea:	4651      	mov	r1, sl
 8008eec:	4680      	mov	r8, r0
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fbac 	bl	800964c <_Bfree>
 8008ef4:	46c2      	mov	sl, r8
 8008ef6:	9b08      	ldr	r3, [sp, #32]
 8008ef8:	1b9a      	subs	r2, r3, r6
 8008efa:	d004      	beq.n	8008f06 <_dtoa_r+0x7b6>
 8008efc:	4651      	mov	r1, sl
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fd64 	bl	80099cc <__pow5mult>
 8008f04:	4682      	mov	sl, r0
 8008f06:	2101      	movs	r1, #1
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fc9f 	bl	800984c <__i2b>
 8008f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	4606      	mov	r6, r0
 8008f14:	f340 8081 	ble.w	800901a <_dtoa_r+0x8ca>
 8008f18:	461a      	mov	r2, r3
 8008f1a:	4601      	mov	r1, r0
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fd55 	bl	80099cc <__pow5mult>
 8008f22:	9b07      	ldr	r3, [sp, #28]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	4606      	mov	r6, r0
 8008f28:	dd7a      	ble.n	8009020 <_dtoa_r+0x8d0>
 8008f2a:	f04f 0800 	mov.w	r8, #0
 8008f2e:	6933      	ldr	r3, [r6, #16]
 8008f30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f34:	6918      	ldr	r0, [r3, #16]
 8008f36:	f000 fc3b 	bl	80097b0 <__hi0bits>
 8008f3a:	f1c0 0020 	rsb	r0, r0, #32
 8008f3e:	9b06      	ldr	r3, [sp, #24]
 8008f40:	4418      	add	r0, r3
 8008f42:	f010 001f 	ands.w	r0, r0, #31
 8008f46:	f000 8094 	beq.w	8009072 <_dtoa_r+0x922>
 8008f4a:	f1c0 0320 	rsb	r3, r0, #32
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	f340 8085 	ble.w	800905e <_dtoa_r+0x90e>
 8008f54:	9b05      	ldr	r3, [sp, #20]
 8008f56:	f1c0 001c 	rsb	r0, r0, #28
 8008f5a:	4403      	add	r3, r0
 8008f5c:	9305      	str	r3, [sp, #20]
 8008f5e:	9b06      	ldr	r3, [sp, #24]
 8008f60:	4403      	add	r3, r0
 8008f62:	4405      	add	r5, r0
 8008f64:	9306      	str	r3, [sp, #24]
 8008f66:	9b05      	ldr	r3, [sp, #20]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dd05      	ble.n	8008f78 <_dtoa_r+0x828>
 8008f6c:	4651      	mov	r1, sl
 8008f6e:	461a      	mov	r2, r3
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fd85 	bl	8009a80 <__lshift>
 8008f76:	4682      	mov	sl, r0
 8008f78:	9b06      	ldr	r3, [sp, #24]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd05      	ble.n	8008f8a <_dtoa_r+0x83a>
 8008f7e:	4631      	mov	r1, r6
 8008f80:	461a      	mov	r2, r3
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 fd7c 	bl	8009a80 <__lshift>
 8008f88:	4606      	mov	r6, r0
 8008f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d072      	beq.n	8009076 <_dtoa_r+0x926>
 8008f90:	4631      	mov	r1, r6
 8008f92:	4650      	mov	r0, sl
 8008f94:	f000 fde0 	bl	8009b58 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	da6c      	bge.n	8009076 <_dtoa_r+0x926>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	4651      	mov	r1, sl
 8008fa0:	220a      	movs	r2, #10
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f000 fb74 	bl	8009690 <__multadd>
 8008fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008faa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fae:	4682      	mov	sl, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 81b0 	beq.w	8009316 <_dtoa_r+0xbc6>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4639      	mov	r1, r7
 8008fba:	220a      	movs	r2, #10
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	f000 fb67 	bl	8009690 <__multadd>
 8008fc2:	9b01      	ldr	r3, [sp, #4]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	4607      	mov	r7, r0
 8008fc8:	f300 8096 	bgt.w	80090f8 <_dtoa_r+0x9a8>
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	dc59      	bgt.n	8009086 <_dtoa_r+0x936>
 8008fd2:	e091      	b.n	80090f8 <_dtoa_r+0x9a8>
 8008fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fda:	e758      	b.n	8008e8e <_dtoa_r+0x73e>
 8008fdc:	9b04      	ldr	r3, [sp, #16]
 8008fde:	1e5e      	subs	r6, r3, #1
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	42b3      	cmp	r3, r6
 8008fe4:	bfbf      	itttt	lt
 8008fe6:	9b08      	ldrlt	r3, [sp, #32]
 8008fe8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008fea:	9608      	strlt	r6, [sp, #32]
 8008fec:	1af3      	sublt	r3, r6, r3
 8008fee:	bfb4      	ite	lt
 8008ff0:	18d2      	addlt	r2, r2, r3
 8008ff2:	1b9e      	subge	r6, r3, r6
 8008ff4:	9b04      	ldr	r3, [sp, #16]
 8008ff6:	bfbc      	itt	lt
 8008ff8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008ffa:	2600      	movlt	r6, #0
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	bfb7      	itett	lt
 8009000:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009004:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009008:	1a9d      	sublt	r5, r3, r2
 800900a:	2300      	movlt	r3, #0
 800900c:	e741      	b.n	8008e92 <_dtoa_r+0x742>
 800900e:	9e08      	ldr	r6, [sp, #32]
 8009010:	9d05      	ldr	r5, [sp, #20]
 8009012:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009014:	e748      	b.n	8008ea8 <_dtoa_r+0x758>
 8009016:	9a08      	ldr	r2, [sp, #32]
 8009018:	e770      	b.n	8008efc <_dtoa_r+0x7ac>
 800901a:	9b07      	ldr	r3, [sp, #28]
 800901c:	2b01      	cmp	r3, #1
 800901e:	dc19      	bgt.n	8009054 <_dtoa_r+0x904>
 8009020:	9b02      	ldr	r3, [sp, #8]
 8009022:	b9bb      	cbnz	r3, 8009054 <_dtoa_r+0x904>
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800902a:	b99b      	cbnz	r3, 8009054 <_dtoa_r+0x904>
 800902c:	9b03      	ldr	r3, [sp, #12]
 800902e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009032:	0d1b      	lsrs	r3, r3, #20
 8009034:	051b      	lsls	r3, r3, #20
 8009036:	b183      	cbz	r3, 800905a <_dtoa_r+0x90a>
 8009038:	9b05      	ldr	r3, [sp, #20]
 800903a:	3301      	adds	r3, #1
 800903c:	9305      	str	r3, [sp, #20]
 800903e:	9b06      	ldr	r3, [sp, #24]
 8009040:	3301      	adds	r3, #1
 8009042:	9306      	str	r3, [sp, #24]
 8009044:	f04f 0801 	mov.w	r8, #1
 8009048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800904a:	2b00      	cmp	r3, #0
 800904c:	f47f af6f 	bne.w	8008f2e <_dtoa_r+0x7de>
 8009050:	2001      	movs	r0, #1
 8009052:	e774      	b.n	8008f3e <_dtoa_r+0x7ee>
 8009054:	f04f 0800 	mov.w	r8, #0
 8009058:	e7f6      	b.n	8009048 <_dtoa_r+0x8f8>
 800905a:	4698      	mov	r8, r3
 800905c:	e7f4      	b.n	8009048 <_dtoa_r+0x8f8>
 800905e:	d082      	beq.n	8008f66 <_dtoa_r+0x816>
 8009060:	9a05      	ldr	r2, [sp, #20]
 8009062:	331c      	adds	r3, #28
 8009064:	441a      	add	r2, r3
 8009066:	9205      	str	r2, [sp, #20]
 8009068:	9a06      	ldr	r2, [sp, #24]
 800906a:	441a      	add	r2, r3
 800906c:	441d      	add	r5, r3
 800906e:	9206      	str	r2, [sp, #24]
 8009070:	e779      	b.n	8008f66 <_dtoa_r+0x816>
 8009072:	4603      	mov	r3, r0
 8009074:	e7f4      	b.n	8009060 <_dtoa_r+0x910>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	2b00      	cmp	r3, #0
 800907a:	dc37      	bgt.n	80090ec <_dtoa_r+0x99c>
 800907c:	9b07      	ldr	r3, [sp, #28]
 800907e:	2b02      	cmp	r3, #2
 8009080:	dd34      	ble.n	80090ec <_dtoa_r+0x99c>
 8009082:	9b04      	ldr	r3, [sp, #16]
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	9b01      	ldr	r3, [sp, #4]
 8009088:	b963      	cbnz	r3, 80090a4 <_dtoa_r+0x954>
 800908a:	4631      	mov	r1, r6
 800908c:	2205      	movs	r2, #5
 800908e:	4620      	mov	r0, r4
 8009090:	f000 fafe 	bl	8009690 <__multadd>
 8009094:	4601      	mov	r1, r0
 8009096:	4606      	mov	r6, r0
 8009098:	4650      	mov	r0, sl
 800909a:	f000 fd5d 	bl	8009b58 <__mcmp>
 800909e:	2800      	cmp	r0, #0
 80090a0:	f73f adbb 	bgt.w	8008c1a <_dtoa_r+0x4ca>
 80090a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090a6:	9d00      	ldr	r5, [sp, #0]
 80090a8:	ea6f 0b03 	mvn.w	fp, r3
 80090ac:	f04f 0800 	mov.w	r8, #0
 80090b0:	4631      	mov	r1, r6
 80090b2:	4620      	mov	r0, r4
 80090b4:	f000 faca 	bl	800964c <_Bfree>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	f43f aeab 	beq.w	8008e14 <_dtoa_r+0x6c4>
 80090be:	f1b8 0f00 	cmp.w	r8, #0
 80090c2:	d005      	beq.n	80090d0 <_dtoa_r+0x980>
 80090c4:	45b8      	cmp	r8, r7
 80090c6:	d003      	beq.n	80090d0 <_dtoa_r+0x980>
 80090c8:	4641      	mov	r1, r8
 80090ca:	4620      	mov	r0, r4
 80090cc:	f000 fabe 	bl	800964c <_Bfree>
 80090d0:	4639      	mov	r1, r7
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 faba 	bl	800964c <_Bfree>
 80090d8:	e69c      	b.n	8008e14 <_dtoa_r+0x6c4>
 80090da:	2600      	movs	r6, #0
 80090dc:	4637      	mov	r7, r6
 80090de:	e7e1      	b.n	80090a4 <_dtoa_r+0x954>
 80090e0:	46bb      	mov	fp, r7
 80090e2:	4637      	mov	r7, r6
 80090e4:	e599      	b.n	8008c1a <_dtoa_r+0x4ca>
 80090e6:	bf00      	nop
 80090e8:	40240000 	.word	0x40240000
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	f000 80c8 	beq.w	8009284 <_dtoa_r+0xb34>
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	dd05      	ble.n	8009108 <_dtoa_r+0x9b8>
 80090fc:	4639      	mov	r1, r7
 80090fe:	462a      	mov	r2, r5
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fcbd 	bl	8009a80 <__lshift>
 8009106:	4607      	mov	r7, r0
 8009108:	f1b8 0f00 	cmp.w	r8, #0
 800910c:	d05b      	beq.n	80091c6 <_dtoa_r+0xa76>
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fa5b 	bl	80095cc <_Balloc>
 8009116:	4605      	mov	r5, r0
 8009118:	b928      	cbnz	r0, 8009126 <_dtoa_r+0x9d6>
 800911a:	4b83      	ldr	r3, [pc, #524]	; (8009328 <_dtoa_r+0xbd8>)
 800911c:	4602      	mov	r2, r0
 800911e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009122:	f7ff bb2e 	b.w	8008782 <_dtoa_r+0x32>
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	3202      	adds	r2, #2
 800912a:	0092      	lsls	r2, r2, #2
 800912c:	f107 010c 	add.w	r1, r7, #12
 8009130:	300c      	adds	r0, #12
 8009132:	f7ff fa5d 	bl	80085f0 <memcpy>
 8009136:	2201      	movs	r2, #1
 8009138:	4629      	mov	r1, r5
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fca0 	bl	8009a80 <__lshift>
 8009140:	9b00      	ldr	r3, [sp, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	9304      	str	r3, [sp, #16]
 8009146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800914a:	4413      	add	r3, r2
 800914c:	9308      	str	r3, [sp, #32]
 800914e:	9b02      	ldr	r3, [sp, #8]
 8009150:	f003 0301 	and.w	r3, r3, #1
 8009154:	46b8      	mov	r8, r7
 8009156:	9306      	str	r3, [sp, #24]
 8009158:	4607      	mov	r7, r0
 800915a:	9b04      	ldr	r3, [sp, #16]
 800915c:	4631      	mov	r1, r6
 800915e:	3b01      	subs	r3, #1
 8009160:	4650      	mov	r0, sl
 8009162:	9301      	str	r3, [sp, #4]
 8009164:	f7ff fa6c 	bl	8008640 <quorem>
 8009168:	4641      	mov	r1, r8
 800916a:	9002      	str	r0, [sp, #8]
 800916c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009170:	4650      	mov	r0, sl
 8009172:	f000 fcf1 	bl	8009b58 <__mcmp>
 8009176:	463a      	mov	r2, r7
 8009178:	9005      	str	r0, [sp, #20]
 800917a:	4631      	mov	r1, r6
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fd07 	bl	8009b90 <__mdiff>
 8009182:	68c2      	ldr	r2, [r0, #12]
 8009184:	4605      	mov	r5, r0
 8009186:	bb02      	cbnz	r2, 80091ca <_dtoa_r+0xa7a>
 8009188:	4601      	mov	r1, r0
 800918a:	4650      	mov	r0, sl
 800918c:	f000 fce4 	bl	8009b58 <__mcmp>
 8009190:	4602      	mov	r2, r0
 8009192:	4629      	mov	r1, r5
 8009194:	4620      	mov	r0, r4
 8009196:	9209      	str	r2, [sp, #36]	; 0x24
 8009198:	f000 fa58 	bl	800964c <_Bfree>
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a0:	9d04      	ldr	r5, [sp, #16]
 80091a2:	ea43 0102 	orr.w	r1, r3, r2
 80091a6:	9b06      	ldr	r3, [sp, #24]
 80091a8:	4319      	orrs	r1, r3
 80091aa:	d110      	bne.n	80091ce <_dtoa_r+0xa7e>
 80091ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80091b0:	d029      	beq.n	8009206 <_dtoa_r+0xab6>
 80091b2:	9b05      	ldr	r3, [sp, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dd02      	ble.n	80091be <_dtoa_r+0xa6e>
 80091b8:	9b02      	ldr	r3, [sp, #8]
 80091ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80091be:	9b01      	ldr	r3, [sp, #4]
 80091c0:	f883 9000 	strb.w	r9, [r3]
 80091c4:	e774      	b.n	80090b0 <_dtoa_r+0x960>
 80091c6:	4638      	mov	r0, r7
 80091c8:	e7ba      	b.n	8009140 <_dtoa_r+0x9f0>
 80091ca:	2201      	movs	r2, #1
 80091cc:	e7e1      	b.n	8009192 <_dtoa_r+0xa42>
 80091ce:	9b05      	ldr	r3, [sp, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	db04      	blt.n	80091de <_dtoa_r+0xa8e>
 80091d4:	9907      	ldr	r1, [sp, #28]
 80091d6:	430b      	orrs	r3, r1
 80091d8:	9906      	ldr	r1, [sp, #24]
 80091da:	430b      	orrs	r3, r1
 80091dc:	d120      	bne.n	8009220 <_dtoa_r+0xad0>
 80091de:	2a00      	cmp	r2, #0
 80091e0:	dded      	ble.n	80091be <_dtoa_r+0xa6e>
 80091e2:	4651      	mov	r1, sl
 80091e4:	2201      	movs	r2, #1
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fc4a 	bl	8009a80 <__lshift>
 80091ec:	4631      	mov	r1, r6
 80091ee:	4682      	mov	sl, r0
 80091f0:	f000 fcb2 	bl	8009b58 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	dc03      	bgt.n	8009200 <_dtoa_r+0xab0>
 80091f8:	d1e1      	bne.n	80091be <_dtoa_r+0xa6e>
 80091fa:	f019 0f01 	tst.w	r9, #1
 80091fe:	d0de      	beq.n	80091be <_dtoa_r+0xa6e>
 8009200:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009204:	d1d8      	bne.n	80091b8 <_dtoa_r+0xa68>
 8009206:	9a01      	ldr	r2, [sp, #4]
 8009208:	2339      	movs	r3, #57	; 0x39
 800920a:	7013      	strb	r3, [r2, #0]
 800920c:	462b      	mov	r3, r5
 800920e:	461d      	mov	r5, r3
 8009210:	3b01      	subs	r3, #1
 8009212:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009216:	2a39      	cmp	r2, #57	; 0x39
 8009218:	d06c      	beq.n	80092f4 <_dtoa_r+0xba4>
 800921a:	3201      	adds	r2, #1
 800921c:	701a      	strb	r2, [r3, #0]
 800921e:	e747      	b.n	80090b0 <_dtoa_r+0x960>
 8009220:	2a00      	cmp	r2, #0
 8009222:	dd07      	ble.n	8009234 <_dtoa_r+0xae4>
 8009224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009228:	d0ed      	beq.n	8009206 <_dtoa_r+0xab6>
 800922a:	9a01      	ldr	r2, [sp, #4]
 800922c:	f109 0301 	add.w	r3, r9, #1
 8009230:	7013      	strb	r3, [r2, #0]
 8009232:	e73d      	b.n	80090b0 <_dtoa_r+0x960>
 8009234:	9b04      	ldr	r3, [sp, #16]
 8009236:	9a08      	ldr	r2, [sp, #32]
 8009238:	f803 9c01 	strb.w	r9, [r3, #-1]
 800923c:	4293      	cmp	r3, r2
 800923e:	d043      	beq.n	80092c8 <_dtoa_r+0xb78>
 8009240:	4651      	mov	r1, sl
 8009242:	2300      	movs	r3, #0
 8009244:	220a      	movs	r2, #10
 8009246:	4620      	mov	r0, r4
 8009248:	f000 fa22 	bl	8009690 <__multadd>
 800924c:	45b8      	cmp	r8, r7
 800924e:	4682      	mov	sl, r0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	f04f 020a 	mov.w	r2, #10
 8009258:	4641      	mov	r1, r8
 800925a:	4620      	mov	r0, r4
 800925c:	d107      	bne.n	800926e <_dtoa_r+0xb1e>
 800925e:	f000 fa17 	bl	8009690 <__multadd>
 8009262:	4680      	mov	r8, r0
 8009264:	4607      	mov	r7, r0
 8009266:	9b04      	ldr	r3, [sp, #16]
 8009268:	3301      	adds	r3, #1
 800926a:	9304      	str	r3, [sp, #16]
 800926c:	e775      	b.n	800915a <_dtoa_r+0xa0a>
 800926e:	f000 fa0f 	bl	8009690 <__multadd>
 8009272:	4639      	mov	r1, r7
 8009274:	4680      	mov	r8, r0
 8009276:	2300      	movs	r3, #0
 8009278:	220a      	movs	r2, #10
 800927a:	4620      	mov	r0, r4
 800927c:	f000 fa08 	bl	8009690 <__multadd>
 8009280:	4607      	mov	r7, r0
 8009282:	e7f0      	b.n	8009266 <_dtoa_r+0xb16>
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	9d00      	ldr	r5, [sp, #0]
 800928a:	4631      	mov	r1, r6
 800928c:	4650      	mov	r0, sl
 800928e:	f7ff f9d7 	bl	8008640 <quorem>
 8009292:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	f805 9b01 	strb.w	r9, [r5], #1
 800929c:	1aea      	subs	r2, r5, r3
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	4293      	cmp	r3, r2
 80092a2:	dd07      	ble.n	80092b4 <_dtoa_r+0xb64>
 80092a4:	4651      	mov	r1, sl
 80092a6:	2300      	movs	r3, #0
 80092a8:	220a      	movs	r2, #10
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 f9f0 	bl	8009690 <__multadd>
 80092b0:	4682      	mov	sl, r0
 80092b2:	e7ea      	b.n	800928a <_dtoa_r+0xb3a>
 80092b4:	9b01      	ldr	r3, [sp, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfc8      	it	gt
 80092ba:	461d      	movgt	r5, r3
 80092bc:	9b00      	ldr	r3, [sp, #0]
 80092be:	bfd8      	it	le
 80092c0:	2501      	movle	r5, #1
 80092c2:	441d      	add	r5, r3
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	4651      	mov	r1, sl
 80092ca:	2201      	movs	r2, #1
 80092cc:	4620      	mov	r0, r4
 80092ce:	f000 fbd7 	bl	8009a80 <__lshift>
 80092d2:	4631      	mov	r1, r6
 80092d4:	4682      	mov	sl, r0
 80092d6:	f000 fc3f 	bl	8009b58 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	dc96      	bgt.n	800920c <_dtoa_r+0xabc>
 80092de:	d102      	bne.n	80092e6 <_dtoa_r+0xb96>
 80092e0:	f019 0f01 	tst.w	r9, #1
 80092e4:	d192      	bne.n	800920c <_dtoa_r+0xabc>
 80092e6:	462b      	mov	r3, r5
 80092e8:	461d      	mov	r5, r3
 80092ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ee:	2a30      	cmp	r2, #48	; 0x30
 80092f0:	d0fa      	beq.n	80092e8 <_dtoa_r+0xb98>
 80092f2:	e6dd      	b.n	80090b0 <_dtoa_r+0x960>
 80092f4:	9a00      	ldr	r2, [sp, #0]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d189      	bne.n	800920e <_dtoa_r+0xabe>
 80092fa:	f10b 0b01 	add.w	fp, fp, #1
 80092fe:	2331      	movs	r3, #49	; 0x31
 8009300:	e796      	b.n	8009230 <_dtoa_r+0xae0>
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <_dtoa_r+0xbdc>)
 8009304:	f7ff ba99 	b.w	800883a <_dtoa_r+0xea>
 8009308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800930a:	2b00      	cmp	r3, #0
 800930c:	f47f aa6d 	bne.w	80087ea <_dtoa_r+0x9a>
 8009310:	4b07      	ldr	r3, [pc, #28]	; (8009330 <_dtoa_r+0xbe0>)
 8009312:	f7ff ba92 	b.w	800883a <_dtoa_r+0xea>
 8009316:	9b01      	ldr	r3, [sp, #4]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dcb5      	bgt.n	8009288 <_dtoa_r+0xb38>
 800931c:	9b07      	ldr	r3, [sp, #28]
 800931e:	2b02      	cmp	r3, #2
 8009320:	f73f aeb1 	bgt.w	8009086 <_dtoa_r+0x936>
 8009324:	e7b0      	b.n	8009288 <_dtoa_r+0xb38>
 8009326:	bf00      	nop
 8009328:	0800c99a 	.word	0x0800c99a
 800932c:	0800cc80 	.word	0x0800cc80
 8009330:	0800c91e 	.word	0x0800c91e

08009334 <_free_r>:
 8009334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009336:	2900      	cmp	r1, #0
 8009338:	d044      	beq.n	80093c4 <_free_r+0x90>
 800933a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800933e:	9001      	str	r0, [sp, #4]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f1a1 0404 	sub.w	r4, r1, #4
 8009346:	bfb8      	it	lt
 8009348:	18e4      	addlt	r4, r4, r3
 800934a:	f000 f933 	bl	80095b4 <__malloc_lock>
 800934e:	4a1e      	ldr	r2, [pc, #120]	; (80093c8 <_free_r+0x94>)
 8009350:	9801      	ldr	r0, [sp, #4]
 8009352:	6813      	ldr	r3, [r2, #0]
 8009354:	b933      	cbnz	r3, 8009364 <_free_r+0x30>
 8009356:	6063      	str	r3, [r4, #4]
 8009358:	6014      	str	r4, [r2, #0]
 800935a:	b003      	add	sp, #12
 800935c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009360:	f000 b92e 	b.w	80095c0 <__malloc_unlock>
 8009364:	42a3      	cmp	r3, r4
 8009366:	d908      	bls.n	800937a <_free_r+0x46>
 8009368:	6825      	ldr	r5, [r4, #0]
 800936a:	1961      	adds	r1, r4, r5
 800936c:	428b      	cmp	r3, r1
 800936e:	bf01      	itttt	eq
 8009370:	6819      	ldreq	r1, [r3, #0]
 8009372:	685b      	ldreq	r3, [r3, #4]
 8009374:	1949      	addeq	r1, r1, r5
 8009376:	6021      	streq	r1, [r4, #0]
 8009378:	e7ed      	b.n	8009356 <_free_r+0x22>
 800937a:	461a      	mov	r2, r3
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	b10b      	cbz	r3, 8009384 <_free_r+0x50>
 8009380:	42a3      	cmp	r3, r4
 8009382:	d9fa      	bls.n	800937a <_free_r+0x46>
 8009384:	6811      	ldr	r1, [r2, #0]
 8009386:	1855      	adds	r5, r2, r1
 8009388:	42a5      	cmp	r5, r4
 800938a:	d10b      	bne.n	80093a4 <_free_r+0x70>
 800938c:	6824      	ldr	r4, [r4, #0]
 800938e:	4421      	add	r1, r4
 8009390:	1854      	adds	r4, r2, r1
 8009392:	42a3      	cmp	r3, r4
 8009394:	6011      	str	r1, [r2, #0]
 8009396:	d1e0      	bne.n	800935a <_free_r+0x26>
 8009398:	681c      	ldr	r4, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	6053      	str	r3, [r2, #4]
 800939e:	440c      	add	r4, r1
 80093a0:	6014      	str	r4, [r2, #0]
 80093a2:	e7da      	b.n	800935a <_free_r+0x26>
 80093a4:	d902      	bls.n	80093ac <_free_r+0x78>
 80093a6:	230c      	movs	r3, #12
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	e7d6      	b.n	800935a <_free_r+0x26>
 80093ac:	6825      	ldr	r5, [r4, #0]
 80093ae:	1961      	adds	r1, r4, r5
 80093b0:	428b      	cmp	r3, r1
 80093b2:	bf04      	itt	eq
 80093b4:	6819      	ldreq	r1, [r3, #0]
 80093b6:	685b      	ldreq	r3, [r3, #4]
 80093b8:	6063      	str	r3, [r4, #4]
 80093ba:	bf04      	itt	eq
 80093bc:	1949      	addeq	r1, r1, r5
 80093be:	6021      	streq	r1, [r4, #0]
 80093c0:	6054      	str	r4, [r2, #4]
 80093c2:	e7ca      	b.n	800935a <_free_r+0x26>
 80093c4:	b003      	add	sp, #12
 80093c6:	bd30      	pop	{r4, r5, pc}
 80093c8:	20000a08 	.word	0x20000a08

080093cc <_findenv_r>:
 80093cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8009440 <_findenv_r+0x74>
 80093d4:	4607      	mov	r7, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	4616      	mov	r6, r2
 80093da:	f002 fb55 	bl	800ba88 <__env_lock>
 80093de:	f8da 4000 	ldr.w	r4, [sl]
 80093e2:	b134      	cbz	r4, 80093f2 <_findenv_r+0x26>
 80093e4:	464b      	mov	r3, r9
 80093e6:	4698      	mov	r8, r3
 80093e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ec:	b13a      	cbz	r2, 80093fe <_findenv_r+0x32>
 80093ee:	2a3d      	cmp	r2, #61	; 0x3d
 80093f0:	d1f9      	bne.n	80093e6 <_findenv_r+0x1a>
 80093f2:	4638      	mov	r0, r7
 80093f4:	f002 fb4e 	bl	800ba94 <__env_unlock>
 80093f8:	2000      	movs	r0, #0
 80093fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093fe:	eba8 0809 	sub.w	r8, r8, r9
 8009402:	46a3      	mov	fp, r4
 8009404:	f854 0b04 	ldr.w	r0, [r4], #4
 8009408:	2800      	cmp	r0, #0
 800940a:	d0f2      	beq.n	80093f2 <_findenv_r+0x26>
 800940c:	4642      	mov	r2, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f002 fab3 	bl	800b97a <strncmp>
 8009414:	2800      	cmp	r0, #0
 8009416:	d1f4      	bne.n	8009402 <_findenv_r+0x36>
 8009418:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800941c:	eb03 0508 	add.w	r5, r3, r8
 8009420:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009424:	2b3d      	cmp	r3, #61	; 0x3d
 8009426:	d1ec      	bne.n	8009402 <_findenv_r+0x36>
 8009428:	f8da 3000 	ldr.w	r3, [sl]
 800942c:	ebab 0303 	sub.w	r3, fp, r3
 8009430:	109b      	asrs	r3, r3, #2
 8009432:	4638      	mov	r0, r7
 8009434:	6033      	str	r3, [r6, #0]
 8009436:	f002 fb2d 	bl	800ba94 <__env_unlock>
 800943a:	1c68      	adds	r0, r5, #1
 800943c:	e7dd      	b.n	80093fa <_findenv_r+0x2e>
 800943e:	bf00      	nop
 8009440:	20000004 	.word	0x20000004

08009444 <_getenv_r>:
 8009444:	b507      	push	{r0, r1, r2, lr}
 8009446:	aa01      	add	r2, sp, #4
 8009448:	f7ff ffc0 	bl	80093cc <_findenv_r>
 800944c:	b003      	add	sp, #12
 800944e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009454 <malloc>:
 8009454:	4b02      	ldr	r3, [pc, #8]	; (8009460 <malloc+0xc>)
 8009456:	4601      	mov	r1, r0
 8009458:	6818      	ldr	r0, [r3, #0]
 800945a:	f000 b82b 	b.w	80094b4 <_malloc_r>
 800945e:	bf00      	nop
 8009460:	20000074 	.word	0x20000074

08009464 <free>:
 8009464:	4b02      	ldr	r3, [pc, #8]	; (8009470 <free+0xc>)
 8009466:	4601      	mov	r1, r0
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f7ff bf63 	b.w	8009334 <_free_r>
 800946e:	bf00      	nop
 8009470:	20000074 	.word	0x20000074

08009474 <sbrk_aligned>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0e      	ldr	r6, [pc, #56]	; (80094b0 <sbrk_aligned+0x3c>)
 8009478:	460c      	mov	r4, r1
 800947a:	6831      	ldr	r1, [r6, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	b911      	cbnz	r1, 8009486 <sbrk_aligned+0x12>
 8009480:	f002 fab4 	bl	800b9ec <_sbrk_r>
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f002 faaf 	bl	800b9ec <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d00a      	beq.n	80094a8 <sbrk_aligned+0x34>
 8009492:	1cc4      	adds	r4, r0, #3
 8009494:	f024 0403 	bic.w	r4, r4, #3
 8009498:	42a0      	cmp	r0, r4
 800949a:	d007      	beq.n	80094ac <sbrk_aligned+0x38>
 800949c:	1a21      	subs	r1, r4, r0
 800949e:	4628      	mov	r0, r5
 80094a0:	f002 faa4 	bl	800b9ec <_sbrk_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	d101      	bne.n	80094ac <sbrk_aligned+0x38>
 80094a8:	f04f 34ff 	mov.w	r4, #4294967295
 80094ac:	4620      	mov	r0, r4
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	20000a0c 	.word	0x20000a0c

080094b4 <_malloc_r>:
 80094b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b8:	1ccd      	adds	r5, r1, #3
 80094ba:	f025 0503 	bic.w	r5, r5, #3
 80094be:	3508      	adds	r5, #8
 80094c0:	2d0c      	cmp	r5, #12
 80094c2:	bf38      	it	cc
 80094c4:	250c      	movcc	r5, #12
 80094c6:	2d00      	cmp	r5, #0
 80094c8:	4607      	mov	r7, r0
 80094ca:	db01      	blt.n	80094d0 <_malloc_r+0x1c>
 80094cc:	42a9      	cmp	r1, r5
 80094ce:	d905      	bls.n	80094dc <_malloc_r+0x28>
 80094d0:	230c      	movs	r3, #12
 80094d2:	603b      	str	r3, [r7, #0]
 80094d4:	2600      	movs	r6, #0
 80094d6:	4630      	mov	r0, r6
 80094d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095b0 <_malloc_r+0xfc>
 80094e0:	f000 f868 	bl	80095b4 <__malloc_lock>
 80094e4:	f8d8 3000 	ldr.w	r3, [r8]
 80094e8:	461c      	mov	r4, r3
 80094ea:	bb5c      	cbnz	r4, 8009544 <_malloc_r+0x90>
 80094ec:	4629      	mov	r1, r5
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff ffc0 	bl	8009474 <sbrk_aligned>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	4604      	mov	r4, r0
 80094f8:	d155      	bne.n	80095a6 <_malloc_r+0xf2>
 80094fa:	f8d8 4000 	ldr.w	r4, [r8]
 80094fe:	4626      	mov	r6, r4
 8009500:	2e00      	cmp	r6, #0
 8009502:	d145      	bne.n	8009590 <_malloc_r+0xdc>
 8009504:	2c00      	cmp	r4, #0
 8009506:	d048      	beq.n	800959a <_malloc_r+0xe6>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	4631      	mov	r1, r6
 800950c:	4638      	mov	r0, r7
 800950e:	eb04 0903 	add.w	r9, r4, r3
 8009512:	f002 fa6b 	bl	800b9ec <_sbrk_r>
 8009516:	4581      	cmp	r9, r0
 8009518:	d13f      	bne.n	800959a <_malloc_r+0xe6>
 800951a:	6821      	ldr	r1, [r4, #0]
 800951c:	1a6d      	subs	r5, r5, r1
 800951e:	4629      	mov	r1, r5
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff ffa7 	bl	8009474 <sbrk_aligned>
 8009526:	3001      	adds	r0, #1
 8009528:	d037      	beq.n	800959a <_malloc_r+0xe6>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	442b      	add	r3, r5
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	f8d8 3000 	ldr.w	r3, [r8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d038      	beq.n	80095aa <_malloc_r+0xf6>
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	42a2      	cmp	r2, r4
 800953c:	d12b      	bne.n	8009596 <_malloc_r+0xe2>
 800953e:	2200      	movs	r2, #0
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e00f      	b.n	8009564 <_malloc_r+0xb0>
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	1b52      	subs	r2, r2, r5
 8009548:	d41f      	bmi.n	800958a <_malloc_r+0xd6>
 800954a:	2a0b      	cmp	r2, #11
 800954c:	d917      	bls.n	800957e <_malloc_r+0xca>
 800954e:	1961      	adds	r1, r4, r5
 8009550:	42a3      	cmp	r3, r4
 8009552:	6025      	str	r5, [r4, #0]
 8009554:	bf18      	it	ne
 8009556:	6059      	strne	r1, [r3, #4]
 8009558:	6863      	ldr	r3, [r4, #4]
 800955a:	bf08      	it	eq
 800955c:	f8c8 1000 	streq.w	r1, [r8]
 8009560:	5162      	str	r2, [r4, r5]
 8009562:	604b      	str	r3, [r1, #4]
 8009564:	4638      	mov	r0, r7
 8009566:	f104 060b 	add.w	r6, r4, #11
 800956a:	f000 f829 	bl	80095c0 <__malloc_unlock>
 800956e:	f026 0607 	bic.w	r6, r6, #7
 8009572:	1d23      	adds	r3, r4, #4
 8009574:	1af2      	subs	r2, r6, r3
 8009576:	d0ae      	beq.n	80094d6 <_malloc_r+0x22>
 8009578:	1b9b      	subs	r3, r3, r6
 800957a:	50a3      	str	r3, [r4, r2]
 800957c:	e7ab      	b.n	80094d6 <_malloc_r+0x22>
 800957e:	42a3      	cmp	r3, r4
 8009580:	6862      	ldr	r2, [r4, #4]
 8009582:	d1dd      	bne.n	8009540 <_malloc_r+0x8c>
 8009584:	f8c8 2000 	str.w	r2, [r8]
 8009588:	e7ec      	b.n	8009564 <_malloc_r+0xb0>
 800958a:	4623      	mov	r3, r4
 800958c:	6864      	ldr	r4, [r4, #4]
 800958e:	e7ac      	b.n	80094ea <_malloc_r+0x36>
 8009590:	4634      	mov	r4, r6
 8009592:	6876      	ldr	r6, [r6, #4]
 8009594:	e7b4      	b.n	8009500 <_malloc_r+0x4c>
 8009596:	4613      	mov	r3, r2
 8009598:	e7cc      	b.n	8009534 <_malloc_r+0x80>
 800959a:	230c      	movs	r3, #12
 800959c:	603b      	str	r3, [r7, #0]
 800959e:	4638      	mov	r0, r7
 80095a0:	f000 f80e 	bl	80095c0 <__malloc_unlock>
 80095a4:	e797      	b.n	80094d6 <_malloc_r+0x22>
 80095a6:	6025      	str	r5, [r4, #0]
 80095a8:	e7dc      	b.n	8009564 <_malloc_r+0xb0>
 80095aa:	605b      	str	r3, [r3, #4]
 80095ac:	deff      	udf	#255	; 0xff
 80095ae:	bf00      	nop
 80095b0:	20000a08 	.word	0x20000a08

080095b4 <__malloc_lock>:
 80095b4:	4801      	ldr	r0, [pc, #4]	; (80095bc <__malloc_lock+0x8>)
 80095b6:	f7ff b810 	b.w	80085da <__retarget_lock_acquire_recursive>
 80095ba:	bf00      	nop
 80095bc:	20000a05 	.word	0x20000a05

080095c0 <__malloc_unlock>:
 80095c0:	4801      	ldr	r0, [pc, #4]	; (80095c8 <__malloc_unlock+0x8>)
 80095c2:	f7ff b80c 	b.w	80085de <__retarget_lock_release_recursive>
 80095c6:	bf00      	nop
 80095c8:	20000a05 	.word	0x20000a05

080095cc <_Balloc>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	69c6      	ldr	r6, [r0, #28]
 80095d0:	4604      	mov	r4, r0
 80095d2:	460d      	mov	r5, r1
 80095d4:	b976      	cbnz	r6, 80095f4 <_Balloc+0x28>
 80095d6:	2010      	movs	r0, #16
 80095d8:	f7ff ff3c 	bl	8009454 <malloc>
 80095dc:	4602      	mov	r2, r0
 80095de:	61e0      	str	r0, [r4, #28]
 80095e0:	b920      	cbnz	r0, 80095ec <_Balloc+0x20>
 80095e2:	4b18      	ldr	r3, [pc, #96]	; (8009644 <_Balloc+0x78>)
 80095e4:	4818      	ldr	r0, [pc, #96]	; (8009648 <_Balloc+0x7c>)
 80095e6:	216b      	movs	r1, #107	; 0x6b
 80095e8:	f002 fa1a 	bl	800ba20 <__assert_func>
 80095ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f0:	6006      	str	r6, [r0, #0]
 80095f2:	60c6      	str	r6, [r0, #12]
 80095f4:	69e6      	ldr	r6, [r4, #28]
 80095f6:	68f3      	ldr	r3, [r6, #12]
 80095f8:	b183      	cbz	r3, 800961c <_Balloc+0x50>
 80095fa:	69e3      	ldr	r3, [r4, #28]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009602:	b9b8      	cbnz	r0, 8009634 <_Balloc+0x68>
 8009604:	2101      	movs	r1, #1
 8009606:	fa01 f605 	lsl.w	r6, r1, r5
 800960a:	1d72      	adds	r2, r6, #5
 800960c:	0092      	lsls	r2, r2, #2
 800960e:	4620      	mov	r0, r4
 8009610:	f002 fa24 	bl	800ba5c <_calloc_r>
 8009614:	b160      	cbz	r0, 8009630 <_Balloc+0x64>
 8009616:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800961a:	e00e      	b.n	800963a <_Balloc+0x6e>
 800961c:	2221      	movs	r2, #33	; 0x21
 800961e:	2104      	movs	r1, #4
 8009620:	4620      	mov	r0, r4
 8009622:	f002 fa1b 	bl	800ba5c <_calloc_r>
 8009626:	69e3      	ldr	r3, [r4, #28]
 8009628:	60f0      	str	r0, [r6, #12]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1e4      	bne.n	80095fa <_Balloc+0x2e>
 8009630:	2000      	movs	r0, #0
 8009632:	bd70      	pop	{r4, r5, r6, pc}
 8009634:	6802      	ldr	r2, [r0, #0]
 8009636:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800963a:	2300      	movs	r3, #0
 800963c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009640:	e7f7      	b.n	8009632 <_Balloc+0x66>
 8009642:	bf00      	nop
 8009644:	0800c92b 	.word	0x0800c92b
 8009648:	0800c9ab 	.word	0x0800c9ab

0800964c <_Bfree>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	69c6      	ldr	r6, [r0, #28]
 8009650:	4605      	mov	r5, r0
 8009652:	460c      	mov	r4, r1
 8009654:	b976      	cbnz	r6, 8009674 <_Bfree+0x28>
 8009656:	2010      	movs	r0, #16
 8009658:	f7ff fefc 	bl	8009454 <malloc>
 800965c:	4602      	mov	r2, r0
 800965e:	61e8      	str	r0, [r5, #28]
 8009660:	b920      	cbnz	r0, 800966c <_Bfree+0x20>
 8009662:	4b09      	ldr	r3, [pc, #36]	; (8009688 <_Bfree+0x3c>)
 8009664:	4809      	ldr	r0, [pc, #36]	; (800968c <_Bfree+0x40>)
 8009666:	218f      	movs	r1, #143	; 0x8f
 8009668:	f002 f9da 	bl	800ba20 <__assert_func>
 800966c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009670:	6006      	str	r6, [r0, #0]
 8009672:	60c6      	str	r6, [r0, #12]
 8009674:	b13c      	cbz	r4, 8009686 <_Bfree+0x3a>
 8009676:	69eb      	ldr	r3, [r5, #28]
 8009678:	6862      	ldr	r2, [r4, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009680:	6021      	str	r1, [r4, #0]
 8009682:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	0800c92b 	.word	0x0800c92b
 800968c:	0800c9ab 	.word	0x0800c9ab

08009690 <__multadd>:
 8009690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009694:	690d      	ldr	r5, [r1, #16]
 8009696:	4607      	mov	r7, r0
 8009698:	460c      	mov	r4, r1
 800969a:	461e      	mov	r6, r3
 800969c:	f101 0c14 	add.w	ip, r1, #20
 80096a0:	2000      	movs	r0, #0
 80096a2:	f8dc 3000 	ldr.w	r3, [ip]
 80096a6:	b299      	uxth	r1, r3
 80096a8:	fb02 6101 	mla	r1, r2, r1, r6
 80096ac:	0c1e      	lsrs	r6, r3, #16
 80096ae:	0c0b      	lsrs	r3, r1, #16
 80096b0:	fb02 3306 	mla	r3, r2, r6, r3
 80096b4:	b289      	uxth	r1, r1
 80096b6:	3001      	adds	r0, #1
 80096b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096bc:	4285      	cmp	r5, r0
 80096be:	f84c 1b04 	str.w	r1, [ip], #4
 80096c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096c6:	dcec      	bgt.n	80096a2 <__multadd+0x12>
 80096c8:	b30e      	cbz	r6, 800970e <__multadd+0x7e>
 80096ca:	68a3      	ldr	r3, [r4, #8]
 80096cc:	42ab      	cmp	r3, r5
 80096ce:	dc19      	bgt.n	8009704 <__multadd+0x74>
 80096d0:	6861      	ldr	r1, [r4, #4]
 80096d2:	4638      	mov	r0, r7
 80096d4:	3101      	adds	r1, #1
 80096d6:	f7ff ff79 	bl	80095cc <_Balloc>
 80096da:	4680      	mov	r8, r0
 80096dc:	b928      	cbnz	r0, 80096ea <__multadd+0x5a>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b0c      	ldr	r3, [pc, #48]	; (8009714 <__multadd+0x84>)
 80096e2:	480d      	ldr	r0, [pc, #52]	; (8009718 <__multadd+0x88>)
 80096e4:	21ba      	movs	r1, #186	; 0xba
 80096e6:	f002 f99b 	bl	800ba20 <__assert_func>
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	3202      	adds	r2, #2
 80096ee:	f104 010c 	add.w	r1, r4, #12
 80096f2:	0092      	lsls	r2, r2, #2
 80096f4:	300c      	adds	r0, #12
 80096f6:	f7fe ff7b 	bl	80085f0 <memcpy>
 80096fa:	4621      	mov	r1, r4
 80096fc:	4638      	mov	r0, r7
 80096fe:	f7ff ffa5 	bl	800964c <_Bfree>
 8009702:	4644      	mov	r4, r8
 8009704:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009708:	3501      	adds	r5, #1
 800970a:	615e      	str	r6, [r3, #20]
 800970c:	6125      	str	r5, [r4, #16]
 800970e:	4620      	mov	r0, r4
 8009710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009714:	0800c99a 	.word	0x0800c99a
 8009718:	0800c9ab 	.word	0x0800c9ab

0800971c <__s2b>:
 800971c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009720:	460c      	mov	r4, r1
 8009722:	4615      	mov	r5, r2
 8009724:	461f      	mov	r7, r3
 8009726:	2209      	movs	r2, #9
 8009728:	3308      	adds	r3, #8
 800972a:	4606      	mov	r6, r0
 800972c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009730:	2100      	movs	r1, #0
 8009732:	2201      	movs	r2, #1
 8009734:	429a      	cmp	r2, r3
 8009736:	db09      	blt.n	800974c <__s2b+0x30>
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff ff47 	bl	80095cc <_Balloc>
 800973e:	b940      	cbnz	r0, 8009752 <__s2b+0x36>
 8009740:	4602      	mov	r2, r0
 8009742:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <__s2b+0x8c>)
 8009744:	4819      	ldr	r0, [pc, #100]	; (80097ac <__s2b+0x90>)
 8009746:	21d3      	movs	r1, #211	; 0xd3
 8009748:	f002 f96a 	bl	800ba20 <__assert_func>
 800974c:	0052      	lsls	r2, r2, #1
 800974e:	3101      	adds	r1, #1
 8009750:	e7f0      	b.n	8009734 <__s2b+0x18>
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	6143      	str	r3, [r0, #20]
 8009756:	2d09      	cmp	r5, #9
 8009758:	f04f 0301 	mov.w	r3, #1
 800975c:	6103      	str	r3, [r0, #16]
 800975e:	dd16      	ble.n	800978e <__s2b+0x72>
 8009760:	f104 0909 	add.w	r9, r4, #9
 8009764:	46c8      	mov	r8, r9
 8009766:	442c      	add	r4, r5
 8009768:	f818 3b01 	ldrb.w	r3, [r8], #1
 800976c:	4601      	mov	r1, r0
 800976e:	3b30      	subs	r3, #48	; 0x30
 8009770:	220a      	movs	r2, #10
 8009772:	4630      	mov	r0, r6
 8009774:	f7ff ff8c 	bl	8009690 <__multadd>
 8009778:	45a0      	cmp	r8, r4
 800977a:	d1f5      	bne.n	8009768 <__s2b+0x4c>
 800977c:	f1a5 0408 	sub.w	r4, r5, #8
 8009780:	444c      	add	r4, r9
 8009782:	1b2d      	subs	r5, r5, r4
 8009784:	1963      	adds	r3, r4, r5
 8009786:	42bb      	cmp	r3, r7
 8009788:	db04      	blt.n	8009794 <__s2b+0x78>
 800978a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800978e:	340a      	adds	r4, #10
 8009790:	2509      	movs	r5, #9
 8009792:	e7f6      	b.n	8009782 <__s2b+0x66>
 8009794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009798:	4601      	mov	r1, r0
 800979a:	3b30      	subs	r3, #48	; 0x30
 800979c:	220a      	movs	r2, #10
 800979e:	4630      	mov	r0, r6
 80097a0:	f7ff ff76 	bl	8009690 <__multadd>
 80097a4:	e7ee      	b.n	8009784 <__s2b+0x68>
 80097a6:	bf00      	nop
 80097a8:	0800c99a 	.word	0x0800c99a
 80097ac:	0800c9ab 	.word	0x0800c9ab

080097b0 <__hi0bits>:
 80097b0:	0c03      	lsrs	r3, r0, #16
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	b9d3      	cbnz	r3, 80097ec <__hi0bits+0x3c>
 80097b6:	0400      	lsls	r0, r0, #16
 80097b8:	2310      	movs	r3, #16
 80097ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097be:	bf04      	itt	eq
 80097c0:	0200      	lsleq	r0, r0, #8
 80097c2:	3308      	addeq	r3, #8
 80097c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097c8:	bf04      	itt	eq
 80097ca:	0100      	lsleq	r0, r0, #4
 80097cc:	3304      	addeq	r3, #4
 80097ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097d2:	bf04      	itt	eq
 80097d4:	0080      	lsleq	r0, r0, #2
 80097d6:	3302      	addeq	r3, #2
 80097d8:	2800      	cmp	r0, #0
 80097da:	db05      	blt.n	80097e8 <__hi0bits+0x38>
 80097dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097e0:	f103 0301 	add.w	r3, r3, #1
 80097e4:	bf08      	it	eq
 80097e6:	2320      	moveq	r3, #32
 80097e8:	4618      	mov	r0, r3
 80097ea:	4770      	bx	lr
 80097ec:	2300      	movs	r3, #0
 80097ee:	e7e4      	b.n	80097ba <__hi0bits+0xa>

080097f0 <__lo0bits>:
 80097f0:	6803      	ldr	r3, [r0, #0]
 80097f2:	f013 0207 	ands.w	r2, r3, #7
 80097f6:	d00c      	beq.n	8009812 <__lo0bits+0x22>
 80097f8:	07d9      	lsls	r1, r3, #31
 80097fa:	d422      	bmi.n	8009842 <__lo0bits+0x52>
 80097fc:	079a      	lsls	r2, r3, #30
 80097fe:	bf49      	itett	mi
 8009800:	085b      	lsrmi	r3, r3, #1
 8009802:	089b      	lsrpl	r3, r3, #2
 8009804:	6003      	strmi	r3, [r0, #0]
 8009806:	2201      	movmi	r2, #1
 8009808:	bf5c      	itt	pl
 800980a:	6003      	strpl	r3, [r0, #0]
 800980c:	2202      	movpl	r2, #2
 800980e:	4610      	mov	r0, r2
 8009810:	4770      	bx	lr
 8009812:	b299      	uxth	r1, r3
 8009814:	b909      	cbnz	r1, 800981a <__lo0bits+0x2a>
 8009816:	0c1b      	lsrs	r3, r3, #16
 8009818:	2210      	movs	r2, #16
 800981a:	b2d9      	uxtb	r1, r3
 800981c:	b909      	cbnz	r1, 8009822 <__lo0bits+0x32>
 800981e:	3208      	adds	r2, #8
 8009820:	0a1b      	lsrs	r3, r3, #8
 8009822:	0719      	lsls	r1, r3, #28
 8009824:	bf04      	itt	eq
 8009826:	091b      	lsreq	r3, r3, #4
 8009828:	3204      	addeq	r2, #4
 800982a:	0799      	lsls	r1, r3, #30
 800982c:	bf04      	itt	eq
 800982e:	089b      	lsreq	r3, r3, #2
 8009830:	3202      	addeq	r2, #2
 8009832:	07d9      	lsls	r1, r3, #31
 8009834:	d403      	bmi.n	800983e <__lo0bits+0x4e>
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	f102 0201 	add.w	r2, r2, #1
 800983c:	d003      	beq.n	8009846 <__lo0bits+0x56>
 800983e:	6003      	str	r3, [r0, #0]
 8009840:	e7e5      	b.n	800980e <__lo0bits+0x1e>
 8009842:	2200      	movs	r2, #0
 8009844:	e7e3      	b.n	800980e <__lo0bits+0x1e>
 8009846:	2220      	movs	r2, #32
 8009848:	e7e1      	b.n	800980e <__lo0bits+0x1e>
	...

0800984c <__i2b>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	2101      	movs	r1, #1
 8009852:	f7ff febb 	bl	80095cc <_Balloc>
 8009856:	4602      	mov	r2, r0
 8009858:	b928      	cbnz	r0, 8009866 <__i2b+0x1a>
 800985a:	4b05      	ldr	r3, [pc, #20]	; (8009870 <__i2b+0x24>)
 800985c:	4805      	ldr	r0, [pc, #20]	; (8009874 <__i2b+0x28>)
 800985e:	f240 1145 	movw	r1, #325	; 0x145
 8009862:	f002 f8dd 	bl	800ba20 <__assert_func>
 8009866:	2301      	movs	r3, #1
 8009868:	6144      	str	r4, [r0, #20]
 800986a:	6103      	str	r3, [r0, #16]
 800986c:	bd10      	pop	{r4, pc}
 800986e:	bf00      	nop
 8009870:	0800c99a 	.word	0x0800c99a
 8009874:	0800c9ab 	.word	0x0800c9ab

08009878 <__multiply>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	4691      	mov	r9, r2
 800987e:	690a      	ldr	r2, [r1, #16]
 8009880:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009884:	429a      	cmp	r2, r3
 8009886:	bfb8      	it	lt
 8009888:	460b      	movlt	r3, r1
 800988a:	460c      	mov	r4, r1
 800988c:	bfbc      	itt	lt
 800988e:	464c      	movlt	r4, r9
 8009890:	4699      	movlt	r9, r3
 8009892:	6927      	ldr	r7, [r4, #16]
 8009894:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009898:	68a3      	ldr	r3, [r4, #8]
 800989a:	6861      	ldr	r1, [r4, #4]
 800989c:	eb07 060a 	add.w	r6, r7, sl
 80098a0:	42b3      	cmp	r3, r6
 80098a2:	b085      	sub	sp, #20
 80098a4:	bfb8      	it	lt
 80098a6:	3101      	addlt	r1, #1
 80098a8:	f7ff fe90 	bl	80095cc <_Balloc>
 80098ac:	b930      	cbnz	r0, 80098bc <__multiply+0x44>
 80098ae:	4602      	mov	r2, r0
 80098b0:	4b44      	ldr	r3, [pc, #272]	; (80099c4 <__multiply+0x14c>)
 80098b2:	4845      	ldr	r0, [pc, #276]	; (80099c8 <__multiply+0x150>)
 80098b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80098b8:	f002 f8b2 	bl	800ba20 <__assert_func>
 80098bc:	f100 0514 	add.w	r5, r0, #20
 80098c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098c4:	462b      	mov	r3, r5
 80098c6:	2200      	movs	r2, #0
 80098c8:	4543      	cmp	r3, r8
 80098ca:	d321      	bcc.n	8009910 <__multiply+0x98>
 80098cc:	f104 0314 	add.w	r3, r4, #20
 80098d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80098d4:	f109 0314 	add.w	r3, r9, #20
 80098d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80098dc:	9202      	str	r2, [sp, #8]
 80098de:	1b3a      	subs	r2, r7, r4
 80098e0:	3a15      	subs	r2, #21
 80098e2:	f022 0203 	bic.w	r2, r2, #3
 80098e6:	3204      	adds	r2, #4
 80098e8:	f104 0115 	add.w	r1, r4, #21
 80098ec:	428f      	cmp	r7, r1
 80098ee:	bf38      	it	cc
 80098f0:	2204      	movcc	r2, #4
 80098f2:	9201      	str	r2, [sp, #4]
 80098f4:	9a02      	ldr	r2, [sp, #8]
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d80c      	bhi.n	8009916 <__multiply+0x9e>
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	dd03      	ble.n	8009908 <__multiply+0x90>
 8009900:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009904:	2b00      	cmp	r3, #0
 8009906:	d05b      	beq.n	80099c0 <__multiply+0x148>
 8009908:	6106      	str	r6, [r0, #16]
 800990a:	b005      	add	sp, #20
 800990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009910:	f843 2b04 	str.w	r2, [r3], #4
 8009914:	e7d8      	b.n	80098c8 <__multiply+0x50>
 8009916:	f8b3 a000 	ldrh.w	sl, [r3]
 800991a:	f1ba 0f00 	cmp.w	sl, #0
 800991e:	d024      	beq.n	800996a <__multiply+0xf2>
 8009920:	f104 0e14 	add.w	lr, r4, #20
 8009924:	46a9      	mov	r9, r5
 8009926:	f04f 0c00 	mov.w	ip, #0
 800992a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800992e:	f8d9 1000 	ldr.w	r1, [r9]
 8009932:	fa1f fb82 	uxth.w	fp, r2
 8009936:	b289      	uxth	r1, r1
 8009938:	fb0a 110b 	mla	r1, sl, fp, r1
 800993c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009940:	f8d9 2000 	ldr.w	r2, [r9]
 8009944:	4461      	add	r1, ip
 8009946:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800994a:	fb0a c20b 	mla	r2, sl, fp, ip
 800994e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009952:	b289      	uxth	r1, r1
 8009954:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009958:	4577      	cmp	r7, lr
 800995a:	f849 1b04 	str.w	r1, [r9], #4
 800995e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009962:	d8e2      	bhi.n	800992a <__multiply+0xb2>
 8009964:	9a01      	ldr	r2, [sp, #4]
 8009966:	f845 c002 	str.w	ip, [r5, r2]
 800996a:	9a03      	ldr	r2, [sp, #12]
 800996c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009970:	3304      	adds	r3, #4
 8009972:	f1b9 0f00 	cmp.w	r9, #0
 8009976:	d021      	beq.n	80099bc <__multiply+0x144>
 8009978:	6829      	ldr	r1, [r5, #0]
 800997a:	f104 0c14 	add.w	ip, r4, #20
 800997e:	46ae      	mov	lr, r5
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	f8bc b000 	ldrh.w	fp, [ip]
 8009988:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800998c:	fb09 220b 	mla	r2, r9, fp, r2
 8009990:	4452      	add	r2, sl
 8009992:	b289      	uxth	r1, r1
 8009994:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009998:	f84e 1b04 	str.w	r1, [lr], #4
 800999c:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099a4:	f8be 1000 	ldrh.w	r1, [lr]
 80099a8:	fb09 110a 	mla	r1, r9, sl, r1
 80099ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80099b0:	4567      	cmp	r7, ip
 80099b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099b6:	d8e5      	bhi.n	8009984 <__multiply+0x10c>
 80099b8:	9a01      	ldr	r2, [sp, #4]
 80099ba:	50a9      	str	r1, [r5, r2]
 80099bc:	3504      	adds	r5, #4
 80099be:	e799      	b.n	80098f4 <__multiply+0x7c>
 80099c0:	3e01      	subs	r6, #1
 80099c2:	e79b      	b.n	80098fc <__multiply+0x84>
 80099c4:	0800c99a 	.word	0x0800c99a
 80099c8:	0800c9ab 	.word	0x0800c9ab

080099cc <__pow5mult>:
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	4615      	mov	r5, r2
 80099d2:	f012 0203 	ands.w	r2, r2, #3
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	d007      	beq.n	80099ec <__pow5mult+0x20>
 80099dc:	4c25      	ldr	r4, [pc, #148]	; (8009a74 <__pow5mult+0xa8>)
 80099de:	3a01      	subs	r2, #1
 80099e0:	2300      	movs	r3, #0
 80099e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099e6:	f7ff fe53 	bl	8009690 <__multadd>
 80099ea:	4607      	mov	r7, r0
 80099ec:	10ad      	asrs	r5, r5, #2
 80099ee:	d03d      	beq.n	8009a6c <__pow5mult+0xa0>
 80099f0:	69f4      	ldr	r4, [r6, #28]
 80099f2:	b97c      	cbnz	r4, 8009a14 <__pow5mult+0x48>
 80099f4:	2010      	movs	r0, #16
 80099f6:	f7ff fd2d 	bl	8009454 <malloc>
 80099fa:	4602      	mov	r2, r0
 80099fc:	61f0      	str	r0, [r6, #28]
 80099fe:	b928      	cbnz	r0, 8009a0c <__pow5mult+0x40>
 8009a00:	4b1d      	ldr	r3, [pc, #116]	; (8009a78 <__pow5mult+0xac>)
 8009a02:	481e      	ldr	r0, [pc, #120]	; (8009a7c <__pow5mult+0xb0>)
 8009a04:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a08:	f002 f80a 	bl	800ba20 <__assert_func>
 8009a0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a10:	6004      	str	r4, [r0, #0]
 8009a12:	60c4      	str	r4, [r0, #12]
 8009a14:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a1c:	b94c      	cbnz	r4, 8009a32 <__pow5mult+0x66>
 8009a1e:	f240 2171 	movw	r1, #625	; 0x271
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7ff ff12 	bl	800984c <__i2b>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a2e:	4604      	mov	r4, r0
 8009a30:	6003      	str	r3, [r0, #0]
 8009a32:	f04f 0900 	mov.w	r9, #0
 8009a36:	07eb      	lsls	r3, r5, #31
 8009a38:	d50a      	bpl.n	8009a50 <__pow5mult+0x84>
 8009a3a:	4639      	mov	r1, r7
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff ff1a 	bl	8009878 <__multiply>
 8009a44:	4639      	mov	r1, r7
 8009a46:	4680      	mov	r8, r0
 8009a48:	4630      	mov	r0, r6
 8009a4a:	f7ff fdff 	bl	800964c <_Bfree>
 8009a4e:	4647      	mov	r7, r8
 8009a50:	106d      	asrs	r5, r5, #1
 8009a52:	d00b      	beq.n	8009a6c <__pow5mult+0xa0>
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	b938      	cbnz	r0, 8009a68 <__pow5mult+0x9c>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff ff0b 	bl	8009878 <__multiply>
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	f8c0 9000 	str.w	r9, [r0]
 8009a68:	4604      	mov	r4, r0
 8009a6a:	e7e4      	b.n	8009a36 <__pow5mult+0x6a>
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	bf00      	nop
 8009a74:	0800caf8 	.word	0x0800caf8
 8009a78:	0800c92b 	.word	0x0800c92b
 8009a7c:	0800c9ab 	.word	0x0800c9ab

08009a80 <__lshift>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	460c      	mov	r4, r1
 8009a86:	6849      	ldr	r1, [r1, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a8e:	68a3      	ldr	r3, [r4, #8]
 8009a90:	4607      	mov	r7, r0
 8009a92:	4691      	mov	r9, r2
 8009a94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a98:	f108 0601 	add.w	r6, r8, #1
 8009a9c:	42b3      	cmp	r3, r6
 8009a9e:	db0b      	blt.n	8009ab8 <__lshift+0x38>
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff fd93 	bl	80095cc <_Balloc>
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b948      	cbnz	r0, 8009abe <__lshift+0x3e>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <__lshift+0xd0>)
 8009aae:	4829      	ldr	r0, [pc, #164]	; (8009b54 <__lshift+0xd4>)
 8009ab0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ab4:	f001 ffb4 	bl	800ba20 <__assert_func>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	e7ee      	b.n	8009a9c <__lshift+0x1c>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f100 0114 	add.w	r1, r0, #20
 8009ac4:	f100 0210 	add.w	r2, r0, #16
 8009ac8:	4618      	mov	r0, r3
 8009aca:	4553      	cmp	r3, sl
 8009acc:	db33      	blt.n	8009b36 <__lshift+0xb6>
 8009ace:	6920      	ldr	r0, [r4, #16]
 8009ad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad4:	f104 0314 	add.w	r3, r4, #20
 8009ad8:	f019 091f 	ands.w	r9, r9, #31
 8009adc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ae4:	d02b      	beq.n	8009b3e <__lshift+0xbe>
 8009ae6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aea:	468a      	mov	sl, r1
 8009aec:	2200      	movs	r2, #0
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	fa00 f009 	lsl.w	r0, r0, r9
 8009af4:	4310      	orrs	r0, r2
 8009af6:	f84a 0b04 	str.w	r0, [sl], #4
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	459c      	cmp	ip, r3
 8009b00:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b04:	d8f3      	bhi.n	8009aee <__lshift+0x6e>
 8009b06:	ebac 0304 	sub.w	r3, ip, r4
 8009b0a:	3b15      	subs	r3, #21
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	3304      	adds	r3, #4
 8009b12:	f104 0015 	add.w	r0, r4, #21
 8009b16:	4584      	cmp	ip, r0
 8009b18:	bf38      	it	cc
 8009b1a:	2304      	movcc	r3, #4
 8009b1c:	50ca      	str	r2, [r1, r3]
 8009b1e:	b10a      	cbz	r2, 8009b24 <__lshift+0xa4>
 8009b20:	f108 0602 	add.w	r6, r8, #2
 8009b24:	3e01      	subs	r6, #1
 8009b26:	4638      	mov	r0, r7
 8009b28:	612e      	str	r6, [r5, #16]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f7ff fd8e 	bl	800964c <_Bfree>
 8009b30:	4628      	mov	r0, r5
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	e7c5      	b.n	8009aca <__lshift+0x4a>
 8009b3e:	3904      	subs	r1, #4
 8009b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b48:	459c      	cmp	ip, r3
 8009b4a:	d8f9      	bhi.n	8009b40 <__lshift+0xc0>
 8009b4c:	e7ea      	b.n	8009b24 <__lshift+0xa4>
 8009b4e:	bf00      	nop
 8009b50:	0800c99a 	.word	0x0800c99a
 8009b54:	0800c9ab 	.word	0x0800c9ab

08009b58 <__mcmp>:
 8009b58:	b530      	push	{r4, r5, lr}
 8009b5a:	6902      	ldr	r2, [r0, #16]
 8009b5c:	690c      	ldr	r4, [r1, #16]
 8009b5e:	1b12      	subs	r2, r2, r4
 8009b60:	d10e      	bne.n	8009b80 <__mcmp+0x28>
 8009b62:	f100 0314 	add.w	r3, r0, #20
 8009b66:	3114      	adds	r1, #20
 8009b68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b78:	42a5      	cmp	r5, r4
 8009b7a:	d003      	beq.n	8009b84 <__mcmp+0x2c>
 8009b7c:	d305      	bcc.n	8009b8a <__mcmp+0x32>
 8009b7e:	2201      	movs	r2, #1
 8009b80:	4610      	mov	r0, r2
 8009b82:	bd30      	pop	{r4, r5, pc}
 8009b84:	4283      	cmp	r3, r0
 8009b86:	d3f3      	bcc.n	8009b70 <__mcmp+0x18>
 8009b88:	e7fa      	b.n	8009b80 <__mcmp+0x28>
 8009b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8e:	e7f7      	b.n	8009b80 <__mcmp+0x28>

08009b90 <__mdiff>:
 8009b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	460c      	mov	r4, r1
 8009b96:	4606      	mov	r6, r0
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	4690      	mov	r8, r2
 8009b9e:	f7ff ffdb 	bl	8009b58 <__mcmp>
 8009ba2:	1e05      	subs	r5, r0, #0
 8009ba4:	d110      	bne.n	8009bc8 <__mdiff+0x38>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7ff fd0f 	bl	80095cc <_Balloc>
 8009bae:	b930      	cbnz	r0, 8009bbe <__mdiff+0x2e>
 8009bb0:	4b3a      	ldr	r3, [pc, #232]	; (8009c9c <__mdiff+0x10c>)
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	f240 2137 	movw	r1, #567	; 0x237
 8009bb8:	4839      	ldr	r0, [pc, #228]	; (8009ca0 <__mdiff+0x110>)
 8009bba:	f001 ff31 	bl	800ba20 <__assert_func>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc8:	bfa4      	itt	ge
 8009bca:	4643      	movge	r3, r8
 8009bcc:	46a0      	movge	r8, r4
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009bd4:	bfa6      	itte	ge
 8009bd6:	461c      	movge	r4, r3
 8009bd8:	2500      	movge	r5, #0
 8009bda:	2501      	movlt	r5, #1
 8009bdc:	f7ff fcf6 	bl	80095cc <_Balloc>
 8009be0:	b920      	cbnz	r0, 8009bec <__mdiff+0x5c>
 8009be2:	4b2e      	ldr	r3, [pc, #184]	; (8009c9c <__mdiff+0x10c>)
 8009be4:	4602      	mov	r2, r0
 8009be6:	f240 2145 	movw	r1, #581	; 0x245
 8009bea:	e7e5      	b.n	8009bb8 <__mdiff+0x28>
 8009bec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009bf0:	6926      	ldr	r6, [r4, #16]
 8009bf2:	60c5      	str	r5, [r0, #12]
 8009bf4:	f104 0914 	add.w	r9, r4, #20
 8009bf8:	f108 0514 	add.w	r5, r8, #20
 8009bfc:	f100 0e14 	add.w	lr, r0, #20
 8009c00:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c08:	f108 0210 	add.w	r2, r8, #16
 8009c0c:	46f2      	mov	sl, lr
 8009c0e:	2100      	movs	r1, #0
 8009c10:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c14:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c18:	fa11 f88b 	uxtah	r8, r1, fp
 8009c1c:	b299      	uxth	r1, r3
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	eba8 0801 	sub.w	r8, r8, r1
 8009c24:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c28:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c2c:	fa1f f888 	uxth.w	r8, r8
 8009c30:	1419      	asrs	r1, r3, #16
 8009c32:	454e      	cmp	r6, r9
 8009c34:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c38:	f84a 3b04 	str.w	r3, [sl], #4
 8009c3c:	d8e8      	bhi.n	8009c10 <__mdiff+0x80>
 8009c3e:	1b33      	subs	r3, r6, r4
 8009c40:	3b15      	subs	r3, #21
 8009c42:	f023 0303 	bic.w	r3, r3, #3
 8009c46:	3304      	adds	r3, #4
 8009c48:	3415      	adds	r4, #21
 8009c4a:	42a6      	cmp	r6, r4
 8009c4c:	bf38      	it	cc
 8009c4e:	2304      	movcc	r3, #4
 8009c50:	441d      	add	r5, r3
 8009c52:	4473      	add	r3, lr
 8009c54:	469e      	mov	lr, r3
 8009c56:	462e      	mov	r6, r5
 8009c58:	4566      	cmp	r6, ip
 8009c5a:	d30e      	bcc.n	8009c7a <__mdiff+0xea>
 8009c5c:	f10c 0203 	add.w	r2, ip, #3
 8009c60:	1b52      	subs	r2, r2, r5
 8009c62:	f022 0203 	bic.w	r2, r2, #3
 8009c66:	3d03      	subs	r5, #3
 8009c68:	45ac      	cmp	ip, r5
 8009c6a:	bf38      	it	cc
 8009c6c:	2200      	movcc	r2, #0
 8009c6e:	4413      	add	r3, r2
 8009c70:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009c74:	b17a      	cbz	r2, 8009c96 <__mdiff+0x106>
 8009c76:	6107      	str	r7, [r0, #16]
 8009c78:	e7a4      	b.n	8009bc4 <__mdiff+0x34>
 8009c7a:	f856 8b04 	ldr.w	r8, [r6], #4
 8009c7e:	fa11 f288 	uxtah	r2, r1, r8
 8009c82:	1414      	asrs	r4, r2, #16
 8009c84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009c88:	b292      	uxth	r2, r2
 8009c8a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009c8e:	f84e 2b04 	str.w	r2, [lr], #4
 8009c92:	1421      	asrs	r1, r4, #16
 8009c94:	e7e0      	b.n	8009c58 <__mdiff+0xc8>
 8009c96:	3f01      	subs	r7, #1
 8009c98:	e7ea      	b.n	8009c70 <__mdiff+0xe0>
 8009c9a:	bf00      	nop
 8009c9c:	0800c99a 	.word	0x0800c99a
 8009ca0:	0800c9ab 	.word	0x0800c9ab

08009ca4 <__ulp>:
 8009ca4:	b082      	sub	sp, #8
 8009ca6:	ed8d 0b00 	vstr	d0, [sp]
 8009caa:	9a01      	ldr	r2, [sp, #4]
 8009cac:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <__ulp+0x48>)
 8009cae:	4013      	ands	r3, r2
 8009cb0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dc08      	bgt.n	8009cca <__ulp+0x26>
 8009cb8:	425b      	negs	r3, r3
 8009cba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009cbe:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cc2:	da04      	bge.n	8009cce <__ulp+0x2a>
 8009cc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009cc8:	4113      	asrs	r3, r2
 8009cca:	2200      	movs	r2, #0
 8009ccc:	e008      	b.n	8009ce0 <__ulp+0x3c>
 8009cce:	f1a2 0314 	sub.w	r3, r2, #20
 8009cd2:	2b1e      	cmp	r3, #30
 8009cd4:	bfda      	itte	le
 8009cd6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009cda:	40da      	lsrle	r2, r3
 8009cdc:	2201      	movgt	r2, #1
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4610      	mov	r0, r2
 8009ce4:	ec41 0b10 	vmov	d0, r0, r1
 8009ce8:	b002      	add	sp, #8
 8009cea:	4770      	bx	lr
 8009cec:	7ff00000 	.word	0x7ff00000

08009cf0 <__b2d>:
 8009cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf4:	6906      	ldr	r6, [r0, #16]
 8009cf6:	f100 0814 	add.w	r8, r0, #20
 8009cfa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009cfe:	1f37      	subs	r7, r6, #4
 8009d00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d04:	4610      	mov	r0, r2
 8009d06:	f7ff fd53 	bl	80097b0 <__hi0bits>
 8009d0a:	f1c0 0320 	rsb	r3, r0, #32
 8009d0e:	280a      	cmp	r0, #10
 8009d10:	600b      	str	r3, [r1, #0]
 8009d12:	491b      	ldr	r1, [pc, #108]	; (8009d80 <__b2d+0x90>)
 8009d14:	dc15      	bgt.n	8009d42 <__b2d+0x52>
 8009d16:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d1a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d1e:	45b8      	cmp	r8, r7
 8009d20:	ea43 0501 	orr.w	r5, r3, r1
 8009d24:	bf34      	ite	cc
 8009d26:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d2a:	2300      	movcs	r3, #0
 8009d2c:	3015      	adds	r0, #21
 8009d2e:	fa02 f000 	lsl.w	r0, r2, r0
 8009d32:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d36:	4303      	orrs	r3, r0
 8009d38:	461c      	mov	r4, r3
 8009d3a:	ec45 4b10 	vmov	d0, r4, r5
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	45b8      	cmp	r8, r7
 8009d44:	bf3a      	itte	cc
 8009d46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d4a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d4e:	2300      	movcs	r3, #0
 8009d50:	380b      	subs	r0, #11
 8009d52:	d012      	beq.n	8009d7a <__b2d+0x8a>
 8009d54:	f1c0 0120 	rsb	r1, r0, #32
 8009d58:	fa23 f401 	lsr.w	r4, r3, r1
 8009d5c:	4082      	lsls	r2, r0
 8009d5e:	4322      	orrs	r2, r4
 8009d60:	4547      	cmp	r7, r8
 8009d62:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009d66:	bf8c      	ite	hi
 8009d68:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d6c:	2200      	movls	r2, #0
 8009d6e:	4083      	lsls	r3, r0
 8009d70:	40ca      	lsrs	r2, r1
 8009d72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d76:	4313      	orrs	r3, r2
 8009d78:	e7de      	b.n	8009d38 <__b2d+0x48>
 8009d7a:	ea42 0501 	orr.w	r5, r2, r1
 8009d7e:	e7db      	b.n	8009d38 <__b2d+0x48>
 8009d80:	3ff00000 	.word	0x3ff00000

08009d84 <__d2b>:
 8009d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d88:	460f      	mov	r7, r1
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	ec59 8b10 	vmov	r8, r9, d0
 8009d90:	4616      	mov	r6, r2
 8009d92:	f7ff fc1b 	bl	80095cc <_Balloc>
 8009d96:	4604      	mov	r4, r0
 8009d98:	b930      	cbnz	r0, 8009da8 <__d2b+0x24>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__d2b+0xac>)
 8009d9e:	4825      	ldr	r0, [pc, #148]	; (8009e34 <__d2b+0xb0>)
 8009da0:	f240 310f 	movw	r1, #783	; 0x30f
 8009da4:	f001 fe3c 	bl	800ba20 <__assert_func>
 8009da8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009db0:	bb2d      	cbnz	r5, 8009dfe <__d2b+0x7a>
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	f1b8 0300 	subs.w	r3, r8, #0
 8009db8:	d026      	beq.n	8009e08 <__d2b+0x84>
 8009dba:	4668      	mov	r0, sp
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	f7ff fd17 	bl	80097f0 <__lo0bits>
 8009dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dc6:	b1e8      	cbz	r0, 8009e04 <__d2b+0x80>
 8009dc8:	f1c0 0320 	rsb	r3, r0, #32
 8009dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd0:	430b      	orrs	r3, r1
 8009dd2:	40c2      	lsrs	r2, r0
 8009dd4:	6163      	str	r3, [r4, #20]
 8009dd6:	9201      	str	r2, [sp, #4]
 8009dd8:	9b01      	ldr	r3, [sp, #4]
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	bf14      	ite	ne
 8009de0:	2202      	movne	r2, #2
 8009de2:	2201      	moveq	r2, #1
 8009de4:	6122      	str	r2, [r4, #16]
 8009de6:	b1bd      	cbz	r5, 8009e18 <__d2b+0x94>
 8009de8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009dec:	4405      	add	r5, r0
 8009dee:	603d      	str	r5, [r7, #0]
 8009df0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	4620      	mov	r0, r4
 8009df8:	b003      	add	sp, #12
 8009dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e02:	e7d6      	b.n	8009db2 <__d2b+0x2e>
 8009e04:	6161      	str	r1, [r4, #20]
 8009e06:	e7e7      	b.n	8009dd8 <__d2b+0x54>
 8009e08:	a801      	add	r0, sp, #4
 8009e0a:	f7ff fcf1 	bl	80097f0 <__lo0bits>
 8009e0e:	9b01      	ldr	r3, [sp, #4]
 8009e10:	6163      	str	r3, [r4, #20]
 8009e12:	3020      	adds	r0, #32
 8009e14:	2201      	movs	r2, #1
 8009e16:	e7e5      	b.n	8009de4 <__d2b+0x60>
 8009e18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e20:	6038      	str	r0, [r7, #0]
 8009e22:	6918      	ldr	r0, [r3, #16]
 8009e24:	f7ff fcc4 	bl	80097b0 <__hi0bits>
 8009e28:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e2c:	e7e2      	b.n	8009df4 <__d2b+0x70>
 8009e2e:	bf00      	nop
 8009e30:	0800c99a 	.word	0x0800c99a
 8009e34:	0800c9ab 	.word	0x0800c9ab

08009e38 <__ratio>:
 8009e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	4688      	mov	r8, r1
 8009e3e:	4669      	mov	r1, sp
 8009e40:	4681      	mov	r9, r0
 8009e42:	f7ff ff55 	bl	8009cf0 <__b2d>
 8009e46:	a901      	add	r1, sp, #4
 8009e48:	4640      	mov	r0, r8
 8009e4a:	ec55 4b10 	vmov	r4, r5, d0
 8009e4e:	f7ff ff4f 	bl	8009cf0 <__b2d>
 8009e52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e5a:	eba3 0c02 	sub.w	ip, r3, r2
 8009e5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e68:	ec51 0b10 	vmov	r0, r1, d0
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	bfd6      	itet	le
 8009e70:	460a      	movle	r2, r1
 8009e72:	462a      	movgt	r2, r5
 8009e74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e78:	468b      	mov	fp, r1
 8009e7a:	462f      	mov	r7, r5
 8009e7c:	bfd4      	ite	le
 8009e7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009e82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e86:	4620      	mov	r0, r4
 8009e88:	ee10 2a10 	vmov	r2, s0
 8009e8c:	465b      	mov	r3, fp
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fcec 	bl	800086c <__aeabi_ddiv>
 8009e94:	ec41 0b10 	vmov	d0, r0, r1
 8009e98:	b003      	add	sp, #12
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e9e <__copybits>:
 8009e9e:	3901      	subs	r1, #1
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	1149      	asrs	r1, r1, #5
 8009ea4:	6914      	ldr	r4, [r2, #16]
 8009ea6:	3101      	adds	r1, #1
 8009ea8:	f102 0314 	add.w	r3, r2, #20
 8009eac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009eb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009eb4:	1f05      	subs	r5, r0, #4
 8009eb6:	42a3      	cmp	r3, r4
 8009eb8:	d30c      	bcc.n	8009ed4 <__copybits+0x36>
 8009eba:	1aa3      	subs	r3, r4, r2
 8009ebc:	3b11      	subs	r3, #17
 8009ebe:	f023 0303 	bic.w	r3, r3, #3
 8009ec2:	3211      	adds	r2, #17
 8009ec4:	42a2      	cmp	r2, r4
 8009ec6:	bf88      	it	hi
 8009ec8:	2300      	movhi	r3, #0
 8009eca:	4418      	add	r0, r3
 8009ecc:	2300      	movs	r3, #0
 8009ece:	4288      	cmp	r0, r1
 8009ed0:	d305      	bcc.n	8009ede <__copybits+0x40>
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ed8:	f845 6f04 	str.w	r6, [r5, #4]!
 8009edc:	e7eb      	b.n	8009eb6 <__copybits+0x18>
 8009ede:	f840 3b04 	str.w	r3, [r0], #4
 8009ee2:	e7f4      	b.n	8009ece <__copybits+0x30>

08009ee4 <__any_on>:
 8009ee4:	f100 0214 	add.w	r2, r0, #20
 8009ee8:	6900      	ldr	r0, [r0, #16]
 8009eea:	114b      	asrs	r3, r1, #5
 8009eec:	4298      	cmp	r0, r3
 8009eee:	b510      	push	{r4, lr}
 8009ef0:	db11      	blt.n	8009f16 <__any_on+0x32>
 8009ef2:	dd0a      	ble.n	8009f0a <__any_on+0x26>
 8009ef4:	f011 011f 	ands.w	r1, r1, #31
 8009ef8:	d007      	beq.n	8009f0a <__any_on+0x26>
 8009efa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009efe:	fa24 f001 	lsr.w	r0, r4, r1
 8009f02:	fa00 f101 	lsl.w	r1, r0, r1
 8009f06:	428c      	cmp	r4, r1
 8009f08:	d10b      	bne.n	8009f22 <__any_on+0x3e>
 8009f0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d803      	bhi.n	8009f1a <__any_on+0x36>
 8009f12:	2000      	movs	r0, #0
 8009f14:	bd10      	pop	{r4, pc}
 8009f16:	4603      	mov	r3, r0
 8009f18:	e7f7      	b.n	8009f0a <__any_on+0x26>
 8009f1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f1e:	2900      	cmp	r1, #0
 8009f20:	d0f5      	beq.n	8009f0e <__any_on+0x2a>
 8009f22:	2001      	movs	r0, #1
 8009f24:	e7f6      	b.n	8009f14 <__any_on+0x30>

08009f26 <sulp>:
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	ec45 4b10 	vmov	d0, r4, r5
 8009f30:	4616      	mov	r6, r2
 8009f32:	f7ff feb7 	bl	8009ca4 <__ulp>
 8009f36:	ec51 0b10 	vmov	r0, r1, d0
 8009f3a:	b17e      	cbz	r6, 8009f5c <sulp+0x36>
 8009f3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f40:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	dd09      	ble.n	8009f5c <sulp+0x36>
 8009f48:	051b      	lsls	r3, r3, #20
 8009f4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f4e:	2400      	movs	r4, #0
 8009f50:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009f54:	4622      	mov	r2, r4
 8009f56:	462b      	mov	r3, r5
 8009f58:	f7f6 fb5e 	bl	8000618 <__aeabi_dmul>
 8009f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f60 <_strtod_l>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	ed2d 8b02 	vpush	{d8}
 8009f68:	b09b      	sub	sp, #108	; 0x6c
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	9213      	str	r2, [sp, #76]	; 0x4c
 8009f6e:	2200      	movs	r2, #0
 8009f70:	9216      	str	r2, [sp, #88]	; 0x58
 8009f72:	460d      	mov	r5, r1
 8009f74:	f04f 0800 	mov.w	r8, #0
 8009f78:	f04f 0900 	mov.w	r9, #0
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	9215      	str	r2, [sp, #84]	; 0x54
 8009f80:	7811      	ldrb	r1, [r2, #0]
 8009f82:	292b      	cmp	r1, #43	; 0x2b
 8009f84:	d04c      	beq.n	800a020 <_strtod_l+0xc0>
 8009f86:	d83a      	bhi.n	8009ffe <_strtod_l+0x9e>
 8009f88:	290d      	cmp	r1, #13
 8009f8a:	d834      	bhi.n	8009ff6 <_strtod_l+0x96>
 8009f8c:	2908      	cmp	r1, #8
 8009f8e:	d834      	bhi.n	8009ffa <_strtod_l+0x9a>
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d03d      	beq.n	800a010 <_strtod_l+0xb0>
 8009f94:	2200      	movs	r2, #0
 8009f96:	920a      	str	r2, [sp, #40]	; 0x28
 8009f98:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009f9a:	7832      	ldrb	r2, [r6, #0]
 8009f9c:	2a30      	cmp	r2, #48	; 0x30
 8009f9e:	f040 80b4 	bne.w	800a10a <_strtod_l+0x1aa>
 8009fa2:	7872      	ldrb	r2, [r6, #1]
 8009fa4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009fa8:	2a58      	cmp	r2, #88	; 0x58
 8009faa:	d170      	bne.n	800a08e <_strtod_l+0x12e>
 8009fac:	9302      	str	r3, [sp, #8]
 8009fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	ab16      	add	r3, sp, #88	; 0x58
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	4a8e      	ldr	r2, [pc, #568]	; (800a1f0 <_strtod_l+0x290>)
 8009fb8:	ab17      	add	r3, sp, #92	; 0x5c
 8009fba:	a915      	add	r1, sp, #84	; 0x54
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f001 fdd7 	bl	800bb70 <__gethex>
 8009fc2:	f010 070f 	ands.w	r7, r0, #15
 8009fc6:	4605      	mov	r5, r0
 8009fc8:	d005      	beq.n	8009fd6 <_strtod_l+0x76>
 8009fca:	2f06      	cmp	r7, #6
 8009fcc:	d12a      	bne.n	800a024 <_strtod_l+0xc4>
 8009fce:	3601      	adds	r6, #1
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9615      	str	r6, [sp, #84]	; 0x54
 8009fd4:	930a      	str	r3, [sp, #40]	; 0x28
 8009fd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f040 857f 	bne.w	800aadc <_strtod_l+0xb7c>
 8009fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fe0:	b1db      	cbz	r3, 800a01a <_strtod_l+0xba>
 8009fe2:	4642      	mov	r2, r8
 8009fe4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009fe8:	ec43 2b10 	vmov	d0, r2, r3
 8009fec:	b01b      	add	sp, #108	; 0x6c
 8009fee:	ecbd 8b02 	vpop	{d8}
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	2920      	cmp	r1, #32
 8009ff8:	d1cc      	bne.n	8009f94 <_strtod_l+0x34>
 8009ffa:	3201      	adds	r2, #1
 8009ffc:	e7bf      	b.n	8009f7e <_strtod_l+0x1e>
 8009ffe:	292d      	cmp	r1, #45	; 0x2d
 800a000:	d1c8      	bne.n	8009f94 <_strtod_l+0x34>
 800a002:	2101      	movs	r1, #1
 800a004:	910a      	str	r1, [sp, #40]	; 0x28
 800a006:	1c51      	adds	r1, r2, #1
 800a008:	9115      	str	r1, [sp, #84]	; 0x54
 800a00a:	7852      	ldrb	r2, [r2, #1]
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	d1c3      	bne.n	8009f98 <_strtod_l+0x38>
 800a010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a012:	9515      	str	r5, [sp, #84]	; 0x54
 800a014:	2b00      	cmp	r3, #0
 800a016:	f040 855f 	bne.w	800aad8 <_strtod_l+0xb78>
 800a01a:	4642      	mov	r2, r8
 800a01c:	464b      	mov	r3, r9
 800a01e:	e7e3      	b.n	8009fe8 <_strtod_l+0x88>
 800a020:	2100      	movs	r1, #0
 800a022:	e7ef      	b.n	800a004 <_strtod_l+0xa4>
 800a024:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a026:	b13a      	cbz	r2, 800a038 <_strtod_l+0xd8>
 800a028:	2135      	movs	r1, #53	; 0x35
 800a02a:	a818      	add	r0, sp, #96	; 0x60
 800a02c:	f7ff ff37 	bl	8009e9e <__copybits>
 800a030:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a032:	4620      	mov	r0, r4
 800a034:	f7ff fb0a 	bl	800964c <_Bfree>
 800a038:	3f01      	subs	r7, #1
 800a03a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a03c:	2f04      	cmp	r7, #4
 800a03e:	d806      	bhi.n	800a04e <_strtod_l+0xee>
 800a040:	e8df f007 	tbb	[pc, r7]
 800a044:	201d0314 	.word	0x201d0314
 800a048:	14          	.byte	0x14
 800a049:	00          	.byte	0x00
 800a04a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a04e:	05e9      	lsls	r1, r5, #23
 800a050:	bf48      	it	mi
 800a052:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a056:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a05a:	0d1b      	lsrs	r3, r3, #20
 800a05c:	051b      	lsls	r3, r3, #20
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1b9      	bne.n	8009fd6 <_strtod_l+0x76>
 800a062:	f7fe fa8f 	bl	8008584 <__errno>
 800a066:	2322      	movs	r3, #34	; 0x22
 800a068:	6003      	str	r3, [r0, #0]
 800a06a:	e7b4      	b.n	8009fd6 <_strtod_l+0x76>
 800a06c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a070:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a074:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a078:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a07c:	e7e7      	b.n	800a04e <_strtod_l+0xee>
 800a07e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a1f8 <_strtod_l+0x298>
 800a082:	e7e4      	b.n	800a04e <_strtod_l+0xee>
 800a084:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a088:	f04f 38ff 	mov.w	r8, #4294967295
 800a08c:	e7df      	b.n	800a04e <_strtod_l+0xee>
 800a08e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a090:	1c5a      	adds	r2, r3, #1
 800a092:	9215      	str	r2, [sp, #84]	; 0x54
 800a094:	785b      	ldrb	r3, [r3, #1]
 800a096:	2b30      	cmp	r3, #48	; 0x30
 800a098:	d0f9      	beq.n	800a08e <_strtod_l+0x12e>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d09b      	beq.n	8009fd6 <_strtod_l+0x76>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f04f 0a00 	mov.w	sl, #0
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a0ae:	46d3      	mov	fp, sl
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a0b4:	7806      	ldrb	r6, [r0, #0]
 800a0b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a0ba:	b2d9      	uxtb	r1, r3
 800a0bc:	2909      	cmp	r1, #9
 800a0be:	d926      	bls.n	800a10e <_strtod_l+0x1ae>
 800a0c0:	494c      	ldr	r1, [pc, #304]	; (800a1f4 <_strtod_l+0x294>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f001 fc59 	bl	800b97a <strncmp>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	d030      	beq.n	800a12e <_strtod_l+0x1ce>
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	4632      	mov	r2, r6
 800a0d0:	9005      	str	r0, [sp, #20]
 800a0d2:	465e      	mov	r6, fp
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	2a65      	cmp	r2, #101	; 0x65
 800a0d8:	d001      	beq.n	800a0de <_strtod_l+0x17e>
 800a0da:	2a45      	cmp	r2, #69	; 0x45
 800a0dc:	d113      	bne.n	800a106 <_strtod_l+0x1a6>
 800a0de:	b91e      	cbnz	r6, 800a0e8 <_strtod_l+0x188>
 800a0e0:	9a04      	ldr	r2, [sp, #16]
 800a0e2:	4302      	orrs	r2, r0
 800a0e4:	d094      	beq.n	800a010 <_strtod_l+0xb0>
 800a0e6:	2600      	movs	r6, #0
 800a0e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a0ea:	1c6a      	adds	r2, r5, #1
 800a0ec:	9215      	str	r2, [sp, #84]	; 0x54
 800a0ee:	786a      	ldrb	r2, [r5, #1]
 800a0f0:	2a2b      	cmp	r2, #43	; 0x2b
 800a0f2:	d074      	beq.n	800a1de <_strtod_l+0x27e>
 800a0f4:	2a2d      	cmp	r2, #45	; 0x2d
 800a0f6:	d078      	beq.n	800a1ea <_strtod_l+0x28a>
 800a0f8:	f04f 0c00 	mov.w	ip, #0
 800a0fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a100:	2909      	cmp	r1, #9
 800a102:	d97f      	bls.n	800a204 <_strtod_l+0x2a4>
 800a104:	9515      	str	r5, [sp, #84]	; 0x54
 800a106:	2700      	movs	r7, #0
 800a108:	e09e      	b.n	800a248 <_strtod_l+0x2e8>
 800a10a:	2300      	movs	r3, #0
 800a10c:	e7c8      	b.n	800a0a0 <_strtod_l+0x140>
 800a10e:	f1bb 0f08 	cmp.w	fp, #8
 800a112:	bfd8      	it	le
 800a114:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a116:	f100 0001 	add.w	r0, r0, #1
 800a11a:	bfda      	itte	le
 800a11c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a120:	9309      	strle	r3, [sp, #36]	; 0x24
 800a122:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a126:	f10b 0b01 	add.w	fp, fp, #1
 800a12a:	9015      	str	r0, [sp, #84]	; 0x54
 800a12c:	e7c1      	b.n	800a0b2 <_strtod_l+0x152>
 800a12e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	9215      	str	r2, [sp, #84]	; 0x54
 800a134:	785a      	ldrb	r2, [r3, #1]
 800a136:	f1bb 0f00 	cmp.w	fp, #0
 800a13a:	d037      	beq.n	800a1ac <_strtod_l+0x24c>
 800a13c:	9005      	str	r0, [sp, #20]
 800a13e:	465e      	mov	r6, fp
 800a140:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a144:	2b09      	cmp	r3, #9
 800a146:	d912      	bls.n	800a16e <_strtod_l+0x20e>
 800a148:	2301      	movs	r3, #1
 800a14a:	e7c4      	b.n	800a0d6 <_strtod_l+0x176>
 800a14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	9215      	str	r2, [sp, #84]	; 0x54
 800a152:	785a      	ldrb	r2, [r3, #1]
 800a154:	3001      	adds	r0, #1
 800a156:	2a30      	cmp	r2, #48	; 0x30
 800a158:	d0f8      	beq.n	800a14c <_strtod_l+0x1ec>
 800a15a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a15e:	2b08      	cmp	r3, #8
 800a160:	f200 84c1 	bhi.w	800aae6 <_strtod_l+0xb86>
 800a164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a166:	9005      	str	r0, [sp, #20]
 800a168:	2000      	movs	r0, #0
 800a16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a16c:	4606      	mov	r6, r0
 800a16e:	3a30      	subs	r2, #48	; 0x30
 800a170:	f100 0301 	add.w	r3, r0, #1
 800a174:	d014      	beq.n	800a1a0 <_strtod_l+0x240>
 800a176:	9905      	ldr	r1, [sp, #20]
 800a178:	4419      	add	r1, r3
 800a17a:	9105      	str	r1, [sp, #20]
 800a17c:	4633      	mov	r3, r6
 800a17e:	eb00 0c06 	add.w	ip, r0, r6
 800a182:	210a      	movs	r1, #10
 800a184:	4563      	cmp	r3, ip
 800a186:	d113      	bne.n	800a1b0 <_strtod_l+0x250>
 800a188:	1833      	adds	r3, r6, r0
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	f106 0601 	add.w	r6, r6, #1
 800a190:	4406      	add	r6, r0
 800a192:	dc1a      	bgt.n	800a1ca <_strtod_l+0x26a>
 800a194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a196:	230a      	movs	r3, #10
 800a198:	fb03 2301 	mla	r3, r3, r1, r2
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	2300      	movs	r3, #0
 800a1a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1a2:	1c51      	adds	r1, r2, #1
 800a1a4:	9115      	str	r1, [sp, #84]	; 0x54
 800a1a6:	7852      	ldrb	r2, [r2, #1]
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	e7c9      	b.n	800a140 <_strtod_l+0x1e0>
 800a1ac:	4658      	mov	r0, fp
 800a1ae:	e7d2      	b.n	800a156 <_strtod_l+0x1f6>
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	f103 0301 	add.w	r3, r3, #1
 800a1b6:	dc03      	bgt.n	800a1c0 <_strtod_l+0x260>
 800a1b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a1ba:	434f      	muls	r7, r1
 800a1bc:	9709      	str	r7, [sp, #36]	; 0x24
 800a1be:	e7e1      	b.n	800a184 <_strtod_l+0x224>
 800a1c0:	2b10      	cmp	r3, #16
 800a1c2:	bfd8      	it	le
 800a1c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a1c8:	e7dc      	b.n	800a184 <_strtod_l+0x224>
 800a1ca:	2e10      	cmp	r6, #16
 800a1cc:	bfdc      	itt	le
 800a1ce:	230a      	movle	r3, #10
 800a1d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a1d4:	e7e3      	b.n	800a19e <_strtod_l+0x23e>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	9305      	str	r3, [sp, #20]
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e780      	b.n	800a0e0 <_strtod_l+0x180>
 800a1de:	f04f 0c00 	mov.w	ip, #0
 800a1e2:	1caa      	adds	r2, r5, #2
 800a1e4:	9215      	str	r2, [sp, #84]	; 0x54
 800a1e6:	78aa      	ldrb	r2, [r5, #2]
 800a1e8:	e788      	b.n	800a0fc <_strtod_l+0x19c>
 800a1ea:	f04f 0c01 	mov.w	ip, #1
 800a1ee:	e7f8      	b.n	800a1e2 <_strtod_l+0x282>
 800a1f0:	0800cb08 	.word	0x0800cb08
 800a1f4:	0800cb04 	.word	0x0800cb04
 800a1f8:	7ff00000 	.word	0x7ff00000
 800a1fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1fe:	1c51      	adds	r1, r2, #1
 800a200:	9115      	str	r1, [sp, #84]	; 0x54
 800a202:	7852      	ldrb	r2, [r2, #1]
 800a204:	2a30      	cmp	r2, #48	; 0x30
 800a206:	d0f9      	beq.n	800a1fc <_strtod_l+0x29c>
 800a208:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a20c:	2908      	cmp	r1, #8
 800a20e:	f63f af7a 	bhi.w	800a106 <_strtod_l+0x1a6>
 800a212:	3a30      	subs	r2, #48	; 0x30
 800a214:	9208      	str	r2, [sp, #32]
 800a216:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a218:	920c      	str	r2, [sp, #48]	; 0x30
 800a21a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a21c:	1c57      	adds	r7, r2, #1
 800a21e:	9715      	str	r7, [sp, #84]	; 0x54
 800a220:	7852      	ldrb	r2, [r2, #1]
 800a222:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a226:	f1be 0f09 	cmp.w	lr, #9
 800a22a:	d938      	bls.n	800a29e <_strtod_l+0x33e>
 800a22c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a22e:	1a7f      	subs	r7, r7, r1
 800a230:	2f08      	cmp	r7, #8
 800a232:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a236:	dc03      	bgt.n	800a240 <_strtod_l+0x2e0>
 800a238:	9908      	ldr	r1, [sp, #32]
 800a23a:	428f      	cmp	r7, r1
 800a23c:	bfa8      	it	ge
 800a23e:	460f      	movge	r7, r1
 800a240:	f1bc 0f00 	cmp.w	ip, #0
 800a244:	d000      	beq.n	800a248 <_strtod_l+0x2e8>
 800a246:	427f      	negs	r7, r7
 800a248:	2e00      	cmp	r6, #0
 800a24a:	d14f      	bne.n	800a2ec <_strtod_l+0x38c>
 800a24c:	9904      	ldr	r1, [sp, #16]
 800a24e:	4301      	orrs	r1, r0
 800a250:	f47f aec1 	bne.w	8009fd6 <_strtod_l+0x76>
 800a254:	2b00      	cmp	r3, #0
 800a256:	f47f aedb 	bne.w	800a010 <_strtod_l+0xb0>
 800a25a:	2a69      	cmp	r2, #105	; 0x69
 800a25c:	d029      	beq.n	800a2b2 <_strtod_l+0x352>
 800a25e:	dc26      	bgt.n	800a2ae <_strtod_l+0x34e>
 800a260:	2a49      	cmp	r2, #73	; 0x49
 800a262:	d026      	beq.n	800a2b2 <_strtod_l+0x352>
 800a264:	2a4e      	cmp	r2, #78	; 0x4e
 800a266:	f47f aed3 	bne.w	800a010 <_strtod_l+0xb0>
 800a26a:	499b      	ldr	r1, [pc, #620]	; (800a4d8 <_strtod_l+0x578>)
 800a26c:	a815      	add	r0, sp, #84	; 0x54
 800a26e:	f001 febf 	bl	800bff0 <__match>
 800a272:	2800      	cmp	r0, #0
 800a274:	f43f aecc 	beq.w	800a010 <_strtod_l+0xb0>
 800a278:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b28      	cmp	r3, #40	; 0x28
 800a27e:	d12f      	bne.n	800a2e0 <_strtod_l+0x380>
 800a280:	4996      	ldr	r1, [pc, #600]	; (800a4dc <_strtod_l+0x57c>)
 800a282:	aa18      	add	r2, sp, #96	; 0x60
 800a284:	a815      	add	r0, sp, #84	; 0x54
 800a286:	f001 fec7 	bl	800c018 <__hexnan>
 800a28a:	2805      	cmp	r0, #5
 800a28c:	d128      	bne.n	800a2e0 <_strtod_l+0x380>
 800a28e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a290:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a294:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a298:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a29c:	e69b      	b.n	8009fd6 <_strtod_l+0x76>
 800a29e:	9f08      	ldr	r7, [sp, #32]
 800a2a0:	210a      	movs	r1, #10
 800a2a2:	fb01 2107 	mla	r1, r1, r7, r2
 800a2a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a2aa:	9208      	str	r2, [sp, #32]
 800a2ac:	e7b5      	b.n	800a21a <_strtod_l+0x2ba>
 800a2ae:	2a6e      	cmp	r2, #110	; 0x6e
 800a2b0:	e7d9      	b.n	800a266 <_strtod_l+0x306>
 800a2b2:	498b      	ldr	r1, [pc, #556]	; (800a4e0 <_strtod_l+0x580>)
 800a2b4:	a815      	add	r0, sp, #84	; 0x54
 800a2b6:	f001 fe9b 	bl	800bff0 <__match>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	f43f aea8 	beq.w	800a010 <_strtod_l+0xb0>
 800a2c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2c2:	4988      	ldr	r1, [pc, #544]	; (800a4e4 <_strtod_l+0x584>)
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	a815      	add	r0, sp, #84	; 0x54
 800a2c8:	9315      	str	r3, [sp, #84]	; 0x54
 800a2ca:	f001 fe91 	bl	800bff0 <__match>
 800a2ce:	b910      	cbnz	r0, 800a2d6 <_strtod_l+0x376>
 800a2d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	9315      	str	r3, [sp, #84]	; 0x54
 800a2d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a4f4 <_strtod_l+0x594>
 800a2da:	f04f 0800 	mov.w	r8, #0
 800a2de:	e67a      	b.n	8009fd6 <_strtod_l+0x76>
 800a2e0:	4881      	ldr	r0, [pc, #516]	; (800a4e8 <_strtod_l+0x588>)
 800a2e2:	f001 fb95 	bl	800ba10 <nan>
 800a2e6:	ec59 8b10 	vmov	r8, r9, d0
 800a2ea:	e674      	b.n	8009fd6 <_strtod_l+0x76>
 800a2ec:	9b05      	ldr	r3, [sp, #20]
 800a2ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2f0:	1afb      	subs	r3, r7, r3
 800a2f2:	f1bb 0f00 	cmp.w	fp, #0
 800a2f6:	bf08      	it	eq
 800a2f8:	46b3      	moveq	fp, r6
 800a2fa:	2e10      	cmp	r6, #16
 800a2fc:	9308      	str	r3, [sp, #32]
 800a2fe:	4635      	mov	r5, r6
 800a300:	bfa8      	it	ge
 800a302:	2510      	movge	r5, #16
 800a304:	f7f6 f90e 	bl	8000524 <__aeabi_ui2d>
 800a308:	2e09      	cmp	r6, #9
 800a30a:	4680      	mov	r8, r0
 800a30c:	4689      	mov	r9, r1
 800a30e:	dd13      	ble.n	800a338 <_strtod_l+0x3d8>
 800a310:	4b76      	ldr	r3, [pc, #472]	; (800a4ec <_strtod_l+0x58c>)
 800a312:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a316:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a31a:	f7f6 f97d 	bl	8000618 <__aeabi_dmul>
 800a31e:	4680      	mov	r8, r0
 800a320:	4650      	mov	r0, sl
 800a322:	4689      	mov	r9, r1
 800a324:	f7f6 f8fe 	bl	8000524 <__aeabi_ui2d>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4640      	mov	r0, r8
 800a32e:	4649      	mov	r1, r9
 800a330:	f7f5 ffbc 	bl	80002ac <__adddf3>
 800a334:	4680      	mov	r8, r0
 800a336:	4689      	mov	r9, r1
 800a338:	2e0f      	cmp	r6, #15
 800a33a:	dc38      	bgt.n	800a3ae <_strtod_l+0x44e>
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f43f ae49 	beq.w	8009fd6 <_strtod_l+0x76>
 800a344:	dd24      	ble.n	800a390 <_strtod_l+0x430>
 800a346:	2b16      	cmp	r3, #22
 800a348:	dc0b      	bgt.n	800a362 <_strtod_l+0x402>
 800a34a:	4968      	ldr	r1, [pc, #416]	; (800a4ec <_strtod_l+0x58c>)
 800a34c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a350:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a354:	4642      	mov	r2, r8
 800a356:	464b      	mov	r3, r9
 800a358:	f7f6 f95e 	bl	8000618 <__aeabi_dmul>
 800a35c:	4680      	mov	r8, r0
 800a35e:	4689      	mov	r9, r1
 800a360:	e639      	b.n	8009fd6 <_strtod_l+0x76>
 800a362:	9a08      	ldr	r2, [sp, #32]
 800a364:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a368:	4293      	cmp	r3, r2
 800a36a:	db20      	blt.n	800a3ae <_strtod_l+0x44e>
 800a36c:	4c5f      	ldr	r4, [pc, #380]	; (800a4ec <_strtod_l+0x58c>)
 800a36e:	f1c6 060f 	rsb	r6, r6, #15
 800a372:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a376:	4642      	mov	r2, r8
 800a378:	464b      	mov	r3, r9
 800a37a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a37e:	f7f6 f94b 	bl	8000618 <__aeabi_dmul>
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	1b9e      	subs	r6, r3, r6
 800a386:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a38a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a38e:	e7e3      	b.n	800a358 <_strtod_l+0x3f8>
 800a390:	9b08      	ldr	r3, [sp, #32]
 800a392:	3316      	adds	r3, #22
 800a394:	db0b      	blt.n	800a3ae <_strtod_l+0x44e>
 800a396:	9b05      	ldr	r3, [sp, #20]
 800a398:	1bdf      	subs	r7, r3, r7
 800a39a:	4b54      	ldr	r3, [pc, #336]	; (800a4ec <_strtod_l+0x58c>)
 800a39c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a4:	4640      	mov	r0, r8
 800a3a6:	4649      	mov	r1, r9
 800a3a8:	f7f6 fa60 	bl	800086c <__aeabi_ddiv>
 800a3ac:	e7d6      	b.n	800a35c <_strtod_l+0x3fc>
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	1b75      	subs	r5, r6, r5
 800a3b2:	441d      	add	r5, r3
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	dd70      	ble.n	800a49a <_strtod_l+0x53a>
 800a3b8:	f015 030f 	ands.w	r3, r5, #15
 800a3bc:	d00a      	beq.n	800a3d4 <_strtod_l+0x474>
 800a3be:	494b      	ldr	r1, [pc, #300]	; (800a4ec <_strtod_l+0x58c>)
 800a3c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3cc:	f7f6 f924 	bl	8000618 <__aeabi_dmul>
 800a3d0:	4680      	mov	r8, r0
 800a3d2:	4689      	mov	r9, r1
 800a3d4:	f035 050f 	bics.w	r5, r5, #15
 800a3d8:	d04d      	beq.n	800a476 <_strtod_l+0x516>
 800a3da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a3de:	dd22      	ble.n	800a426 <_strtod_l+0x4c6>
 800a3e0:	2500      	movs	r5, #0
 800a3e2:	46ab      	mov	fp, r5
 800a3e4:	9509      	str	r5, [sp, #36]	; 0x24
 800a3e6:	9505      	str	r5, [sp, #20]
 800a3e8:	2322      	movs	r3, #34	; 0x22
 800a3ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a4f4 <_strtod_l+0x594>
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	f04f 0800 	mov.w	r8, #0
 800a3f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f43f aded 	beq.w	8009fd6 <_strtod_l+0x76>
 800a3fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3fe:	4620      	mov	r0, r4
 800a400:	f7ff f924 	bl	800964c <_Bfree>
 800a404:	9905      	ldr	r1, [sp, #20]
 800a406:	4620      	mov	r0, r4
 800a408:	f7ff f920 	bl	800964c <_Bfree>
 800a40c:	4659      	mov	r1, fp
 800a40e:	4620      	mov	r0, r4
 800a410:	f7ff f91c 	bl	800964c <_Bfree>
 800a414:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a416:	4620      	mov	r0, r4
 800a418:	f7ff f918 	bl	800964c <_Bfree>
 800a41c:	4629      	mov	r1, r5
 800a41e:	4620      	mov	r0, r4
 800a420:	f7ff f914 	bl	800964c <_Bfree>
 800a424:	e5d7      	b.n	8009fd6 <_strtod_l+0x76>
 800a426:	4b32      	ldr	r3, [pc, #200]	; (800a4f0 <_strtod_l+0x590>)
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	2300      	movs	r3, #0
 800a42c:	112d      	asrs	r5, r5, #4
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	469a      	mov	sl, r3
 800a434:	2d01      	cmp	r5, #1
 800a436:	dc21      	bgt.n	800a47c <_strtod_l+0x51c>
 800a438:	b10b      	cbz	r3, 800a43e <_strtod_l+0x4de>
 800a43a:	4680      	mov	r8, r0
 800a43c:	4689      	mov	r9, r1
 800a43e:	492c      	ldr	r1, [pc, #176]	; (800a4f0 <_strtod_l+0x590>)
 800a440:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a444:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a448:	4642      	mov	r2, r8
 800a44a:	464b      	mov	r3, r9
 800a44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a450:	f7f6 f8e2 	bl	8000618 <__aeabi_dmul>
 800a454:	4b27      	ldr	r3, [pc, #156]	; (800a4f4 <_strtod_l+0x594>)
 800a456:	460a      	mov	r2, r1
 800a458:	400b      	ands	r3, r1
 800a45a:	4927      	ldr	r1, [pc, #156]	; (800a4f8 <_strtod_l+0x598>)
 800a45c:	428b      	cmp	r3, r1
 800a45e:	4680      	mov	r8, r0
 800a460:	d8be      	bhi.n	800a3e0 <_strtod_l+0x480>
 800a462:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a466:	428b      	cmp	r3, r1
 800a468:	bf86      	itte	hi
 800a46a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a4fc <_strtod_l+0x59c>
 800a46e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a472:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a476:	2300      	movs	r3, #0
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	e07b      	b.n	800a574 <_strtod_l+0x614>
 800a47c:	07ea      	lsls	r2, r5, #31
 800a47e:	d505      	bpl.n	800a48c <_strtod_l+0x52c>
 800a480:	9b04      	ldr	r3, [sp, #16]
 800a482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a486:	f7f6 f8c7 	bl	8000618 <__aeabi_dmul>
 800a48a:	2301      	movs	r3, #1
 800a48c:	9a04      	ldr	r2, [sp, #16]
 800a48e:	3208      	adds	r2, #8
 800a490:	f10a 0a01 	add.w	sl, sl, #1
 800a494:	106d      	asrs	r5, r5, #1
 800a496:	9204      	str	r2, [sp, #16]
 800a498:	e7cc      	b.n	800a434 <_strtod_l+0x4d4>
 800a49a:	d0ec      	beq.n	800a476 <_strtod_l+0x516>
 800a49c:	426d      	negs	r5, r5
 800a49e:	f015 020f 	ands.w	r2, r5, #15
 800a4a2:	d00a      	beq.n	800a4ba <_strtod_l+0x55a>
 800a4a4:	4b11      	ldr	r3, [pc, #68]	; (800a4ec <_strtod_l+0x58c>)
 800a4a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	4649      	mov	r1, r9
 800a4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b2:	f7f6 f9db 	bl	800086c <__aeabi_ddiv>
 800a4b6:	4680      	mov	r8, r0
 800a4b8:	4689      	mov	r9, r1
 800a4ba:	112d      	asrs	r5, r5, #4
 800a4bc:	d0db      	beq.n	800a476 <_strtod_l+0x516>
 800a4be:	2d1f      	cmp	r5, #31
 800a4c0:	dd1e      	ble.n	800a500 <_strtod_l+0x5a0>
 800a4c2:	2500      	movs	r5, #0
 800a4c4:	46ab      	mov	fp, r5
 800a4c6:	9509      	str	r5, [sp, #36]	; 0x24
 800a4c8:	9505      	str	r5, [sp, #20]
 800a4ca:	2322      	movs	r3, #34	; 0x22
 800a4cc:	f04f 0800 	mov.w	r8, #0
 800a4d0:	f04f 0900 	mov.w	r9, #0
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	e78d      	b.n	800a3f4 <_strtod_l+0x494>
 800a4d8:	0800c845 	.word	0x0800c845
 800a4dc:	0800cb1c 	.word	0x0800cb1c
 800a4e0:	0800c83d 	.word	0x0800c83d
 800a4e4:	0800c921 	.word	0x0800c921
 800a4e8:	0800cd2b 	.word	0x0800cd2b
 800a4ec:	0800ca30 	.word	0x0800ca30
 800a4f0:	0800ca08 	.word	0x0800ca08
 800a4f4:	7ff00000 	.word	0x7ff00000
 800a4f8:	7ca00000 	.word	0x7ca00000
 800a4fc:	7fefffff 	.word	0x7fefffff
 800a500:	f015 0310 	ands.w	r3, r5, #16
 800a504:	bf18      	it	ne
 800a506:	236a      	movne	r3, #106	; 0x6a
 800a508:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a8ac <_strtod_l+0x94c>
 800a50c:	9304      	str	r3, [sp, #16]
 800a50e:	4640      	mov	r0, r8
 800a510:	4649      	mov	r1, r9
 800a512:	2300      	movs	r3, #0
 800a514:	07ea      	lsls	r2, r5, #31
 800a516:	d504      	bpl.n	800a522 <_strtod_l+0x5c2>
 800a518:	e9da 2300 	ldrd	r2, r3, [sl]
 800a51c:	f7f6 f87c 	bl	8000618 <__aeabi_dmul>
 800a520:	2301      	movs	r3, #1
 800a522:	106d      	asrs	r5, r5, #1
 800a524:	f10a 0a08 	add.w	sl, sl, #8
 800a528:	d1f4      	bne.n	800a514 <_strtod_l+0x5b4>
 800a52a:	b10b      	cbz	r3, 800a530 <_strtod_l+0x5d0>
 800a52c:	4680      	mov	r8, r0
 800a52e:	4689      	mov	r9, r1
 800a530:	9b04      	ldr	r3, [sp, #16]
 800a532:	b1bb      	cbz	r3, 800a564 <_strtod_l+0x604>
 800a534:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a538:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	4649      	mov	r1, r9
 800a540:	dd10      	ble.n	800a564 <_strtod_l+0x604>
 800a542:	2b1f      	cmp	r3, #31
 800a544:	f340 811e 	ble.w	800a784 <_strtod_l+0x824>
 800a548:	2b34      	cmp	r3, #52	; 0x34
 800a54a:	bfde      	ittt	le
 800a54c:	f04f 33ff 	movle.w	r3, #4294967295
 800a550:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a554:	4093      	lslle	r3, r2
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	bfcc      	ite	gt
 800a55c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a560:	ea03 0901 	andle.w	r9, r3, r1
 800a564:	2200      	movs	r2, #0
 800a566:	2300      	movs	r3, #0
 800a568:	4640      	mov	r0, r8
 800a56a:	4649      	mov	r1, r9
 800a56c:	f7f6 fabc 	bl	8000ae8 <__aeabi_dcmpeq>
 800a570:	2800      	cmp	r0, #0
 800a572:	d1a6      	bne.n	800a4c2 <_strtod_l+0x562>
 800a574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a57a:	4633      	mov	r3, r6
 800a57c:	465a      	mov	r2, fp
 800a57e:	4620      	mov	r0, r4
 800a580:	f7ff f8cc 	bl	800971c <__s2b>
 800a584:	9009      	str	r0, [sp, #36]	; 0x24
 800a586:	2800      	cmp	r0, #0
 800a588:	f43f af2a 	beq.w	800a3e0 <_strtod_l+0x480>
 800a58c:	9a08      	ldr	r2, [sp, #32]
 800a58e:	9b05      	ldr	r3, [sp, #20]
 800a590:	2a00      	cmp	r2, #0
 800a592:	eba3 0307 	sub.w	r3, r3, r7
 800a596:	bfa8      	it	ge
 800a598:	2300      	movge	r3, #0
 800a59a:	930c      	str	r3, [sp, #48]	; 0x30
 800a59c:	2500      	movs	r5, #0
 800a59e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5a2:	9312      	str	r3, [sp, #72]	; 0x48
 800a5a4:	46ab      	mov	fp, r5
 800a5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	6859      	ldr	r1, [r3, #4]
 800a5ac:	f7ff f80e 	bl	80095cc <_Balloc>
 800a5b0:	9005      	str	r0, [sp, #20]
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f43f af18 	beq.w	800a3e8 <_strtod_l+0x488>
 800a5b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ba:	691a      	ldr	r2, [r3, #16]
 800a5bc:	3202      	adds	r2, #2
 800a5be:	f103 010c 	add.w	r1, r3, #12
 800a5c2:	0092      	lsls	r2, r2, #2
 800a5c4:	300c      	adds	r0, #12
 800a5c6:	f7fe f813 	bl	80085f0 <memcpy>
 800a5ca:	ec49 8b10 	vmov	d0, r8, r9
 800a5ce:	aa18      	add	r2, sp, #96	; 0x60
 800a5d0:	a917      	add	r1, sp, #92	; 0x5c
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f7ff fbd6 	bl	8009d84 <__d2b>
 800a5d8:	ec49 8b18 	vmov	d8, r8, r9
 800a5dc:	9016      	str	r0, [sp, #88]	; 0x58
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	f43f af02 	beq.w	800a3e8 <_strtod_l+0x488>
 800a5e4:	2101      	movs	r1, #1
 800a5e6:	4620      	mov	r0, r4
 800a5e8:	f7ff f930 	bl	800984c <__i2b>
 800a5ec:	4683      	mov	fp, r0
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	f43f aefa 	beq.w	800a3e8 <_strtod_l+0x488>
 800a5f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a5f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	bfab      	itete	ge
 800a5fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a5fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a600:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a602:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a606:	bfac      	ite	ge
 800a608:	eb06 0a03 	addge.w	sl, r6, r3
 800a60c:	1b9f      	sublt	r7, r3, r6
 800a60e:	9b04      	ldr	r3, [sp, #16]
 800a610:	1af6      	subs	r6, r6, r3
 800a612:	4416      	add	r6, r2
 800a614:	4ba0      	ldr	r3, [pc, #640]	; (800a898 <_strtod_l+0x938>)
 800a616:	3e01      	subs	r6, #1
 800a618:	429e      	cmp	r6, r3
 800a61a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a61e:	f280 80c4 	bge.w	800a7aa <_strtod_l+0x84a>
 800a622:	1b9b      	subs	r3, r3, r6
 800a624:	2b1f      	cmp	r3, #31
 800a626:	eba2 0203 	sub.w	r2, r2, r3
 800a62a:	f04f 0101 	mov.w	r1, #1
 800a62e:	f300 80b0 	bgt.w	800a792 <_strtod_l+0x832>
 800a632:	fa01 f303 	lsl.w	r3, r1, r3
 800a636:	930e      	str	r3, [sp, #56]	; 0x38
 800a638:	2300      	movs	r3, #0
 800a63a:	930d      	str	r3, [sp, #52]	; 0x34
 800a63c:	eb0a 0602 	add.w	r6, sl, r2
 800a640:	9b04      	ldr	r3, [sp, #16]
 800a642:	45b2      	cmp	sl, r6
 800a644:	4417      	add	r7, r2
 800a646:	441f      	add	r7, r3
 800a648:	4653      	mov	r3, sl
 800a64a:	bfa8      	it	ge
 800a64c:	4633      	movge	r3, r6
 800a64e:	42bb      	cmp	r3, r7
 800a650:	bfa8      	it	ge
 800a652:	463b      	movge	r3, r7
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfc2      	ittt	gt
 800a658:	1af6      	subgt	r6, r6, r3
 800a65a:	1aff      	subgt	r7, r7, r3
 800a65c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a662:	2b00      	cmp	r3, #0
 800a664:	dd17      	ble.n	800a696 <_strtod_l+0x736>
 800a666:	4659      	mov	r1, fp
 800a668:	461a      	mov	r2, r3
 800a66a:	4620      	mov	r0, r4
 800a66c:	f7ff f9ae 	bl	80099cc <__pow5mult>
 800a670:	4683      	mov	fp, r0
 800a672:	2800      	cmp	r0, #0
 800a674:	f43f aeb8 	beq.w	800a3e8 <_strtod_l+0x488>
 800a678:	4601      	mov	r1, r0
 800a67a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a67c:	4620      	mov	r0, r4
 800a67e:	f7ff f8fb 	bl	8009878 <__multiply>
 800a682:	900b      	str	r0, [sp, #44]	; 0x2c
 800a684:	2800      	cmp	r0, #0
 800a686:	f43f aeaf 	beq.w	800a3e8 <_strtod_l+0x488>
 800a68a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7fe ffdd 	bl	800964c <_Bfree>
 800a692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a694:	9316      	str	r3, [sp, #88]	; 0x58
 800a696:	2e00      	cmp	r6, #0
 800a698:	f300 808c 	bgt.w	800a7b4 <_strtod_l+0x854>
 800a69c:	9b08      	ldr	r3, [sp, #32]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dd08      	ble.n	800a6b4 <_strtod_l+0x754>
 800a6a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6a4:	9905      	ldr	r1, [sp, #20]
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7ff f990 	bl	80099cc <__pow5mult>
 800a6ac:	9005      	str	r0, [sp, #20]
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f43f ae9a 	beq.w	800a3e8 <_strtod_l+0x488>
 800a6b4:	2f00      	cmp	r7, #0
 800a6b6:	dd08      	ble.n	800a6ca <_strtod_l+0x76a>
 800a6b8:	9905      	ldr	r1, [sp, #20]
 800a6ba:	463a      	mov	r2, r7
 800a6bc:	4620      	mov	r0, r4
 800a6be:	f7ff f9df 	bl	8009a80 <__lshift>
 800a6c2:	9005      	str	r0, [sp, #20]
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	f43f ae8f 	beq.w	800a3e8 <_strtod_l+0x488>
 800a6ca:	f1ba 0f00 	cmp.w	sl, #0
 800a6ce:	dd08      	ble.n	800a6e2 <_strtod_l+0x782>
 800a6d0:	4659      	mov	r1, fp
 800a6d2:	4652      	mov	r2, sl
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f7ff f9d3 	bl	8009a80 <__lshift>
 800a6da:	4683      	mov	fp, r0
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f43f ae83 	beq.w	800a3e8 <_strtod_l+0x488>
 800a6e2:	9a05      	ldr	r2, [sp, #20]
 800a6e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff fa52 	bl	8009b90 <__mdiff>
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f ae7a 	beq.w	800a3e8 <_strtod_l+0x488>
 800a6f4:	68c3      	ldr	r3, [r0, #12]
 800a6f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	60c3      	str	r3, [r0, #12]
 800a6fc:	4659      	mov	r1, fp
 800a6fe:	f7ff fa2b 	bl	8009b58 <__mcmp>
 800a702:	2800      	cmp	r0, #0
 800a704:	da60      	bge.n	800a7c8 <_strtod_l+0x868>
 800a706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a708:	ea53 0308 	orrs.w	r3, r3, r8
 800a70c:	f040 8084 	bne.w	800a818 <_strtod_l+0x8b8>
 800a710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a714:	2b00      	cmp	r3, #0
 800a716:	d17f      	bne.n	800a818 <_strtod_l+0x8b8>
 800a718:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a71c:	0d1b      	lsrs	r3, r3, #20
 800a71e:	051b      	lsls	r3, r3, #20
 800a720:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a724:	d978      	bls.n	800a818 <_strtod_l+0x8b8>
 800a726:	696b      	ldr	r3, [r5, #20]
 800a728:	b913      	cbnz	r3, 800a730 <_strtod_l+0x7d0>
 800a72a:	692b      	ldr	r3, [r5, #16]
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	dd73      	ble.n	800a818 <_strtod_l+0x8b8>
 800a730:	4629      	mov	r1, r5
 800a732:	2201      	movs	r2, #1
 800a734:	4620      	mov	r0, r4
 800a736:	f7ff f9a3 	bl	8009a80 <__lshift>
 800a73a:	4659      	mov	r1, fp
 800a73c:	4605      	mov	r5, r0
 800a73e:	f7ff fa0b 	bl	8009b58 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	dd68      	ble.n	800a818 <_strtod_l+0x8b8>
 800a746:	9904      	ldr	r1, [sp, #16]
 800a748:	4a54      	ldr	r2, [pc, #336]	; (800a89c <_strtod_l+0x93c>)
 800a74a:	464b      	mov	r3, r9
 800a74c:	2900      	cmp	r1, #0
 800a74e:	f000 8084 	beq.w	800a85a <_strtod_l+0x8fa>
 800a752:	ea02 0109 	and.w	r1, r2, r9
 800a756:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a75a:	dc7e      	bgt.n	800a85a <_strtod_l+0x8fa>
 800a75c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a760:	f77f aeb3 	ble.w	800a4ca <_strtod_l+0x56a>
 800a764:	4b4e      	ldr	r3, [pc, #312]	; (800a8a0 <_strtod_l+0x940>)
 800a766:	4640      	mov	r0, r8
 800a768:	4649      	mov	r1, r9
 800a76a:	2200      	movs	r2, #0
 800a76c:	f7f5 ff54 	bl	8000618 <__aeabi_dmul>
 800a770:	4b4a      	ldr	r3, [pc, #296]	; (800a89c <_strtod_l+0x93c>)
 800a772:	400b      	ands	r3, r1
 800a774:	4680      	mov	r8, r0
 800a776:	4689      	mov	r9, r1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f47f ae3f 	bne.w	800a3fc <_strtod_l+0x49c>
 800a77e:	2322      	movs	r3, #34	; 0x22
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	e63b      	b.n	800a3fc <_strtod_l+0x49c>
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	ea03 0808 	and.w	r8, r3, r8
 800a790:	e6e8      	b.n	800a564 <_strtod_l+0x604>
 800a792:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a796:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a79a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a79e:	36e2      	adds	r6, #226	; 0xe2
 800a7a0:	fa01 f306 	lsl.w	r3, r1, r6
 800a7a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a7a8:	e748      	b.n	800a63c <_strtod_l+0x6dc>
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a7b2:	e743      	b.n	800a63c <_strtod_l+0x6dc>
 800a7b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7b6:	4632      	mov	r2, r6
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7ff f961 	bl	8009a80 <__lshift>
 800a7be:	9016      	str	r0, [sp, #88]	; 0x58
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f47f af6b 	bne.w	800a69c <_strtod_l+0x73c>
 800a7c6:	e60f      	b.n	800a3e8 <_strtod_l+0x488>
 800a7c8:	46ca      	mov	sl, r9
 800a7ca:	d171      	bne.n	800a8b0 <_strtod_l+0x950>
 800a7cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a7ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7d2:	b352      	cbz	r2, 800a82a <_strtod_l+0x8ca>
 800a7d4:	4a33      	ldr	r2, [pc, #204]	; (800a8a4 <_strtod_l+0x944>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d12a      	bne.n	800a830 <_strtod_l+0x8d0>
 800a7da:	9b04      	ldr	r3, [sp, #16]
 800a7dc:	4641      	mov	r1, r8
 800a7de:	b1fb      	cbz	r3, 800a820 <_strtod_l+0x8c0>
 800a7e0:	4b2e      	ldr	r3, [pc, #184]	; (800a89c <_strtod_l+0x93c>)
 800a7e2:	ea09 0303 	and.w	r3, r9, r3
 800a7e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ee:	d81a      	bhi.n	800a826 <_strtod_l+0x8c6>
 800a7f0:	0d1b      	lsrs	r3, r3, #20
 800a7f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d118      	bne.n	800a830 <_strtod_l+0x8d0>
 800a7fe:	4b2a      	ldr	r3, [pc, #168]	; (800a8a8 <_strtod_l+0x948>)
 800a800:	459a      	cmp	sl, r3
 800a802:	d102      	bne.n	800a80a <_strtod_l+0x8aa>
 800a804:	3101      	adds	r1, #1
 800a806:	f43f adef 	beq.w	800a3e8 <_strtod_l+0x488>
 800a80a:	4b24      	ldr	r3, [pc, #144]	; (800a89c <_strtod_l+0x93c>)
 800a80c:	ea0a 0303 	and.w	r3, sl, r3
 800a810:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a814:	f04f 0800 	mov.w	r8, #0
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d1a2      	bne.n	800a764 <_strtod_l+0x804>
 800a81e:	e5ed      	b.n	800a3fc <_strtod_l+0x49c>
 800a820:	f04f 33ff 	mov.w	r3, #4294967295
 800a824:	e7e9      	b.n	800a7fa <_strtod_l+0x89a>
 800a826:	4613      	mov	r3, r2
 800a828:	e7e7      	b.n	800a7fa <_strtod_l+0x89a>
 800a82a:	ea53 0308 	orrs.w	r3, r3, r8
 800a82e:	d08a      	beq.n	800a746 <_strtod_l+0x7e6>
 800a830:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a832:	b1e3      	cbz	r3, 800a86e <_strtod_l+0x90e>
 800a834:	ea13 0f0a 	tst.w	r3, sl
 800a838:	d0ee      	beq.n	800a818 <_strtod_l+0x8b8>
 800a83a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a83c:	9a04      	ldr	r2, [sp, #16]
 800a83e:	4640      	mov	r0, r8
 800a840:	4649      	mov	r1, r9
 800a842:	b1c3      	cbz	r3, 800a876 <_strtod_l+0x916>
 800a844:	f7ff fb6f 	bl	8009f26 <sulp>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	ec51 0b18 	vmov	r0, r1, d8
 800a850:	f7f5 fd2c 	bl	80002ac <__adddf3>
 800a854:	4680      	mov	r8, r0
 800a856:	4689      	mov	r9, r1
 800a858:	e7de      	b.n	800a818 <_strtod_l+0x8b8>
 800a85a:	4013      	ands	r3, r2
 800a85c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a860:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a864:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a868:	f04f 38ff 	mov.w	r8, #4294967295
 800a86c:	e7d4      	b.n	800a818 <_strtod_l+0x8b8>
 800a86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a870:	ea13 0f08 	tst.w	r3, r8
 800a874:	e7e0      	b.n	800a838 <_strtod_l+0x8d8>
 800a876:	f7ff fb56 	bl	8009f26 <sulp>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	ec51 0b18 	vmov	r0, r1, d8
 800a882:	f7f5 fd11 	bl	80002a8 <__aeabi_dsub>
 800a886:	2200      	movs	r2, #0
 800a888:	2300      	movs	r3, #0
 800a88a:	4680      	mov	r8, r0
 800a88c:	4689      	mov	r9, r1
 800a88e:	f7f6 f92b 	bl	8000ae8 <__aeabi_dcmpeq>
 800a892:	2800      	cmp	r0, #0
 800a894:	d0c0      	beq.n	800a818 <_strtod_l+0x8b8>
 800a896:	e618      	b.n	800a4ca <_strtod_l+0x56a>
 800a898:	fffffc02 	.word	0xfffffc02
 800a89c:	7ff00000 	.word	0x7ff00000
 800a8a0:	39500000 	.word	0x39500000
 800a8a4:	000fffff 	.word	0x000fffff
 800a8a8:	7fefffff 	.word	0x7fefffff
 800a8ac:	0800cb30 	.word	0x0800cb30
 800a8b0:	4659      	mov	r1, fp
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f7ff fac0 	bl	8009e38 <__ratio>
 800a8b8:	ec57 6b10 	vmov	r6, r7, d0
 800a8bc:	ee10 0a10 	vmov	r0, s0
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f6 f922 	bl	8000b10 <__aeabi_dcmple>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d071      	beq.n	800a9b4 <_strtod_l+0xa54>
 800a8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d17c      	bne.n	800a9d0 <_strtod_l+0xa70>
 800a8d6:	f1b8 0f00 	cmp.w	r8, #0
 800a8da:	d15a      	bne.n	800a992 <_strtod_l+0xa32>
 800a8dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d15d      	bne.n	800a9a0 <_strtod_l+0xa40>
 800a8e4:	4b90      	ldr	r3, [pc, #576]	; (800ab28 <_strtod_l+0xbc8>)
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	4630      	mov	r0, r6
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f6 f906 	bl	8000afc <__aeabi_dcmplt>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d15c      	bne.n	800a9ae <_strtod_l+0xa4e>
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	4b8c      	ldr	r3, [pc, #560]	; (800ab2c <_strtod_l+0xbcc>)
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f7f5 fe8c 	bl	8000618 <__aeabi_dmul>
 800a900:	4606      	mov	r6, r0
 800a902:	460f      	mov	r7, r1
 800a904:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a908:	9606      	str	r6, [sp, #24]
 800a90a:	9307      	str	r3, [sp, #28]
 800a90c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a910:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a914:	4b86      	ldr	r3, [pc, #536]	; (800ab30 <_strtod_l+0xbd0>)
 800a916:	ea0a 0303 	and.w	r3, sl, r3
 800a91a:	930d      	str	r3, [sp, #52]	; 0x34
 800a91c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a91e:	4b85      	ldr	r3, [pc, #532]	; (800ab34 <_strtod_l+0xbd4>)
 800a920:	429a      	cmp	r2, r3
 800a922:	f040 8090 	bne.w	800aa46 <_strtod_l+0xae6>
 800a926:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a92a:	ec49 8b10 	vmov	d0, r8, r9
 800a92e:	f7ff f9b9 	bl	8009ca4 <__ulp>
 800a932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a936:	ec51 0b10 	vmov	r0, r1, d0
 800a93a:	f7f5 fe6d 	bl	8000618 <__aeabi_dmul>
 800a93e:	4642      	mov	r2, r8
 800a940:	464b      	mov	r3, r9
 800a942:	f7f5 fcb3 	bl	80002ac <__adddf3>
 800a946:	460b      	mov	r3, r1
 800a948:	4979      	ldr	r1, [pc, #484]	; (800ab30 <_strtod_l+0xbd0>)
 800a94a:	4a7b      	ldr	r2, [pc, #492]	; (800ab38 <_strtod_l+0xbd8>)
 800a94c:	4019      	ands	r1, r3
 800a94e:	4291      	cmp	r1, r2
 800a950:	4680      	mov	r8, r0
 800a952:	d944      	bls.n	800a9de <_strtod_l+0xa7e>
 800a954:	ee18 2a90 	vmov	r2, s17
 800a958:	4b78      	ldr	r3, [pc, #480]	; (800ab3c <_strtod_l+0xbdc>)
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d104      	bne.n	800a968 <_strtod_l+0xa08>
 800a95e:	ee18 3a10 	vmov	r3, s16
 800a962:	3301      	adds	r3, #1
 800a964:	f43f ad40 	beq.w	800a3e8 <_strtod_l+0x488>
 800a968:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ab3c <_strtod_l+0xbdc>
 800a96c:	f04f 38ff 	mov.w	r8, #4294967295
 800a970:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a972:	4620      	mov	r0, r4
 800a974:	f7fe fe6a 	bl	800964c <_Bfree>
 800a978:	9905      	ldr	r1, [sp, #20]
 800a97a:	4620      	mov	r0, r4
 800a97c:	f7fe fe66 	bl	800964c <_Bfree>
 800a980:	4659      	mov	r1, fp
 800a982:	4620      	mov	r0, r4
 800a984:	f7fe fe62 	bl	800964c <_Bfree>
 800a988:	4629      	mov	r1, r5
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7fe fe5e 	bl	800964c <_Bfree>
 800a990:	e609      	b.n	800a5a6 <_strtod_l+0x646>
 800a992:	f1b8 0f01 	cmp.w	r8, #1
 800a996:	d103      	bne.n	800a9a0 <_strtod_l+0xa40>
 800a998:	f1b9 0f00 	cmp.w	r9, #0
 800a99c:	f43f ad95 	beq.w	800a4ca <_strtod_l+0x56a>
 800a9a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aaf8 <_strtod_l+0xb98>
 800a9a4:	4f60      	ldr	r7, [pc, #384]	; (800ab28 <_strtod_l+0xbc8>)
 800a9a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9aa:	2600      	movs	r6, #0
 800a9ac:	e7ae      	b.n	800a90c <_strtod_l+0x9ac>
 800a9ae:	4f5f      	ldr	r7, [pc, #380]	; (800ab2c <_strtod_l+0xbcc>)
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	e7a7      	b.n	800a904 <_strtod_l+0x9a4>
 800a9b4:	4b5d      	ldr	r3, [pc, #372]	; (800ab2c <_strtod_l+0xbcc>)
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f7f5 fe2c 	bl	8000618 <__aeabi_dmul>
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d09c      	beq.n	800a904 <_strtod_l+0x9a4>
 800a9ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9ce:	e79d      	b.n	800a90c <_strtod_l+0x9ac>
 800a9d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ab00 <_strtod_l+0xba0>
 800a9d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9d8:	ec57 6b17 	vmov	r6, r7, d7
 800a9dc:	e796      	b.n	800a90c <_strtod_l+0x9ac>
 800a9de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a9e2:	9b04      	ldr	r3, [sp, #16]
 800a9e4:	46ca      	mov	sl, r9
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1c2      	bne.n	800a970 <_strtod_l+0xa10>
 800a9ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a9ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9f0:	0d1b      	lsrs	r3, r3, #20
 800a9f2:	051b      	lsls	r3, r3, #20
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d1bb      	bne.n	800a970 <_strtod_l+0xa10>
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f6 f96c 	bl	8000cd8 <__aeabi_d2lz>
 800aa00:	f7f5 fddc 	bl	80005bc <__aeabi_l2d>
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	4630      	mov	r0, r6
 800aa0a:	4639      	mov	r1, r7
 800aa0c:	f7f5 fc4c 	bl	80002a8 <__aeabi_dsub>
 800aa10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa16:	ea43 0308 	orr.w	r3, r3, r8
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	4606      	mov	r6, r0
 800aa1e:	460f      	mov	r7, r1
 800aa20:	d054      	beq.n	800aacc <_strtod_l+0xb6c>
 800aa22:	a339      	add	r3, pc, #228	; (adr r3, 800ab08 <_strtod_l+0xba8>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f6 f868 	bl	8000afc <__aeabi_dcmplt>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	f47f ace5 	bne.w	800a3fc <_strtod_l+0x49c>
 800aa32:	a337      	add	r3, pc, #220	; (adr r3, 800ab10 <_strtod_l+0xbb0>)
 800aa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f6 f87c 	bl	8000b38 <__aeabi_dcmpgt>
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d095      	beq.n	800a970 <_strtod_l+0xa10>
 800aa44:	e4da      	b.n	800a3fc <_strtod_l+0x49c>
 800aa46:	9b04      	ldr	r3, [sp, #16]
 800aa48:	b333      	cbz	r3, 800aa98 <_strtod_l+0xb38>
 800aa4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa50:	d822      	bhi.n	800aa98 <_strtod_l+0xb38>
 800aa52:	a331      	add	r3, pc, #196	; (adr r3, 800ab18 <_strtod_l+0xbb8>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	4630      	mov	r0, r6
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f6 f858 	bl	8000b10 <__aeabi_dcmple>
 800aa60:	b1a0      	cbz	r0, 800aa8c <_strtod_l+0xb2c>
 800aa62:	4639      	mov	r1, r7
 800aa64:	4630      	mov	r0, r6
 800aa66:	f7f6 f8af 	bl	8000bc8 <__aeabi_d2uiz>
 800aa6a:	2801      	cmp	r0, #1
 800aa6c:	bf38      	it	cc
 800aa6e:	2001      	movcc	r0, #1
 800aa70:	f7f5 fd58 	bl	8000524 <__aeabi_ui2d>
 800aa74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa76:	4606      	mov	r6, r0
 800aa78:	460f      	mov	r7, r1
 800aa7a:	bb23      	cbnz	r3, 800aac6 <_strtod_l+0xb66>
 800aa7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa80:	9010      	str	r0, [sp, #64]	; 0x40
 800aa82:	9311      	str	r3, [sp, #68]	; 0x44
 800aa84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aa88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aa8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aa9c:	eeb0 0a48 	vmov.f32	s0, s16
 800aaa0:	eef0 0a68 	vmov.f32	s1, s17
 800aaa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aaa8:	f7ff f8fc 	bl	8009ca4 <__ulp>
 800aaac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aab0:	ec53 2b10 	vmov	r2, r3, d0
 800aab4:	f7f5 fdb0 	bl	8000618 <__aeabi_dmul>
 800aab8:	ec53 2b18 	vmov	r2, r3, d8
 800aabc:	f7f5 fbf6 	bl	80002ac <__adddf3>
 800aac0:	4680      	mov	r8, r0
 800aac2:	4689      	mov	r9, r1
 800aac4:	e78d      	b.n	800a9e2 <_strtod_l+0xa82>
 800aac6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aaca:	e7db      	b.n	800aa84 <_strtod_l+0xb24>
 800aacc:	a314      	add	r3, pc, #80	; (adr r3, 800ab20 <_strtod_l+0xbc0>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f6 f813 	bl	8000afc <__aeabi_dcmplt>
 800aad6:	e7b3      	b.n	800aa40 <_strtod_l+0xae0>
 800aad8:	2300      	movs	r3, #0
 800aada:	930a      	str	r3, [sp, #40]	; 0x28
 800aadc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aade:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	f7ff ba7c 	b.w	8009fde <_strtod_l+0x7e>
 800aae6:	2a65      	cmp	r2, #101	; 0x65
 800aae8:	f43f ab75 	beq.w	800a1d6 <_strtod_l+0x276>
 800aaec:	2a45      	cmp	r2, #69	; 0x45
 800aaee:	f43f ab72 	beq.w	800a1d6 <_strtod_l+0x276>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	f7ff bbaa 	b.w	800a24c <_strtod_l+0x2ec>
 800aaf8:	00000000 	.word	0x00000000
 800aafc:	bff00000 	.word	0xbff00000
 800ab00:	00000000 	.word	0x00000000
 800ab04:	3ff00000 	.word	0x3ff00000
 800ab08:	94a03595 	.word	0x94a03595
 800ab0c:	3fdfffff 	.word	0x3fdfffff
 800ab10:	35afe535 	.word	0x35afe535
 800ab14:	3fe00000 	.word	0x3fe00000
 800ab18:	ffc00000 	.word	0xffc00000
 800ab1c:	41dfffff 	.word	0x41dfffff
 800ab20:	94a03595 	.word	0x94a03595
 800ab24:	3fcfffff 	.word	0x3fcfffff
 800ab28:	3ff00000 	.word	0x3ff00000
 800ab2c:	3fe00000 	.word	0x3fe00000
 800ab30:	7ff00000 	.word	0x7ff00000
 800ab34:	7fe00000 	.word	0x7fe00000
 800ab38:	7c9fffff 	.word	0x7c9fffff
 800ab3c:	7fefffff 	.word	0x7fefffff

0800ab40 <_strtod_r>:
 800ab40:	4b01      	ldr	r3, [pc, #4]	; (800ab48 <_strtod_r+0x8>)
 800ab42:	f7ff ba0d 	b.w	8009f60 <_strtod_l>
 800ab46:	bf00      	nop
 800ab48:	200000d0 	.word	0x200000d0

0800ab4c <_strtol_l.constprop.0>:
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab52:	d001      	beq.n	800ab58 <_strtol_l.constprop.0+0xc>
 800ab54:	2b24      	cmp	r3, #36	; 0x24
 800ab56:	d906      	bls.n	800ab66 <_strtol_l.constprop.0+0x1a>
 800ab58:	f7fd fd14 	bl	8008584 <__errno>
 800ab5c:	2316      	movs	r3, #22
 800ab5e:	6003      	str	r3, [r0, #0]
 800ab60:	2000      	movs	r0, #0
 800ab62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac4c <_strtol_l.constprop.0+0x100>
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	462e      	mov	r6, r5
 800ab6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab72:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ab76:	f017 0708 	ands.w	r7, r7, #8
 800ab7a:	d1f7      	bne.n	800ab6c <_strtol_l.constprop.0+0x20>
 800ab7c:	2c2d      	cmp	r4, #45	; 0x2d
 800ab7e:	d132      	bne.n	800abe6 <_strtol_l.constprop.0+0x9a>
 800ab80:	782c      	ldrb	r4, [r5, #0]
 800ab82:	2701      	movs	r7, #1
 800ab84:	1cb5      	adds	r5, r6, #2
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d05b      	beq.n	800ac42 <_strtol_l.constprop.0+0xf6>
 800ab8a:	2b10      	cmp	r3, #16
 800ab8c:	d109      	bne.n	800aba2 <_strtol_l.constprop.0+0x56>
 800ab8e:	2c30      	cmp	r4, #48	; 0x30
 800ab90:	d107      	bne.n	800aba2 <_strtol_l.constprop.0+0x56>
 800ab92:	782c      	ldrb	r4, [r5, #0]
 800ab94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab98:	2c58      	cmp	r4, #88	; 0x58
 800ab9a:	d14d      	bne.n	800ac38 <_strtol_l.constprop.0+0xec>
 800ab9c:	786c      	ldrb	r4, [r5, #1]
 800ab9e:	2310      	movs	r3, #16
 800aba0:	3502      	adds	r5, #2
 800aba2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800aba6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abaa:	f04f 0e00 	mov.w	lr, #0
 800abae:	fbb8 f9f3 	udiv	r9, r8, r3
 800abb2:	4676      	mov	r6, lr
 800abb4:	fb03 8a19 	mls	sl, r3, r9, r8
 800abb8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800abbc:	f1bc 0f09 	cmp.w	ip, #9
 800abc0:	d816      	bhi.n	800abf0 <_strtol_l.constprop.0+0xa4>
 800abc2:	4664      	mov	r4, ip
 800abc4:	42a3      	cmp	r3, r4
 800abc6:	dd24      	ble.n	800ac12 <_strtol_l.constprop.0+0xc6>
 800abc8:	f1be 3fff 	cmp.w	lr, #4294967295
 800abcc:	d008      	beq.n	800abe0 <_strtol_l.constprop.0+0x94>
 800abce:	45b1      	cmp	r9, r6
 800abd0:	d31c      	bcc.n	800ac0c <_strtol_l.constprop.0+0xc0>
 800abd2:	d101      	bne.n	800abd8 <_strtol_l.constprop.0+0x8c>
 800abd4:	45a2      	cmp	sl, r4
 800abd6:	db19      	blt.n	800ac0c <_strtol_l.constprop.0+0xc0>
 800abd8:	fb06 4603 	mla	r6, r6, r3, r4
 800abdc:	f04f 0e01 	mov.w	lr, #1
 800abe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abe4:	e7e8      	b.n	800abb8 <_strtol_l.constprop.0+0x6c>
 800abe6:	2c2b      	cmp	r4, #43	; 0x2b
 800abe8:	bf04      	itt	eq
 800abea:	782c      	ldrbeq	r4, [r5, #0]
 800abec:	1cb5      	addeq	r5, r6, #2
 800abee:	e7ca      	b.n	800ab86 <_strtol_l.constprop.0+0x3a>
 800abf0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800abf4:	f1bc 0f19 	cmp.w	ip, #25
 800abf8:	d801      	bhi.n	800abfe <_strtol_l.constprop.0+0xb2>
 800abfa:	3c37      	subs	r4, #55	; 0x37
 800abfc:	e7e2      	b.n	800abc4 <_strtol_l.constprop.0+0x78>
 800abfe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac02:	f1bc 0f19 	cmp.w	ip, #25
 800ac06:	d804      	bhi.n	800ac12 <_strtol_l.constprop.0+0xc6>
 800ac08:	3c57      	subs	r4, #87	; 0x57
 800ac0a:	e7db      	b.n	800abc4 <_strtol_l.constprop.0+0x78>
 800ac0c:	f04f 3eff 	mov.w	lr, #4294967295
 800ac10:	e7e6      	b.n	800abe0 <_strtol_l.constprop.0+0x94>
 800ac12:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac16:	d105      	bne.n	800ac24 <_strtol_l.constprop.0+0xd8>
 800ac18:	2322      	movs	r3, #34	; 0x22
 800ac1a:	6003      	str	r3, [r0, #0]
 800ac1c:	4646      	mov	r6, r8
 800ac1e:	b942      	cbnz	r2, 800ac32 <_strtol_l.constprop.0+0xe6>
 800ac20:	4630      	mov	r0, r6
 800ac22:	e79e      	b.n	800ab62 <_strtol_l.constprop.0+0x16>
 800ac24:	b107      	cbz	r7, 800ac28 <_strtol_l.constprop.0+0xdc>
 800ac26:	4276      	negs	r6, r6
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	d0f9      	beq.n	800ac20 <_strtol_l.constprop.0+0xd4>
 800ac2c:	f1be 0f00 	cmp.w	lr, #0
 800ac30:	d000      	beq.n	800ac34 <_strtol_l.constprop.0+0xe8>
 800ac32:	1e69      	subs	r1, r5, #1
 800ac34:	6011      	str	r1, [r2, #0]
 800ac36:	e7f3      	b.n	800ac20 <_strtol_l.constprop.0+0xd4>
 800ac38:	2430      	movs	r4, #48	; 0x30
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1b1      	bne.n	800aba2 <_strtol_l.constprop.0+0x56>
 800ac3e:	2308      	movs	r3, #8
 800ac40:	e7af      	b.n	800aba2 <_strtol_l.constprop.0+0x56>
 800ac42:	2c30      	cmp	r4, #48	; 0x30
 800ac44:	d0a5      	beq.n	800ab92 <_strtol_l.constprop.0+0x46>
 800ac46:	230a      	movs	r3, #10
 800ac48:	e7ab      	b.n	800aba2 <_strtol_l.constprop.0+0x56>
 800ac4a:	bf00      	nop
 800ac4c:	0800cb59 	.word	0x0800cb59

0800ac50 <_strtol_r>:
 800ac50:	f7ff bf7c 	b.w	800ab4c <_strtol_l.constprop.0>

0800ac54 <_strtoul_l.constprop.0>:
 800ac54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac58:	4f36      	ldr	r7, [pc, #216]	; (800ad34 <_strtoul_l.constprop.0+0xe0>)
 800ac5a:	4686      	mov	lr, r0
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac64:	5d3e      	ldrb	r6, [r7, r4]
 800ac66:	f016 0608 	ands.w	r6, r6, #8
 800ac6a:	d1f8      	bne.n	800ac5e <_strtoul_l.constprop.0+0xa>
 800ac6c:	2c2d      	cmp	r4, #45	; 0x2d
 800ac6e:	d130      	bne.n	800acd2 <_strtoul_l.constprop.0+0x7e>
 800ac70:	782c      	ldrb	r4, [r5, #0]
 800ac72:	2601      	movs	r6, #1
 800ac74:	1c85      	adds	r5, r0, #2
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d057      	beq.n	800ad2a <_strtoul_l.constprop.0+0xd6>
 800ac7a:	2b10      	cmp	r3, #16
 800ac7c:	d109      	bne.n	800ac92 <_strtoul_l.constprop.0+0x3e>
 800ac7e:	2c30      	cmp	r4, #48	; 0x30
 800ac80:	d107      	bne.n	800ac92 <_strtoul_l.constprop.0+0x3e>
 800ac82:	7828      	ldrb	r0, [r5, #0]
 800ac84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ac88:	2858      	cmp	r0, #88	; 0x58
 800ac8a:	d149      	bne.n	800ad20 <_strtoul_l.constprop.0+0xcc>
 800ac8c:	786c      	ldrb	r4, [r5, #1]
 800ac8e:	2310      	movs	r3, #16
 800ac90:	3502      	adds	r5, #2
 800ac92:	f04f 38ff 	mov.w	r8, #4294967295
 800ac96:	2700      	movs	r7, #0
 800ac98:	fbb8 f8f3 	udiv	r8, r8, r3
 800ac9c:	fb03 f908 	mul.w	r9, r3, r8
 800aca0:	ea6f 0909 	mvn.w	r9, r9
 800aca4:	4638      	mov	r0, r7
 800aca6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800acaa:	f1bc 0f09 	cmp.w	ip, #9
 800acae:	d815      	bhi.n	800acdc <_strtoul_l.constprop.0+0x88>
 800acb0:	4664      	mov	r4, ip
 800acb2:	42a3      	cmp	r3, r4
 800acb4:	dd23      	ble.n	800acfe <_strtoul_l.constprop.0+0xaa>
 800acb6:	f1b7 3fff 	cmp.w	r7, #4294967295
 800acba:	d007      	beq.n	800accc <_strtoul_l.constprop.0+0x78>
 800acbc:	4580      	cmp	r8, r0
 800acbe:	d31b      	bcc.n	800acf8 <_strtoul_l.constprop.0+0xa4>
 800acc0:	d101      	bne.n	800acc6 <_strtoul_l.constprop.0+0x72>
 800acc2:	45a1      	cmp	r9, r4
 800acc4:	db18      	blt.n	800acf8 <_strtoul_l.constprop.0+0xa4>
 800acc6:	fb00 4003 	mla	r0, r0, r3, r4
 800acca:	2701      	movs	r7, #1
 800accc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acd0:	e7e9      	b.n	800aca6 <_strtoul_l.constprop.0+0x52>
 800acd2:	2c2b      	cmp	r4, #43	; 0x2b
 800acd4:	bf04      	itt	eq
 800acd6:	782c      	ldrbeq	r4, [r5, #0]
 800acd8:	1c85      	addeq	r5, r0, #2
 800acda:	e7cc      	b.n	800ac76 <_strtoul_l.constprop.0+0x22>
 800acdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ace0:	f1bc 0f19 	cmp.w	ip, #25
 800ace4:	d801      	bhi.n	800acea <_strtoul_l.constprop.0+0x96>
 800ace6:	3c37      	subs	r4, #55	; 0x37
 800ace8:	e7e3      	b.n	800acb2 <_strtoul_l.constprop.0+0x5e>
 800acea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800acee:	f1bc 0f19 	cmp.w	ip, #25
 800acf2:	d804      	bhi.n	800acfe <_strtoul_l.constprop.0+0xaa>
 800acf4:	3c57      	subs	r4, #87	; 0x57
 800acf6:	e7dc      	b.n	800acb2 <_strtoul_l.constprop.0+0x5e>
 800acf8:	f04f 37ff 	mov.w	r7, #4294967295
 800acfc:	e7e6      	b.n	800accc <_strtoul_l.constprop.0+0x78>
 800acfe:	1c7b      	adds	r3, r7, #1
 800ad00:	d106      	bne.n	800ad10 <_strtoul_l.constprop.0+0xbc>
 800ad02:	2322      	movs	r3, #34	; 0x22
 800ad04:	f8ce 3000 	str.w	r3, [lr]
 800ad08:	4638      	mov	r0, r7
 800ad0a:	b932      	cbnz	r2, 800ad1a <_strtoul_l.constprop.0+0xc6>
 800ad0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad10:	b106      	cbz	r6, 800ad14 <_strtoul_l.constprop.0+0xc0>
 800ad12:	4240      	negs	r0, r0
 800ad14:	2a00      	cmp	r2, #0
 800ad16:	d0f9      	beq.n	800ad0c <_strtoul_l.constprop.0+0xb8>
 800ad18:	b107      	cbz	r7, 800ad1c <_strtoul_l.constprop.0+0xc8>
 800ad1a:	1e69      	subs	r1, r5, #1
 800ad1c:	6011      	str	r1, [r2, #0]
 800ad1e:	e7f5      	b.n	800ad0c <_strtoul_l.constprop.0+0xb8>
 800ad20:	2430      	movs	r4, #48	; 0x30
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1b5      	bne.n	800ac92 <_strtoul_l.constprop.0+0x3e>
 800ad26:	2308      	movs	r3, #8
 800ad28:	e7b3      	b.n	800ac92 <_strtoul_l.constprop.0+0x3e>
 800ad2a:	2c30      	cmp	r4, #48	; 0x30
 800ad2c:	d0a9      	beq.n	800ac82 <_strtoul_l.constprop.0+0x2e>
 800ad2e:	230a      	movs	r3, #10
 800ad30:	e7af      	b.n	800ac92 <_strtoul_l.constprop.0+0x3e>
 800ad32:	bf00      	nop
 800ad34:	0800cb59 	.word	0x0800cb59

0800ad38 <_strtoul_r>:
 800ad38:	f7ff bf8c 	b.w	800ac54 <_strtoul_l.constprop.0>

0800ad3c <strtoul>:
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	460a      	mov	r2, r1
 800ad40:	4601      	mov	r1, r0
 800ad42:	4802      	ldr	r0, [pc, #8]	; (800ad4c <strtoul+0x10>)
 800ad44:	6800      	ldr	r0, [r0, #0]
 800ad46:	f7ff bf85 	b.w	800ac54 <_strtoul_l.constprop.0>
 800ad4a:	bf00      	nop
 800ad4c:	20000074 	.word	0x20000074

0800ad50 <__ssputs_r>:
 800ad50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	688e      	ldr	r6, [r1, #8]
 800ad56:	461f      	mov	r7, r3
 800ad58:	42be      	cmp	r6, r7
 800ad5a:	680b      	ldr	r3, [r1, #0]
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	460c      	mov	r4, r1
 800ad60:	4690      	mov	r8, r2
 800ad62:	d82c      	bhi.n	800adbe <__ssputs_r+0x6e>
 800ad64:	898a      	ldrh	r2, [r1, #12]
 800ad66:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad6a:	d026      	beq.n	800adba <__ssputs_r+0x6a>
 800ad6c:	6965      	ldr	r5, [r4, #20]
 800ad6e:	6909      	ldr	r1, [r1, #16]
 800ad70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad74:	eba3 0901 	sub.w	r9, r3, r1
 800ad78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad7c:	1c7b      	adds	r3, r7, #1
 800ad7e:	444b      	add	r3, r9
 800ad80:	106d      	asrs	r5, r5, #1
 800ad82:	429d      	cmp	r5, r3
 800ad84:	bf38      	it	cc
 800ad86:	461d      	movcc	r5, r3
 800ad88:	0553      	lsls	r3, r2, #21
 800ad8a:	d527      	bpl.n	800addc <__ssputs_r+0x8c>
 800ad8c:	4629      	mov	r1, r5
 800ad8e:	f7fe fb91 	bl	80094b4 <_malloc_r>
 800ad92:	4606      	mov	r6, r0
 800ad94:	b360      	cbz	r0, 800adf0 <__ssputs_r+0xa0>
 800ad96:	6921      	ldr	r1, [r4, #16]
 800ad98:	464a      	mov	r2, r9
 800ad9a:	f7fd fc29 	bl	80085f0 <memcpy>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ada4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ada8:	81a3      	strh	r3, [r4, #12]
 800adaa:	6126      	str	r6, [r4, #16]
 800adac:	6165      	str	r5, [r4, #20]
 800adae:	444e      	add	r6, r9
 800adb0:	eba5 0509 	sub.w	r5, r5, r9
 800adb4:	6026      	str	r6, [r4, #0]
 800adb6:	60a5      	str	r5, [r4, #8]
 800adb8:	463e      	mov	r6, r7
 800adba:	42be      	cmp	r6, r7
 800adbc:	d900      	bls.n	800adc0 <__ssputs_r+0x70>
 800adbe:	463e      	mov	r6, r7
 800adc0:	6820      	ldr	r0, [r4, #0]
 800adc2:	4632      	mov	r2, r6
 800adc4:	4641      	mov	r1, r8
 800adc6:	f000 fdbe 	bl	800b946 <memmove>
 800adca:	68a3      	ldr	r3, [r4, #8]
 800adcc:	1b9b      	subs	r3, r3, r6
 800adce:	60a3      	str	r3, [r4, #8]
 800add0:	6823      	ldr	r3, [r4, #0]
 800add2:	4433      	add	r3, r6
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	2000      	movs	r0, #0
 800add8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800addc:	462a      	mov	r2, r5
 800adde:	f001 f9c8 	bl	800c172 <_realloc_r>
 800ade2:	4606      	mov	r6, r0
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d1e0      	bne.n	800adaa <__ssputs_r+0x5a>
 800ade8:	6921      	ldr	r1, [r4, #16]
 800adea:	4650      	mov	r0, sl
 800adec:	f7fe faa2 	bl	8009334 <_free_r>
 800adf0:	230c      	movs	r3, #12
 800adf2:	f8ca 3000 	str.w	r3, [sl]
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	e7e9      	b.n	800add8 <__ssputs_r+0x88>

0800ae04 <_svfiprintf_r>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	4698      	mov	r8, r3
 800ae0a:	898b      	ldrh	r3, [r1, #12]
 800ae0c:	061b      	lsls	r3, r3, #24
 800ae0e:	b09d      	sub	sp, #116	; 0x74
 800ae10:	4607      	mov	r7, r0
 800ae12:	460d      	mov	r5, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	d50e      	bpl.n	800ae36 <_svfiprintf_r+0x32>
 800ae18:	690b      	ldr	r3, [r1, #16]
 800ae1a:	b963      	cbnz	r3, 800ae36 <_svfiprintf_r+0x32>
 800ae1c:	2140      	movs	r1, #64	; 0x40
 800ae1e:	f7fe fb49 	bl	80094b4 <_malloc_r>
 800ae22:	6028      	str	r0, [r5, #0]
 800ae24:	6128      	str	r0, [r5, #16]
 800ae26:	b920      	cbnz	r0, 800ae32 <_svfiprintf_r+0x2e>
 800ae28:	230c      	movs	r3, #12
 800ae2a:	603b      	str	r3, [r7, #0]
 800ae2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae30:	e0d0      	b.n	800afd4 <_svfiprintf_r+0x1d0>
 800ae32:	2340      	movs	r3, #64	; 0x40
 800ae34:	616b      	str	r3, [r5, #20]
 800ae36:	2300      	movs	r3, #0
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
 800ae3a:	2320      	movs	r3, #32
 800ae3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae44:	2330      	movs	r3, #48	; 0x30
 800ae46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800afec <_svfiprintf_r+0x1e8>
 800ae4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae4e:	f04f 0901 	mov.w	r9, #1
 800ae52:	4623      	mov	r3, r4
 800ae54:	469a      	mov	sl, r3
 800ae56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae5a:	b10a      	cbz	r2, 800ae60 <_svfiprintf_r+0x5c>
 800ae5c:	2a25      	cmp	r2, #37	; 0x25
 800ae5e:	d1f9      	bne.n	800ae54 <_svfiprintf_r+0x50>
 800ae60:	ebba 0b04 	subs.w	fp, sl, r4
 800ae64:	d00b      	beq.n	800ae7e <_svfiprintf_r+0x7a>
 800ae66:	465b      	mov	r3, fp
 800ae68:	4622      	mov	r2, r4
 800ae6a:	4629      	mov	r1, r5
 800ae6c:	4638      	mov	r0, r7
 800ae6e:	f7ff ff6f 	bl	800ad50 <__ssputs_r>
 800ae72:	3001      	adds	r0, #1
 800ae74:	f000 80a9 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae7a:	445a      	add	r2, fp
 800ae7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f000 80a1 	beq.w	800afca <_svfiprintf_r+0x1c6>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae92:	f10a 0a01 	add.w	sl, sl, #1
 800ae96:	9304      	str	r3, [sp, #16]
 800ae98:	9307      	str	r3, [sp, #28]
 800ae9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aea0:	4654      	mov	r4, sl
 800aea2:	2205      	movs	r2, #5
 800aea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea8:	4850      	ldr	r0, [pc, #320]	; (800afec <_svfiprintf_r+0x1e8>)
 800aeaa:	f7f5 f9a1 	bl	80001f0 <memchr>
 800aeae:	9a04      	ldr	r2, [sp, #16]
 800aeb0:	b9d8      	cbnz	r0, 800aeea <_svfiprintf_r+0xe6>
 800aeb2:	06d0      	lsls	r0, r2, #27
 800aeb4:	bf44      	itt	mi
 800aeb6:	2320      	movmi	r3, #32
 800aeb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aebc:	0711      	lsls	r1, r2, #28
 800aebe:	bf44      	itt	mi
 800aec0:	232b      	movmi	r3, #43	; 0x2b
 800aec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aec6:	f89a 3000 	ldrb.w	r3, [sl]
 800aeca:	2b2a      	cmp	r3, #42	; 0x2a
 800aecc:	d015      	beq.n	800aefa <_svfiprintf_r+0xf6>
 800aece:	9a07      	ldr	r2, [sp, #28]
 800aed0:	4654      	mov	r4, sl
 800aed2:	2000      	movs	r0, #0
 800aed4:	f04f 0c0a 	mov.w	ip, #10
 800aed8:	4621      	mov	r1, r4
 800aeda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aede:	3b30      	subs	r3, #48	; 0x30
 800aee0:	2b09      	cmp	r3, #9
 800aee2:	d94d      	bls.n	800af80 <_svfiprintf_r+0x17c>
 800aee4:	b1b0      	cbz	r0, 800af14 <_svfiprintf_r+0x110>
 800aee6:	9207      	str	r2, [sp, #28]
 800aee8:	e014      	b.n	800af14 <_svfiprintf_r+0x110>
 800aeea:	eba0 0308 	sub.w	r3, r0, r8
 800aeee:	fa09 f303 	lsl.w	r3, r9, r3
 800aef2:	4313      	orrs	r3, r2
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	46a2      	mov	sl, r4
 800aef8:	e7d2      	b.n	800aea0 <_svfiprintf_r+0x9c>
 800aefa:	9b03      	ldr	r3, [sp, #12]
 800aefc:	1d19      	adds	r1, r3, #4
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	9103      	str	r1, [sp, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	bfbb      	ittet	lt
 800af06:	425b      	neglt	r3, r3
 800af08:	f042 0202 	orrlt.w	r2, r2, #2
 800af0c:	9307      	strge	r3, [sp, #28]
 800af0e:	9307      	strlt	r3, [sp, #28]
 800af10:	bfb8      	it	lt
 800af12:	9204      	strlt	r2, [sp, #16]
 800af14:	7823      	ldrb	r3, [r4, #0]
 800af16:	2b2e      	cmp	r3, #46	; 0x2e
 800af18:	d10c      	bne.n	800af34 <_svfiprintf_r+0x130>
 800af1a:	7863      	ldrb	r3, [r4, #1]
 800af1c:	2b2a      	cmp	r3, #42	; 0x2a
 800af1e:	d134      	bne.n	800af8a <_svfiprintf_r+0x186>
 800af20:	9b03      	ldr	r3, [sp, #12]
 800af22:	1d1a      	adds	r2, r3, #4
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	9203      	str	r2, [sp, #12]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfb8      	it	lt
 800af2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800af30:	3402      	adds	r4, #2
 800af32:	9305      	str	r3, [sp, #20]
 800af34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800affc <_svfiprintf_r+0x1f8>
 800af38:	7821      	ldrb	r1, [r4, #0]
 800af3a:	2203      	movs	r2, #3
 800af3c:	4650      	mov	r0, sl
 800af3e:	f7f5 f957 	bl	80001f0 <memchr>
 800af42:	b138      	cbz	r0, 800af54 <_svfiprintf_r+0x150>
 800af44:	9b04      	ldr	r3, [sp, #16]
 800af46:	eba0 000a 	sub.w	r0, r0, sl
 800af4a:	2240      	movs	r2, #64	; 0x40
 800af4c:	4082      	lsls	r2, r0
 800af4e:	4313      	orrs	r3, r2
 800af50:	3401      	adds	r4, #1
 800af52:	9304      	str	r3, [sp, #16]
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	4825      	ldr	r0, [pc, #148]	; (800aff0 <_svfiprintf_r+0x1ec>)
 800af5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af5e:	2206      	movs	r2, #6
 800af60:	f7f5 f946 	bl	80001f0 <memchr>
 800af64:	2800      	cmp	r0, #0
 800af66:	d038      	beq.n	800afda <_svfiprintf_r+0x1d6>
 800af68:	4b22      	ldr	r3, [pc, #136]	; (800aff4 <_svfiprintf_r+0x1f0>)
 800af6a:	bb1b      	cbnz	r3, 800afb4 <_svfiprintf_r+0x1b0>
 800af6c:	9b03      	ldr	r3, [sp, #12]
 800af6e:	3307      	adds	r3, #7
 800af70:	f023 0307 	bic.w	r3, r3, #7
 800af74:	3308      	adds	r3, #8
 800af76:	9303      	str	r3, [sp, #12]
 800af78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af7a:	4433      	add	r3, r6
 800af7c:	9309      	str	r3, [sp, #36]	; 0x24
 800af7e:	e768      	b.n	800ae52 <_svfiprintf_r+0x4e>
 800af80:	fb0c 3202 	mla	r2, ip, r2, r3
 800af84:	460c      	mov	r4, r1
 800af86:	2001      	movs	r0, #1
 800af88:	e7a6      	b.n	800aed8 <_svfiprintf_r+0xd4>
 800af8a:	2300      	movs	r3, #0
 800af8c:	3401      	adds	r4, #1
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	4619      	mov	r1, r3
 800af92:	f04f 0c0a 	mov.w	ip, #10
 800af96:	4620      	mov	r0, r4
 800af98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af9c:	3a30      	subs	r2, #48	; 0x30
 800af9e:	2a09      	cmp	r2, #9
 800afa0:	d903      	bls.n	800afaa <_svfiprintf_r+0x1a6>
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0c6      	beq.n	800af34 <_svfiprintf_r+0x130>
 800afa6:	9105      	str	r1, [sp, #20]
 800afa8:	e7c4      	b.n	800af34 <_svfiprintf_r+0x130>
 800afaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800afae:	4604      	mov	r4, r0
 800afb0:	2301      	movs	r3, #1
 800afb2:	e7f0      	b.n	800af96 <_svfiprintf_r+0x192>
 800afb4:	ab03      	add	r3, sp, #12
 800afb6:	9300      	str	r3, [sp, #0]
 800afb8:	462a      	mov	r2, r5
 800afba:	4b0f      	ldr	r3, [pc, #60]	; (800aff8 <_svfiprintf_r+0x1f4>)
 800afbc:	a904      	add	r1, sp, #16
 800afbe:	4638      	mov	r0, r7
 800afc0:	f7fb fcde 	bl	8006980 <_printf_float>
 800afc4:	1c42      	adds	r2, r0, #1
 800afc6:	4606      	mov	r6, r0
 800afc8:	d1d6      	bne.n	800af78 <_svfiprintf_r+0x174>
 800afca:	89ab      	ldrh	r3, [r5, #12]
 800afcc:	065b      	lsls	r3, r3, #25
 800afce:	f53f af2d 	bmi.w	800ae2c <_svfiprintf_r+0x28>
 800afd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afd4:	b01d      	add	sp, #116	; 0x74
 800afd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afda:	ab03      	add	r3, sp, #12
 800afdc:	9300      	str	r3, [sp, #0]
 800afde:	462a      	mov	r2, r5
 800afe0:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <_svfiprintf_r+0x1f4>)
 800afe2:	a904      	add	r1, sp, #16
 800afe4:	4638      	mov	r0, r7
 800afe6:	f7fb ff6f 	bl	8006ec8 <_printf_i>
 800afea:	e7eb      	b.n	800afc4 <_svfiprintf_r+0x1c0>
 800afec:	0800cc59 	.word	0x0800cc59
 800aff0:	0800cc63 	.word	0x0800cc63
 800aff4:	08006981 	.word	0x08006981
 800aff8:	0800ad51 	.word	0x0800ad51
 800affc:	0800cc5f 	.word	0x0800cc5f

0800b000 <_sungetc_r>:
 800b000:	b538      	push	{r3, r4, r5, lr}
 800b002:	1c4b      	adds	r3, r1, #1
 800b004:	4614      	mov	r4, r2
 800b006:	d103      	bne.n	800b010 <_sungetc_r+0x10>
 800b008:	f04f 35ff 	mov.w	r5, #4294967295
 800b00c:	4628      	mov	r0, r5
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	8993      	ldrh	r3, [r2, #12]
 800b012:	f023 0320 	bic.w	r3, r3, #32
 800b016:	8193      	strh	r3, [r2, #12]
 800b018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b01a:	6852      	ldr	r2, [r2, #4]
 800b01c:	b2cd      	uxtb	r5, r1
 800b01e:	b18b      	cbz	r3, 800b044 <_sungetc_r+0x44>
 800b020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b022:	4293      	cmp	r3, r2
 800b024:	dd08      	ble.n	800b038 <_sungetc_r+0x38>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	1e5a      	subs	r2, r3, #1
 800b02a:	6022      	str	r2, [r4, #0]
 800b02c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b030:	6863      	ldr	r3, [r4, #4]
 800b032:	3301      	adds	r3, #1
 800b034:	6063      	str	r3, [r4, #4]
 800b036:	e7e9      	b.n	800b00c <_sungetc_r+0xc>
 800b038:	4621      	mov	r1, r4
 800b03a:	f000 fc4a 	bl	800b8d2 <__submore>
 800b03e:	2800      	cmp	r0, #0
 800b040:	d0f1      	beq.n	800b026 <_sungetc_r+0x26>
 800b042:	e7e1      	b.n	800b008 <_sungetc_r+0x8>
 800b044:	6921      	ldr	r1, [r4, #16]
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	b151      	cbz	r1, 800b060 <_sungetc_r+0x60>
 800b04a:	4299      	cmp	r1, r3
 800b04c:	d208      	bcs.n	800b060 <_sungetc_r+0x60>
 800b04e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b052:	42a9      	cmp	r1, r5
 800b054:	d104      	bne.n	800b060 <_sungetc_r+0x60>
 800b056:	3b01      	subs	r3, #1
 800b058:	3201      	adds	r2, #1
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	6062      	str	r2, [r4, #4]
 800b05e:	e7d5      	b.n	800b00c <_sungetc_r+0xc>
 800b060:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b064:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b068:	6363      	str	r3, [r4, #52]	; 0x34
 800b06a:	2303      	movs	r3, #3
 800b06c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b06e:	4623      	mov	r3, r4
 800b070:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	2301      	movs	r3, #1
 800b078:	e7dc      	b.n	800b034 <_sungetc_r+0x34>

0800b07a <__ssrefill_r>:
 800b07a:	b510      	push	{r4, lr}
 800b07c:	460c      	mov	r4, r1
 800b07e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b080:	b169      	cbz	r1, 800b09e <__ssrefill_r+0x24>
 800b082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b086:	4299      	cmp	r1, r3
 800b088:	d001      	beq.n	800b08e <__ssrefill_r+0x14>
 800b08a:	f7fe f953 	bl	8009334 <_free_r>
 800b08e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	2000      	movs	r0, #0
 800b094:	6360      	str	r0, [r4, #52]	; 0x34
 800b096:	b113      	cbz	r3, 800b09e <__ssrefill_r+0x24>
 800b098:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b09a:	6023      	str	r3, [r4, #0]
 800b09c:	bd10      	pop	{r4, pc}
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	6063      	str	r3, [r4, #4]
 800b0a6:	89a3      	ldrh	r3, [r4, #12]
 800b0a8:	f043 0320 	orr.w	r3, r3, #32
 800b0ac:	81a3      	strh	r3, [r4, #12]
 800b0ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b2:	e7f3      	b.n	800b09c <__ssrefill_r+0x22>

0800b0b4 <__ssvfiscanf_r>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	460c      	mov	r4, r1
 800b0ba:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b0be:	2100      	movs	r1, #0
 800b0c0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b0c4:	49a6      	ldr	r1, [pc, #664]	; (800b360 <__ssvfiscanf_r+0x2ac>)
 800b0c6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b0c8:	f10d 0804 	add.w	r8, sp, #4
 800b0cc:	49a5      	ldr	r1, [pc, #660]	; (800b364 <__ssvfiscanf_r+0x2b0>)
 800b0ce:	4fa6      	ldr	r7, [pc, #664]	; (800b368 <__ssvfiscanf_r+0x2b4>)
 800b0d0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b36c <__ssvfiscanf_r+0x2b8>
 800b0d4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b0d8:	4606      	mov	r6, r0
 800b0da:	91a1      	str	r1, [sp, #644]	; 0x284
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	7813      	ldrb	r3, [r2, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 815a 	beq.w	800b39a <__ssvfiscanf_r+0x2e6>
 800b0e6:	5cf9      	ldrb	r1, [r7, r3]
 800b0e8:	f011 0108 	ands.w	r1, r1, #8
 800b0ec:	f102 0501 	add.w	r5, r2, #1
 800b0f0:	d019      	beq.n	800b126 <__ssvfiscanf_r+0x72>
 800b0f2:	6863      	ldr	r3, [r4, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dd0f      	ble.n	800b118 <__ssvfiscanf_r+0x64>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	5cba      	ldrb	r2, [r7, r2]
 800b0fe:	0712      	lsls	r2, r2, #28
 800b100:	d401      	bmi.n	800b106 <__ssvfiscanf_r+0x52>
 800b102:	462a      	mov	r2, r5
 800b104:	e7eb      	b.n	800b0de <__ssvfiscanf_r+0x2a>
 800b106:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b108:	3201      	adds	r2, #1
 800b10a:	9245      	str	r2, [sp, #276]	; 0x114
 800b10c:	6862      	ldr	r2, [r4, #4]
 800b10e:	3301      	adds	r3, #1
 800b110:	3a01      	subs	r2, #1
 800b112:	6062      	str	r2, [r4, #4]
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	e7ec      	b.n	800b0f2 <__ssvfiscanf_r+0x3e>
 800b118:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b11a:	4621      	mov	r1, r4
 800b11c:	4630      	mov	r0, r6
 800b11e:	4798      	blx	r3
 800b120:	2800      	cmp	r0, #0
 800b122:	d0e9      	beq.n	800b0f8 <__ssvfiscanf_r+0x44>
 800b124:	e7ed      	b.n	800b102 <__ssvfiscanf_r+0x4e>
 800b126:	2b25      	cmp	r3, #37	; 0x25
 800b128:	d012      	beq.n	800b150 <__ssvfiscanf_r+0x9c>
 800b12a:	469a      	mov	sl, r3
 800b12c:	6863      	ldr	r3, [r4, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f340 8091 	ble.w	800b256 <__ssvfiscanf_r+0x1a2>
 800b134:	6822      	ldr	r2, [r4, #0]
 800b136:	7813      	ldrb	r3, [r2, #0]
 800b138:	4553      	cmp	r3, sl
 800b13a:	f040 812e 	bne.w	800b39a <__ssvfiscanf_r+0x2e6>
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	3b01      	subs	r3, #1
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b146:	3201      	adds	r2, #1
 800b148:	3301      	adds	r3, #1
 800b14a:	6022      	str	r2, [r4, #0]
 800b14c:	9345      	str	r3, [sp, #276]	; 0x114
 800b14e:	e7d8      	b.n	800b102 <__ssvfiscanf_r+0x4e>
 800b150:	9141      	str	r1, [sp, #260]	; 0x104
 800b152:	9143      	str	r1, [sp, #268]	; 0x10c
 800b154:	7853      	ldrb	r3, [r2, #1]
 800b156:	2b2a      	cmp	r3, #42	; 0x2a
 800b158:	bf02      	ittt	eq
 800b15a:	2310      	moveq	r3, #16
 800b15c:	1c95      	addeq	r5, r2, #2
 800b15e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b160:	220a      	movs	r2, #10
 800b162:	46aa      	mov	sl, r5
 800b164:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b168:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b16c:	2b09      	cmp	r3, #9
 800b16e:	d91c      	bls.n	800b1aa <__ssvfiscanf_r+0xf6>
 800b170:	487e      	ldr	r0, [pc, #504]	; (800b36c <__ssvfiscanf_r+0x2b8>)
 800b172:	2203      	movs	r2, #3
 800b174:	f7f5 f83c 	bl	80001f0 <memchr>
 800b178:	b138      	cbz	r0, 800b18a <__ssvfiscanf_r+0xd6>
 800b17a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b17c:	eba0 0009 	sub.w	r0, r0, r9
 800b180:	2301      	movs	r3, #1
 800b182:	4083      	lsls	r3, r0
 800b184:	4313      	orrs	r3, r2
 800b186:	9341      	str	r3, [sp, #260]	; 0x104
 800b188:	4655      	mov	r5, sl
 800b18a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b18e:	2b78      	cmp	r3, #120	; 0x78
 800b190:	d806      	bhi.n	800b1a0 <__ssvfiscanf_r+0xec>
 800b192:	2b57      	cmp	r3, #87	; 0x57
 800b194:	d810      	bhi.n	800b1b8 <__ssvfiscanf_r+0x104>
 800b196:	2b25      	cmp	r3, #37	; 0x25
 800b198:	d0c7      	beq.n	800b12a <__ssvfiscanf_r+0x76>
 800b19a:	d857      	bhi.n	800b24c <__ssvfiscanf_r+0x198>
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d065      	beq.n	800b26c <__ssvfiscanf_r+0x1b8>
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b1a4:	230a      	movs	r3, #10
 800b1a6:	9342      	str	r3, [sp, #264]	; 0x108
 800b1a8:	e076      	b.n	800b298 <__ssvfiscanf_r+0x1e4>
 800b1aa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b1ac:	fb02 1103 	mla	r1, r2, r3, r1
 800b1b0:	3930      	subs	r1, #48	; 0x30
 800b1b2:	9143      	str	r1, [sp, #268]	; 0x10c
 800b1b4:	4655      	mov	r5, sl
 800b1b6:	e7d4      	b.n	800b162 <__ssvfiscanf_r+0xae>
 800b1b8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b1bc:	2a20      	cmp	r2, #32
 800b1be:	d8ef      	bhi.n	800b1a0 <__ssvfiscanf_r+0xec>
 800b1c0:	a101      	add	r1, pc, #4	; (adr r1, 800b1c8 <__ssvfiscanf_r+0x114>)
 800b1c2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b27b 	.word	0x0800b27b
 800b1cc:	0800b1a1 	.word	0x0800b1a1
 800b1d0:	0800b1a1 	.word	0x0800b1a1
 800b1d4:	0800b2d9 	.word	0x0800b2d9
 800b1d8:	0800b1a1 	.word	0x0800b1a1
 800b1dc:	0800b1a1 	.word	0x0800b1a1
 800b1e0:	0800b1a1 	.word	0x0800b1a1
 800b1e4:	0800b1a1 	.word	0x0800b1a1
 800b1e8:	0800b1a1 	.word	0x0800b1a1
 800b1ec:	0800b1a1 	.word	0x0800b1a1
 800b1f0:	0800b1a1 	.word	0x0800b1a1
 800b1f4:	0800b2ef 	.word	0x0800b2ef
 800b1f8:	0800b2d5 	.word	0x0800b2d5
 800b1fc:	0800b253 	.word	0x0800b253
 800b200:	0800b253 	.word	0x0800b253
 800b204:	0800b253 	.word	0x0800b253
 800b208:	0800b1a1 	.word	0x0800b1a1
 800b20c:	0800b291 	.word	0x0800b291
 800b210:	0800b1a1 	.word	0x0800b1a1
 800b214:	0800b1a1 	.word	0x0800b1a1
 800b218:	0800b1a1 	.word	0x0800b1a1
 800b21c:	0800b1a1 	.word	0x0800b1a1
 800b220:	0800b2ff 	.word	0x0800b2ff
 800b224:	0800b2cd 	.word	0x0800b2cd
 800b228:	0800b273 	.word	0x0800b273
 800b22c:	0800b1a1 	.word	0x0800b1a1
 800b230:	0800b1a1 	.word	0x0800b1a1
 800b234:	0800b2fb 	.word	0x0800b2fb
 800b238:	0800b1a1 	.word	0x0800b1a1
 800b23c:	0800b2d5 	.word	0x0800b2d5
 800b240:	0800b1a1 	.word	0x0800b1a1
 800b244:	0800b1a1 	.word	0x0800b1a1
 800b248:	0800b27b 	.word	0x0800b27b
 800b24c:	3b45      	subs	r3, #69	; 0x45
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d8a6      	bhi.n	800b1a0 <__ssvfiscanf_r+0xec>
 800b252:	2305      	movs	r3, #5
 800b254:	e01f      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b256:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b258:	4621      	mov	r1, r4
 800b25a:	4630      	mov	r0, r6
 800b25c:	4798      	blx	r3
 800b25e:	2800      	cmp	r0, #0
 800b260:	f43f af68 	beq.w	800b134 <__ssvfiscanf_r+0x80>
 800b264:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b266:	2800      	cmp	r0, #0
 800b268:	f040 808d 	bne.w	800b386 <__ssvfiscanf_r+0x2d2>
 800b26c:	f04f 30ff 	mov.w	r0, #4294967295
 800b270:	e08f      	b.n	800b392 <__ssvfiscanf_r+0x2de>
 800b272:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b274:	f042 0220 	orr.w	r2, r2, #32
 800b278:	9241      	str	r2, [sp, #260]	; 0x104
 800b27a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b27c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b280:	9241      	str	r2, [sp, #260]	; 0x104
 800b282:	2210      	movs	r2, #16
 800b284:	2b6f      	cmp	r3, #111	; 0x6f
 800b286:	9242      	str	r2, [sp, #264]	; 0x108
 800b288:	bf34      	ite	cc
 800b28a:	2303      	movcc	r3, #3
 800b28c:	2304      	movcs	r3, #4
 800b28e:	e002      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b290:	2300      	movs	r3, #0
 800b292:	9342      	str	r3, [sp, #264]	; 0x108
 800b294:	2303      	movs	r3, #3
 800b296:	9347      	str	r3, [sp, #284]	; 0x11c
 800b298:	6863      	ldr	r3, [r4, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	dd3d      	ble.n	800b31a <__ssvfiscanf_r+0x266>
 800b29e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2a0:	0659      	lsls	r1, r3, #25
 800b2a2:	d404      	bmi.n	800b2ae <__ssvfiscanf_r+0x1fa>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	781a      	ldrb	r2, [r3, #0]
 800b2a8:	5cba      	ldrb	r2, [r7, r2]
 800b2aa:	0712      	lsls	r2, r2, #28
 800b2ac:	d43c      	bmi.n	800b328 <__ssvfiscanf_r+0x274>
 800b2ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	dc4b      	bgt.n	800b34c <__ssvfiscanf_r+0x298>
 800b2b4:	466b      	mov	r3, sp
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	a941      	add	r1, sp, #260	; 0x104
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f000 f872 	bl	800b3a4 <_scanf_chars>
 800b2c0:	2801      	cmp	r0, #1
 800b2c2:	d06a      	beq.n	800b39a <__ssvfiscanf_r+0x2e6>
 800b2c4:	2802      	cmp	r0, #2
 800b2c6:	f47f af1c 	bne.w	800b102 <__ssvfiscanf_r+0x4e>
 800b2ca:	e7cb      	b.n	800b264 <__ssvfiscanf_r+0x1b0>
 800b2cc:	2308      	movs	r3, #8
 800b2ce:	9342      	str	r3, [sp, #264]	; 0x108
 800b2d0:	2304      	movs	r3, #4
 800b2d2:	e7e0      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b2d4:	220a      	movs	r2, #10
 800b2d6:	e7d5      	b.n	800b284 <__ssvfiscanf_r+0x1d0>
 800b2d8:	4629      	mov	r1, r5
 800b2da:	4640      	mov	r0, r8
 800b2dc:	f000 fac0 	bl	800b860 <__sccl>
 800b2e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e6:	9341      	str	r3, [sp, #260]	; 0x104
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e7d3      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b2ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2f4:	9341      	str	r3, [sp, #260]	; 0x104
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	e7cd      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e7cb      	b.n	800b296 <__ssvfiscanf_r+0x1e2>
 800b2fe:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b300:	06c3      	lsls	r3, r0, #27
 800b302:	f53f aefe 	bmi.w	800b102 <__ssvfiscanf_r+0x4e>
 800b306:	9b00      	ldr	r3, [sp, #0]
 800b308:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b30a:	1d19      	adds	r1, r3, #4
 800b30c:	9100      	str	r1, [sp, #0]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	07c0      	lsls	r0, r0, #31
 800b312:	bf4c      	ite	mi
 800b314:	801a      	strhmi	r2, [r3, #0]
 800b316:	601a      	strpl	r2, [r3, #0]
 800b318:	e6f3      	b.n	800b102 <__ssvfiscanf_r+0x4e>
 800b31a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b31c:	4621      	mov	r1, r4
 800b31e:	4630      	mov	r0, r6
 800b320:	4798      	blx	r3
 800b322:	2800      	cmp	r0, #0
 800b324:	d0bb      	beq.n	800b29e <__ssvfiscanf_r+0x1ea>
 800b326:	e79d      	b.n	800b264 <__ssvfiscanf_r+0x1b0>
 800b328:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b32a:	3201      	adds	r2, #1
 800b32c:	9245      	str	r2, [sp, #276]	; 0x114
 800b32e:	6862      	ldr	r2, [r4, #4]
 800b330:	3a01      	subs	r2, #1
 800b332:	2a00      	cmp	r2, #0
 800b334:	6062      	str	r2, [r4, #4]
 800b336:	dd02      	ble.n	800b33e <__ssvfiscanf_r+0x28a>
 800b338:	3301      	adds	r3, #1
 800b33a:	6023      	str	r3, [r4, #0]
 800b33c:	e7b2      	b.n	800b2a4 <__ssvfiscanf_r+0x1f0>
 800b33e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b340:	4621      	mov	r1, r4
 800b342:	4630      	mov	r0, r6
 800b344:	4798      	blx	r3
 800b346:	2800      	cmp	r0, #0
 800b348:	d0ac      	beq.n	800b2a4 <__ssvfiscanf_r+0x1f0>
 800b34a:	e78b      	b.n	800b264 <__ssvfiscanf_r+0x1b0>
 800b34c:	2b04      	cmp	r3, #4
 800b34e:	dc0f      	bgt.n	800b370 <__ssvfiscanf_r+0x2bc>
 800b350:	466b      	mov	r3, sp
 800b352:	4622      	mov	r2, r4
 800b354:	a941      	add	r1, sp, #260	; 0x104
 800b356:	4630      	mov	r0, r6
 800b358:	f000 f87e 	bl	800b458 <_scanf_i>
 800b35c:	e7b0      	b.n	800b2c0 <__ssvfiscanf_r+0x20c>
 800b35e:	bf00      	nop
 800b360:	0800b001 	.word	0x0800b001
 800b364:	0800b07b 	.word	0x0800b07b
 800b368:	0800cb59 	.word	0x0800cb59
 800b36c:	0800cc5f 	.word	0x0800cc5f
 800b370:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <__ssvfiscanf_r+0x2ec>)
 800b372:	2b00      	cmp	r3, #0
 800b374:	f43f aec5 	beq.w	800b102 <__ssvfiscanf_r+0x4e>
 800b378:	466b      	mov	r3, sp
 800b37a:	4622      	mov	r2, r4
 800b37c:	a941      	add	r1, sp, #260	; 0x104
 800b37e:	4630      	mov	r0, r6
 800b380:	f7fb fec4 	bl	800710c <_scanf_float>
 800b384:	e79c      	b.n	800b2c0 <__ssvfiscanf_r+0x20c>
 800b386:	89a3      	ldrh	r3, [r4, #12]
 800b388:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b38c:	bf18      	it	ne
 800b38e:	f04f 30ff 	movne.w	r0, #4294967295
 800b392:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b39a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b39c:	e7f9      	b.n	800b392 <__ssvfiscanf_r+0x2de>
 800b39e:	bf00      	nop
 800b3a0:	0800710d 	.word	0x0800710d

0800b3a4 <_scanf_chars>:
 800b3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3a8:	4615      	mov	r5, r2
 800b3aa:	688a      	ldr	r2, [r1, #8]
 800b3ac:	4680      	mov	r8, r0
 800b3ae:	460c      	mov	r4, r1
 800b3b0:	b932      	cbnz	r2, 800b3c0 <_scanf_chars+0x1c>
 800b3b2:	698a      	ldr	r2, [r1, #24]
 800b3b4:	2a00      	cmp	r2, #0
 800b3b6:	bf0c      	ite	eq
 800b3b8:	2201      	moveq	r2, #1
 800b3ba:	f04f 32ff 	movne.w	r2, #4294967295
 800b3be:	608a      	str	r2, [r1, #8]
 800b3c0:	6822      	ldr	r2, [r4, #0]
 800b3c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b454 <_scanf_chars+0xb0>
 800b3c6:	06d1      	lsls	r1, r2, #27
 800b3c8:	bf5f      	itttt	pl
 800b3ca:	681a      	ldrpl	r2, [r3, #0]
 800b3cc:	1d11      	addpl	r1, r2, #4
 800b3ce:	6019      	strpl	r1, [r3, #0]
 800b3d0:	6816      	ldrpl	r6, [r2, #0]
 800b3d2:	2700      	movs	r7, #0
 800b3d4:	69a0      	ldr	r0, [r4, #24]
 800b3d6:	b188      	cbz	r0, 800b3fc <_scanf_chars+0x58>
 800b3d8:	2801      	cmp	r0, #1
 800b3da:	d107      	bne.n	800b3ec <_scanf_chars+0x48>
 800b3dc:	682a      	ldr	r2, [r5, #0]
 800b3de:	7811      	ldrb	r1, [r2, #0]
 800b3e0:	6962      	ldr	r2, [r4, #20]
 800b3e2:	5c52      	ldrb	r2, [r2, r1]
 800b3e4:	b952      	cbnz	r2, 800b3fc <_scanf_chars+0x58>
 800b3e6:	2f00      	cmp	r7, #0
 800b3e8:	d031      	beq.n	800b44e <_scanf_chars+0xaa>
 800b3ea:	e022      	b.n	800b432 <_scanf_chars+0x8e>
 800b3ec:	2802      	cmp	r0, #2
 800b3ee:	d120      	bne.n	800b432 <_scanf_chars+0x8e>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	781b      	ldrb	r3, [r3, #0]
 800b3f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b3f8:	071b      	lsls	r3, r3, #28
 800b3fa:	d41a      	bmi.n	800b432 <_scanf_chars+0x8e>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	06da      	lsls	r2, r3, #27
 800b400:	bf5e      	ittt	pl
 800b402:	682b      	ldrpl	r3, [r5, #0]
 800b404:	781b      	ldrbpl	r3, [r3, #0]
 800b406:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b40a:	682a      	ldr	r2, [r5, #0]
 800b40c:	686b      	ldr	r3, [r5, #4]
 800b40e:	3201      	adds	r2, #1
 800b410:	602a      	str	r2, [r5, #0]
 800b412:	68a2      	ldr	r2, [r4, #8]
 800b414:	3b01      	subs	r3, #1
 800b416:	3a01      	subs	r2, #1
 800b418:	606b      	str	r3, [r5, #4]
 800b41a:	3701      	adds	r7, #1
 800b41c:	60a2      	str	r2, [r4, #8]
 800b41e:	b142      	cbz	r2, 800b432 <_scanf_chars+0x8e>
 800b420:	2b00      	cmp	r3, #0
 800b422:	dcd7      	bgt.n	800b3d4 <_scanf_chars+0x30>
 800b424:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b428:	4629      	mov	r1, r5
 800b42a:	4640      	mov	r0, r8
 800b42c:	4798      	blx	r3
 800b42e:	2800      	cmp	r0, #0
 800b430:	d0d0      	beq.n	800b3d4 <_scanf_chars+0x30>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	f013 0310 	ands.w	r3, r3, #16
 800b438:	d105      	bne.n	800b446 <_scanf_chars+0xa2>
 800b43a:	68e2      	ldr	r2, [r4, #12]
 800b43c:	3201      	adds	r2, #1
 800b43e:	60e2      	str	r2, [r4, #12]
 800b440:	69a2      	ldr	r2, [r4, #24]
 800b442:	b102      	cbz	r2, 800b446 <_scanf_chars+0xa2>
 800b444:	7033      	strb	r3, [r6, #0]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	443b      	add	r3, r7
 800b44a:	6123      	str	r3, [r4, #16]
 800b44c:	2000      	movs	r0, #0
 800b44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b452:	bf00      	nop
 800b454:	0800cb59 	.word	0x0800cb59

0800b458 <_scanf_i>:
 800b458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b45c:	4698      	mov	r8, r3
 800b45e:	4b74      	ldr	r3, [pc, #464]	; (800b630 <_scanf_i+0x1d8>)
 800b460:	460c      	mov	r4, r1
 800b462:	4682      	mov	sl, r0
 800b464:	4616      	mov	r6, r2
 800b466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b46a:	b087      	sub	sp, #28
 800b46c:	ab03      	add	r3, sp, #12
 800b46e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b472:	4b70      	ldr	r3, [pc, #448]	; (800b634 <_scanf_i+0x1dc>)
 800b474:	69a1      	ldr	r1, [r4, #24]
 800b476:	4a70      	ldr	r2, [pc, #448]	; (800b638 <_scanf_i+0x1e0>)
 800b478:	2903      	cmp	r1, #3
 800b47a:	bf18      	it	ne
 800b47c:	461a      	movne	r2, r3
 800b47e:	68a3      	ldr	r3, [r4, #8]
 800b480:	9201      	str	r2, [sp, #4]
 800b482:	1e5a      	subs	r2, r3, #1
 800b484:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b488:	bf88      	it	hi
 800b48a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b48e:	4627      	mov	r7, r4
 800b490:	bf82      	ittt	hi
 800b492:	eb03 0905 	addhi.w	r9, r3, r5
 800b496:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b49a:	60a3      	strhi	r3, [r4, #8]
 800b49c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b4a0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b4a4:	bf98      	it	ls
 800b4a6:	f04f 0900 	movls.w	r9, #0
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	463d      	mov	r5, r7
 800b4ae:	f04f 0b00 	mov.w	fp, #0
 800b4b2:	6831      	ldr	r1, [r6, #0]
 800b4b4:	ab03      	add	r3, sp, #12
 800b4b6:	7809      	ldrb	r1, [r1, #0]
 800b4b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b4bc:	2202      	movs	r2, #2
 800b4be:	f7f4 fe97 	bl	80001f0 <memchr>
 800b4c2:	b328      	cbz	r0, 800b510 <_scanf_i+0xb8>
 800b4c4:	f1bb 0f01 	cmp.w	fp, #1
 800b4c8:	d159      	bne.n	800b57e <_scanf_i+0x126>
 800b4ca:	6862      	ldr	r2, [r4, #4]
 800b4cc:	b92a      	cbnz	r2, 800b4da <_scanf_i+0x82>
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	2308      	movs	r3, #8
 800b4d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b4d6:	6063      	str	r3, [r4, #4]
 800b4d8:	6022      	str	r2, [r4, #0]
 800b4da:	6822      	ldr	r2, [r4, #0]
 800b4dc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b4e0:	6022      	str	r2, [r4, #0]
 800b4e2:	68a2      	ldr	r2, [r4, #8]
 800b4e4:	1e51      	subs	r1, r2, #1
 800b4e6:	60a1      	str	r1, [r4, #8]
 800b4e8:	b192      	cbz	r2, 800b510 <_scanf_i+0xb8>
 800b4ea:	6832      	ldr	r2, [r6, #0]
 800b4ec:	1c51      	adds	r1, r2, #1
 800b4ee:	6031      	str	r1, [r6, #0]
 800b4f0:	7812      	ldrb	r2, [r2, #0]
 800b4f2:	f805 2b01 	strb.w	r2, [r5], #1
 800b4f6:	6872      	ldr	r2, [r6, #4]
 800b4f8:	3a01      	subs	r2, #1
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	6072      	str	r2, [r6, #4]
 800b4fe:	dc07      	bgt.n	800b510 <_scanf_i+0xb8>
 800b500:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b504:	4631      	mov	r1, r6
 800b506:	4650      	mov	r0, sl
 800b508:	4790      	blx	r2
 800b50a:	2800      	cmp	r0, #0
 800b50c:	f040 8085 	bne.w	800b61a <_scanf_i+0x1c2>
 800b510:	f10b 0b01 	add.w	fp, fp, #1
 800b514:	f1bb 0f03 	cmp.w	fp, #3
 800b518:	d1cb      	bne.n	800b4b2 <_scanf_i+0x5a>
 800b51a:	6863      	ldr	r3, [r4, #4]
 800b51c:	b90b      	cbnz	r3, 800b522 <_scanf_i+0xca>
 800b51e:	230a      	movs	r3, #10
 800b520:	6063      	str	r3, [r4, #4]
 800b522:	6863      	ldr	r3, [r4, #4]
 800b524:	4945      	ldr	r1, [pc, #276]	; (800b63c <_scanf_i+0x1e4>)
 800b526:	6960      	ldr	r0, [r4, #20]
 800b528:	1ac9      	subs	r1, r1, r3
 800b52a:	f000 f999 	bl	800b860 <__sccl>
 800b52e:	f04f 0b00 	mov.w	fp, #0
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	6822      	ldr	r2, [r4, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d03d      	beq.n	800b5b6 <_scanf_i+0x15e>
 800b53a:	6831      	ldr	r1, [r6, #0]
 800b53c:	6960      	ldr	r0, [r4, #20]
 800b53e:	f891 c000 	ldrb.w	ip, [r1]
 800b542:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b546:	2800      	cmp	r0, #0
 800b548:	d035      	beq.n	800b5b6 <_scanf_i+0x15e>
 800b54a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b54e:	d124      	bne.n	800b59a <_scanf_i+0x142>
 800b550:	0510      	lsls	r0, r2, #20
 800b552:	d522      	bpl.n	800b59a <_scanf_i+0x142>
 800b554:	f10b 0b01 	add.w	fp, fp, #1
 800b558:	f1b9 0f00 	cmp.w	r9, #0
 800b55c:	d003      	beq.n	800b566 <_scanf_i+0x10e>
 800b55e:	3301      	adds	r3, #1
 800b560:	f109 39ff 	add.w	r9, r9, #4294967295
 800b564:	60a3      	str	r3, [r4, #8]
 800b566:	6873      	ldr	r3, [r6, #4]
 800b568:	3b01      	subs	r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	6073      	str	r3, [r6, #4]
 800b56e:	dd1b      	ble.n	800b5a8 <_scanf_i+0x150>
 800b570:	6833      	ldr	r3, [r6, #0]
 800b572:	3301      	adds	r3, #1
 800b574:	6033      	str	r3, [r6, #0]
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	3b01      	subs	r3, #1
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	e7d9      	b.n	800b532 <_scanf_i+0xda>
 800b57e:	f1bb 0f02 	cmp.w	fp, #2
 800b582:	d1ae      	bne.n	800b4e2 <_scanf_i+0x8a>
 800b584:	6822      	ldr	r2, [r4, #0]
 800b586:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b58a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b58e:	d1bf      	bne.n	800b510 <_scanf_i+0xb8>
 800b590:	2310      	movs	r3, #16
 800b592:	6063      	str	r3, [r4, #4]
 800b594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b598:	e7a2      	b.n	800b4e0 <_scanf_i+0x88>
 800b59a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b59e:	6022      	str	r2, [r4, #0]
 800b5a0:	780b      	ldrb	r3, [r1, #0]
 800b5a2:	f805 3b01 	strb.w	r3, [r5], #1
 800b5a6:	e7de      	b.n	800b566 <_scanf_i+0x10e>
 800b5a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b5ac:	4631      	mov	r1, r6
 800b5ae:	4650      	mov	r0, sl
 800b5b0:	4798      	blx	r3
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d0df      	beq.n	800b576 <_scanf_i+0x11e>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	05d9      	lsls	r1, r3, #23
 800b5ba:	d50d      	bpl.n	800b5d8 <_scanf_i+0x180>
 800b5bc:	42bd      	cmp	r5, r7
 800b5be:	d909      	bls.n	800b5d4 <_scanf_i+0x17c>
 800b5c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b5c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b5c8:	4632      	mov	r2, r6
 800b5ca:	4650      	mov	r0, sl
 800b5cc:	4798      	blx	r3
 800b5ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800b5d2:	464d      	mov	r5, r9
 800b5d4:	42bd      	cmp	r5, r7
 800b5d6:	d028      	beq.n	800b62a <_scanf_i+0x1d2>
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	f012 0210 	ands.w	r2, r2, #16
 800b5de:	d113      	bne.n	800b608 <_scanf_i+0x1b0>
 800b5e0:	702a      	strb	r2, [r5, #0]
 800b5e2:	6863      	ldr	r3, [r4, #4]
 800b5e4:	9e01      	ldr	r6, [sp, #4]
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	4650      	mov	r0, sl
 800b5ea:	47b0      	blx	r6
 800b5ec:	f8d8 3000 	ldr.w	r3, [r8]
 800b5f0:	6821      	ldr	r1, [r4, #0]
 800b5f2:	1d1a      	adds	r2, r3, #4
 800b5f4:	f8c8 2000 	str.w	r2, [r8]
 800b5f8:	f011 0f20 	tst.w	r1, #32
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	d00f      	beq.n	800b620 <_scanf_i+0x1c8>
 800b600:	6018      	str	r0, [r3, #0]
 800b602:	68e3      	ldr	r3, [r4, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60e3      	str	r3, [r4, #12]
 800b608:	6923      	ldr	r3, [r4, #16]
 800b60a:	1bed      	subs	r5, r5, r7
 800b60c:	445d      	add	r5, fp
 800b60e:	442b      	add	r3, r5
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	2000      	movs	r0, #0
 800b614:	b007      	add	sp, #28
 800b616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61a:	f04f 0b00 	mov.w	fp, #0
 800b61e:	e7ca      	b.n	800b5b6 <_scanf_i+0x15e>
 800b620:	07ca      	lsls	r2, r1, #31
 800b622:	bf4c      	ite	mi
 800b624:	8018      	strhmi	r0, [r3, #0]
 800b626:	6018      	strpl	r0, [r3, #0]
 800b628:	e7eb      	b.n	800b602 <_scanf_i+0x1aa>
 800b62a:	2001      	movs	r0, #1
 800b62c:	e7f2      	b.n	800b614 <_scanf_i+0x1bc>
 800b62e:	bf00      	nop
 800b630:	0800c7dc 	.word	0x0800c7dc
 800b634:	0800ad39 	.word	0x0800ad39
 800b638:	0800ac51 	.word	0x0800ac51
 800b63c:	0800cc7a 	.word	0x0800cc7a

0800b640 <__sflush_r>:
 800b640:	898a      	ldrh	r2, [r1, #12]
 800b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	4605      	mov	r5, r0
 800b648:	0710      	lsls	r0, r2, #28
 800b64a:	460c      	mov	r4, r1
 800b64c:	d458      	bmi.n	800b700 <__sflush_r+0xc0>
 800b64e:	684b      	ldr	r3, [r1, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	dc05      	bgt.n	800b660 <__sflush_r+0x20>
 800b654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b656:	2b00      	cmp	r3, #0
 800b658:	dc02      	bgt.n	800b660 <__sflush_r+0x20>
 800b65a:	2000      	movs	r0, #0
 800b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b662:	2e00      	cmp	r6, #0
 800b664:	d0f9      	beq.n	800b65a <__sflush_r+0x1a>
 800b666:	2300      	movs	r3, #0
 800b668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b66c:	682f      	ldr	r7, [r5, #0]
 800b66e:	6a21      	ldr	r1, [r4, #32]
 800b670:	602b      	str	r3, [r5, #0]
 800b672:	d032      	beq.n	800b6da <__sflush_r+0x9a>
 800b674:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b676:	89a3      	ldrh	r3, [r4, #12]
 800b678:	075a      	lsls	r2, r3, #29
 800b67a:	d505      	bpl.n	800b688 <__sflush_r+0x48>
 800b67c:	6863      	ldr	r3, [r4, #4]
 800b67e:	1ac0      	subs	r0, r0, r3
 800b680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b682:	b10b      	cbz	r3, 800b688 <__sflush_r+0x48>
 800b684:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b686:	1ac0      	subs	r0, r0, r3
 800b688:	2300      	movs	r3, #0
 800b68a:	4602      	mov	r2, r0
 800b68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b68e:	6a21      	ldr	r1, [r4, #32]
 800b690:	4628      	mov	r0, r5
 800b692:	47b0      	blx	r6
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	d106      	bne.n	800b6a8 <__sflush_r+0x68>
 800b69a:	6829      	ldr	r1, [r5, #0]
 800b69c:	291d      	cmp	r1, #29
 800b69e:	d82b      	bhi.n	800b6f8 <__sflush_r+0xb8>
 800b6a0:	4a29      	ldr	r2, [pc, #164]	; (800b748 <__sflush_r+0x108>)
 800b6a2:	410a      	asrs	r2, r1
 800b6a4:	07d6      	lsls	r6, r2, #31
 800b6a6:	d427      	bmi.n	800b6f8 <__sflush_r+0xb8>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	6062      	str	r2, [r4, #4]
 800b6ac:	04d9      	lsls	r1, r3, #19
 800b6ae:	6922      	ldr	r2, [r4, #16]
 800b6b0:	6022      	str	r2, [r4, #0]
 800b6b2:	d504      	bpl.n	800b6be <__sflush_r+0x7e>
 800b6b4:	1c42      	adds	r2, r0, #1
 800b6b6:	d101      	bne.n	800b6bc <__sflush_r+0x7c>
 800b6b8:	682b      	ldr	r3, [r5, #0]
 800b6ba:	b903      	cbnz	r3, 800b6be <__sflush_r+0x7e>
 800b6bc:	6560      	str	r0, [r4, #84]	; 0x54
 800b6be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6c0:	602f      	str	r7, [r5, #0]
 800b6c2:	2900      	cmp	r1, #0
 800b6c4:	d0c9      	beq.n	800b65a <__sflush_r+0x1a>
 800b6c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	d002      	beq.n	800b6d4 <__sflush_r+0x94>
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	f7fd fe30 	bl	8009334 <_free_r>
 800b6d4:	2000      	movs	r0, #0
 800b6d6:	6360      	str	r0, [r4, #52]	; 0x34
 800b6d8:	e7c0      	b.n	800b65c <__sflush_r+0x1c>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b0      	blx	r6
 800b6e0:	1c41      	adds	r1, r0, #1
 800b6e2:	d1c8      	bne.n	800b676 <__sflush_r+0x36>
 800b6e4:	682b      	ldr	r3, [r5, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d0c5      	beq.n	800b676 <__sflush_r+0x36>
 800b6ea:	2b1d      	cmp	r3, #29
 800b6ec:	d001      	beq.n	800b6f2 <__sflush_r+0xb2>
 800b6ee:	2b16      	cmp	r3, #22
 800b6f0:	d101      	bne.n	800b6f6 <__sflush_r+0xb6>
 800b6f2:	602f      	str	r7, [r5, #0]
 800b6f4:	e7b1      	b.n	800b65a <__sflush_r+0x1a>
 800b6f6:	89a3      	ldrh	r3, [r4, #12]
 800b6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6fc:	81a3      	strh	r3, [r4, #12]
 800b6fe:	e7ad      	b.n	800b65c <__sflush_r+0x1c>
 800b700:	690f      	ldr	r7, [r1, #16]
 800b702:	2f00      	cmp	r7, #0
 800b704:	d0a9      	beq.n	800b65a <__sflush_r+0x1a>
 800b706:	0793      	lsls	r3, r2, #30
 800b708:	680e      	ldr	r6, [r1, #0]
 800b70a:	bf08      	it	eq
 800b70c:	694b      	ldreq	r3, [r1, #20]
 800b70e:	600f      	str	r7, [r1, #0]
 800b710:	bf18      	it	ne
 800b712:	2300      	movne	r3, #0
 800b714:	eba6 0807 	sub.w	r8, r6, r7
 800b718:	608b      	str	r3, [r1, #8]
 800b71a:	f1b8 0f00 	cmp.w	r8, #0
 800b71e:	dd9c      	ble.n	800b65a <__sflush_r+0x1a>
 800b720:	6a21      	ldr	r1, [r4, #32]
 800b722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b724:	4643      	mov	r3, r8
 800b726:	463a      	mov	r2, r7
 800b728:	4628      	mov	r0, r5
 800b72a:	47b0      	blx	r6
 800b72c:	2800      	cmp	r0, #0
 800b72e:	dc06      	bgt.n	800b73e <__sflush_r+0xfe>
 800b730:	89a3      	ldrh	r3, [r4, #12]
 800b732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b736:	81a3      	strh	r3, [r4, #12]
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	e78e      	b.n	800b65c <__sflush_r+0x1c>
 800b73e:	4407      	add	r7, r0
 800b740:	eba8 0800 	sub.w	r8, r8, r0
 800b744:	e7e9      	b.n	800b71a <__sflush_r+0xda>
 800b746:	bf00      	nop
 800b748:	dfbffffe 	.word	0xdfbffffe

0800b74c <_fflush_r>:
 800b74c:	b538      	push	{r3, r4, r5, lr}
 800b74e:	690b      	ldr	r3, [r1, #16]
 800b750:	4605      	mov	r5, r0
 800b752:	460c      	mov	r4, r1
 800b754:	b913      	cbnz	r3, 800b75c <_fflush_r+0x10>
 800b756:	2500      	movs	r5, #0
 800b758:	4628      	mov	r0, r5
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	b118      	cbz	r0, 800b766 <_fflush_r+0x1a>
 800b75e:	6a03      	ldr	r3, [r0, #32]
 800b760:	b90b      	cbnz	r3, 800b766 <_fflush_r+0x1a>
 800b762:	f7fb ff5d 	bl	8007620 <__sinit>
 800b766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d0f3      	beq.n	800b756 <_fflush_r+0xa>
 800b76e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b770:	07d0      	lsls	r0, r2, #31
 800b772:	d404      	bmi.n	800b77e <_fflush_r+0x32>
 800b774:	0599      	lsls	r1, r3, #22
 800b776:	d402      	bmi.n	800b77e <_fflush_r+0x32>
 800b778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b77a:	f7fc ff2e 	bl	80085da <__retarget_lock_acquire_recursive>
 800b77e:	4628      	mov	r0, r5
 800b780:	4621      	mov	r1, r4
 800b782:	f7ff ff5d 	bl	800b640 <__sflush_r>
 800b786:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b788:	07da      	lsls	r2, r3, #31
 800b78a:	4605      	mov	r5, r0
 800b78c:	d4e4      	bmi.n	800b758 <_fflush_r+0xc>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	059b      	lsls	r3, r3, #22
 800b792:	d4e1      	bmi.n	800b758 <_fflush_r+0xc>
 800b794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b796:	f7fc ff22 	bl	80085de <__retarget_lock_release_recursive>
 800b79a:	e7dd      	b.n	800b758 <_fflush_r+0xc>

0800b79c <__swhatbuf_r>:
 800b79c:	b570      	push	{r4, r5, r6, lr}
 800b79e:	460c      	mov	r4, r1
 800b7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	b096      	sub	sp, #88	; 0x58
 800b7a8:	4615      	mov	r5, r2
 800b7aa:	461e      	mov	r6, r3
 800b7ac:	da0d      	bge.n	800b7ca <__swhatbuf_r+0x2e>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b7b4:	f04f 0100 	mov.w	r1, #0
 800b7b8:	bf0c      	ite	eq
 800b7ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b7be:	2340      	movne	r3, #64	; 0x40
 800b7c0:	2000      	movs	r0, #0
 800b7c2:	6031      	str	r1, [r6, #0]
 800b7c4:	602b      	str	r3, [r5, #0]
 800b7c6:	b016      	add	sp, #88	; 0x58
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	466a      	mov	r2, sp
 800b7cc:	f000 f8ec 	bl	800b9a8 <_fstat_r>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	dbec      	blt.n	800b7ae <__swhatbuf_r+0x12>
 800b7d4:	9901      	ldr	r1, [sp, #4]
 800b7d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b7da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b7de:	4259      	negs	r1, r3
 800b7e0:	4159      	adcs	r1, r3
 800b7e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7e6:	e7eb      	b.n	800b7c0 <__swhatbuf_r+0x24>

0800b7e8 <__smakebuf_r>:
 800b7e8:	898b      	ldrh	r3, [r1, #12]
 800b7ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7ec:	079d      	lsls	r5, r3, #30
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	d507      	bpl.n	800b804 <__smakebuf_r+0x1c>
 800b7f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	6123      	str	r3, [r4, #16]
 800b7fc:	2301      	movs	r3, #1
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	b002      	add	sp, #8
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	ab01      	add	r3, sp, #4
 800b806:	466a      	mov	r2, sp
 800b808:	f7ff ffc8 	bl	800b79c <__swhatbuf_r>
 800b80c:	9900      	ldr	r1, [sp, #0]
 800b80e:	4605      	mov	r5, r0
 800b810:	4630      	mov	r0, r6
 800b812:	f7fd fe4f 	bl	80094b4 <_malloc_r>
 800b816:	b948      	cbnz	r0, 800b82c <__smakebuf_r+0x44>
 800b818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81c:	059a      	lsls	r2, r3, #22
 800b81e:	d4ef      	bmi.n	800b800 <__smakebuf_r+0x18>
 800b820:	f023 0303 	bic.w	r3, r3, #3
 800b824:	f043 0302 	orr.w	r3, r3, #2
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	e7e3      	b.n	800b7f4 <__smakebuf_r+0xc>
 800b82c:	89a3      	ldrh	r3, [r4, #12]
 800b82e:	6020      	str	r0, [r4, #0]
 800b830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b834:	81a3      	strh	r3, [r4, #12]
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	6163      	str	r3, [r4, #20]
 800b83a:	9b01      	ldr	r3, [sp, #4]
 800b83c:	6120      	str	r0, [r4, #16]
 800b83e:	b15b      	cbz	r3, 800b858 <__smakebuf_r+0x70>
 800b840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b844:	4630      	mov	r0, r6
 800b846:	f000 f8c1 	bl	800b9cc <_isatty_r>
 800b84a:	b128      	cbz	r0, 800b858 <__smakebuf_r+0x70>
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	f023 0303 	bic.w	r3, r3, #3
 800b852:	f043 0301 	orr.w	r3, r3, #1
 800b856:	81a3      	strh	r3, [r4, #12]
 800b858:	89a3      	ldrh	r3, [r4, #12]
 800b85a:	431d      	orrs	r5, r3
 800b85c:	81a5      	strh	r5, [r4, #12]
 800b85e:	e7cf      	b.n	800b800 <__smakebuf_r+0x18>

0800b860 <__sccl>:
 800b860:	b570      	push	{r4, r5, r6, lr}
 800b862:	780b      	ldrb	r3, [r1, #0]
 800b864:	4604      	mov	r4, r0
 800b866:	2b5e      	cmp	r3, #94	; 0x5e
 800b868:	bf0b      	itete	eq
 800b86a:	784b      	ldrbeq	r3, [r1, #1]
 800b86c:	1c4a      	addne	r2, r1, #1
 800b86e:	1c8a      	addeq	r2, r1, #2
 800b870:	2100      	movne	r1, #0
 800b872:	bf08      	it	eq
 800b874:	2101      	moveq	r1, #1
 800b876:	3801      	subs	r0, #1
 800b878:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b87c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b880:	42a8      	cmp	r0, r5
 800b882:	d1fb      	bne.n	800b87c <__sccl+0x1c>
 800b884:	b90b      	cbnz	r3, 800b88a <__sccl+0x2a>
 800b886:	1e50      	subs	r0, r2, #1
 800b888:	bd70      	pop	{r4, r5, r6, pc}
 800b88a:	f081 0101 	eor.w	r1, r1, #1
 800b88e:	54e1      	strb	r1, [r4, r3]
 800b890:	4610      	mov	r0, r2
 800b892:	4602      	mov	r2, r0
 800b894:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b898:	2d2d      	cmp	r5, #45	; 0x2d
 800b89a:	d005      	beq.n	800b8a8 <__sccl+0x48>
 800b89c:	2d5d      	cmp	r5, #93	; 0x5d
 800b89e:	d016      	beq.n	800b8ce <__sccl+0x6e>
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	d0f1      	beq.n	800b888 <__sccl+0x28>
 800b8a4:	462b      	mov	r3, r5
 800b8a6:	e7f2      	b.n	800b88e <__sccl+0x2e>
 800b8a8:	7846      	ldrb	r6, [r0, #1]
 800b8aa:	2e5d      	cmp	r6, #93	; 0x5d
 800b8ac:	d0fa      	beq.n	800b8a4 <__sccl+0x44>
 800b8ae:	42b3      	cmp	r3, r6
 800b8b0:	dcf8      	bgt.n	800b8a4 <__sccl+0x44>
 800b8b2:	3002      	adds	r0, #2
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	3201      	adds	r2, #1
 800b8b8:	4296      	cmp	r6, r2
 800b8ba:	54a1      	strb	r1, [r4, r2]
 800b8bc:	dcfb      	bgt.n	800b8b6 <__sccl+0x56>
 800b8be:	1af2      	subs	r2, r6, r3
 800b8c0:	3a01      	subs	r2, #1
 800b8c2:	1c5d      	adds	r5, r3, #1
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	bfa8      	it	ge
 800b8c8:	2200      	movge	r2, #0
 800b8ca:	18ab      	adds	r3, r5, r2
 800b8cc:	e7e1      	b.n	800b892 <__sccl+0x32>
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	e7da      	b.n	800b888 <__sccl+0x28>

0800b8d2 <__submore>:
 800b8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b8da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8de:	4299      	cmp	r1, r3
 800b8e0:	d11d      	bne.n	800b91e <__submore+0x4c>
 800b8e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b8e6:	f7fd fde5 	bl	80094b4 <_malloc_r>
 800b8ea:	b918      	cbnz	r0, 800b8f4 <__submore+0x22>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800b8fa:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800b8fe:	6360      	str	r0, [r4, #52]	; 0x34
 800b900:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800b904:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800b908:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800b90c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800b910:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800b914:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800b918:	6020      	str	r0, [r4, #0]
 800b91a:	2000      	movs	r0, #0
 800b91c:	e7e8      	b.n	800b8f0 <__submore+0x1e>
 800b91e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800b920:	0077      	lsls	r7, r6, #1
 800b922:	463a      	mov	r2, r7
 800b924:	f000 fc25 	bl	800c172 <_realloc_r>
 800b928:	4605      	mov	r5, r0
 800b92a:	2800      	cmp	r0, #0
 800b92c:	d0de      	beq.n	800b8ec <__submore+0x1a>
 800b92e:	eb00 0806 	add.w	r8, r0, r6
 800b932:	4601      	mov	r1, r0
 800b934:	4632      	mov	r2, r6
 800b936:	4640      	mov	r0, r8
 800b938:	f7fc fe5a 	bl	80085f0 <memcpy>
 800b93c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800b940:	f8c4 8000 	str.w	r8, [r4]
 800b944:	e7e9      	b.n	800b91a <__submore+0x48>

0800b946 <memmove>:
 800b946:	4288      	cmp	r0, r1
 800b948:	b510      	push	{r4, lr}
 800b94a:	eb01 0402 	add.w	r4, r1, r2
 800b94e:	d902      	bls.n	800b956 <memmove+0x10>
 800b950:	4284      	cmp	r4, r0
 800b952:	4623      	mov	r3, r4
 800b954:	d807      	bhi.n	800b966 <memmove+0x20>
 800b956:	1e43      	subs	r3, r0, #1
 800b958:	42a1      	cmp	r1, r4
 800b95a:	d008      	beq.n	800b96e <memmove+0x28>
 800b95c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b960:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b964:	e7f8      	b.n	800b958 <memmove+0x12>
 800b966:	4402      	add	r2, r0
 800b968:	4601      	mov	r1, r0
 800b96a:	428a      	cmp	r2, r1
 800b96c:	d100      	bne.n	800b970 <memmove+0x2a>
 800b96e:	bd10      	pop	{r4, pc}
 800b970:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b974:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b978:	e7f7      	b.n	800b96a <memmove+0x24>

0800b97a <strncmp>:
 800b97a:	b510      	push	{r4, lr}
 800b97c:	b16a      	cbz	r2, 800b99a <strncmp+0x20>
 800b97e:	3901      	subs	r1, #1
 800b980:	1884      	adds	r4, r0, r2
 800b982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b986:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d103      	bne.n	800b996 <strncmp+0x1c>
 800b98e:	42a0      	cmp	r0, r4
 800b990:	d001      	beq.n	800b996 <strncmp+0x1c>
 800b992:	2a00      	cmp	r2, #0
 800b994:	d1f5      	bne.n	800b982 <strncmp+0x8>
 800b996:	1ad0      	subs	r0, r2, r3
 800b998:	bd10      	pop	{r4, pc}
 800b99a:	4610      	mov	r0, r2
 800b99c:	e7fc      	b.n	800b998 <strncmp+0x1e>
	...

0800b9a0 <__gettzinfo>:
 800b9a0:	4800      	ldr	r0, [pc, #0]	; (800b9a4 <__gettzinfo+0x4>)
 800b9a2:	4770      	bx	lr
 800b9a4:	20000078 	.word	0x20000078

0800b9a8 <_fstat_r>:
 800b9a8:	b538      	push	{r3, r4, r5, lr}
 800b9aa:	4d07      	ldr	r5, [pc, #28]	; (800b9c8 <_fstat_r+0x20>)
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	4608      	mov	r0, r1
 800b9b2:	4611      	mov	r1, r2
 800b9b4:	602b      	str	r3, [r5, #0]
 800b9b6:	f7f6 feb4 	bl	8002722 <_fstat>
 800b9ba:	1c43      	adds	r3, r0, #1
 800b9bc:	d102      	bne.n	800b9c4 <_fstat_r+0x1c>
 800b9be:	682b      	ldr	r3, [r5, #0]
 800b9c0:	b103      	cbz	r3, 800b9c4 <_fstat_r+0x1c>
 800b9c2:	6023      	str	r3, [r4, #0]
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	bf00      	nop
 800b9c8:	20000a00 	.word	0x20000a00

0800b9cc <_isatty_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d06      	ldr	r5, [pc, #24]	; (800b9e8 <_isatty_r+0x1c>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	602b      	str	r3, [r5, #0]
 800b9d8:	f7f6 feb3 	bl	8002742 <_isatty>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d102      	bne.n	800b9e6 <_isatty_r+0x1a>
 800b9e0:	682b      	ldr	r3, [r5, #0]
 800b9e2:	b103      	cbz	r3, 800b9e6 <_isatty_r+0x1a>
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	bd38      	pop	{r3, r4, r5, pc}
 800b9e8:	20000a00 	.word	0x20000a00

0800b9ec <_sbrk_r>:
 800b9ec:	b538      	push	{r3, r4, r5, lr}
 800b9ee:	4d06      	ldr	r5, [pc, #24]	; (800ba08 <_sbrk_r+0x1c>)
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	4604      	mov	r4, r0
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	602b      	str	r3, [r5, #0]
 800b9f8:	f7f6 febc 	bl	8002774 <_sbrk>
 800b9fc:	1c43      	adds	r3, r0, #1
 800b9fe:	d102      	bne.n	800ba06 <_sbrk_r+0x1a>
 800ba00:	682b      	ldr	r3, [r5, #0]
 800ba02:	b103      	cbz	r3, 800ba06 <_sbrk_r+0x1a>
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	20000a00 	.word	0x20000a00
 800ba0c:	00000000 	.word	0x00000000

0800ba10 <nan>:
 800ba10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba18 <nan+0x8>
 800ba14:	4770      	bx	lr
 800ba16:	bf00      	nop
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	7ff80000 	.word	0x7ff80000

0800ba20 <__assert_func>:
 800ba20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba22:	4614      	mov	r4, r2
 800ba24:	461a      	mov	r2, r3
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <__assert_func+0x2c>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4605      	mov	r5, r0
 800ba2c:	68d8      	ldr	r0, [r3, #12]
 800ba2e:	b14c      	cbz	r4, 800ba44 <__assert_func+0x24>
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <__assert_func+0x30>)
 800ba32:	9100      	str	r1, [sp, #0]
 800ba34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba38:	4906      	ldr	r1, [pc, #24]	; (800ba54 <__assert_func+0x34>)
 800ba3a:	462b      	mov	r3, r5
 800ba3c:	f000 fbd6 	bl	800c1ec <fiprintf>
 800ba40:	f000 fbe6 	bl	800c210 <abort>
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <__assert_func+0x38>)
 800ba46:	461c      	mov	r4, r3
 800ba48:	e7f3      	b.n	800ba32 <__assert_func+0x12>
 800ba4a:	bf00      	nop
 800ba4c:	20000074 	.word	0x20000074
 800ba50:	0800ccf0 	.word	0x0800ccf0
 800ba54:	0800ccfd 	.word	0x0800ccfd
 800ba58:	0800cd2b 	.word	0x0800cd2b

0800ba5c <_calloc_r>:
 800ba5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ba62:	b94c      	cbnz	r4, 800ba78 <_calloc_r+0x1c>
 800ba64:	4611      	mov	r1, r2
 800ba66:	9201      	str	r2, [sp, #4]
 800ba68:	f7fd fd24 	bl	80094b4 <_malloc_r>
 800ba6c:	9a01      	ldr	r2, [sp, #4]
 800ba6e:	4605      	mov	r5, r0
 800ba70:	b930      	cbnz	r0, 800ba80 <_calloc_r+0x24>
 800ba72:	4628      	mov	r0, r5
 800ba74:	b003      	add	sp, #12
 800ba76:	bd30      	pop	{r4, r5, pc}
 800ba78:	220c      	movs	r2, #12
 800ba7a:	6002      	str	r2, [r0, #0]
 800ba7c:	2500      	movs	r5, #0
 800ba7e:	e7f8      	b.n	800ba72 <_calloc_r+0x16>
 800ba80:	4621      	mov	r1, r4
 800ba82:	f7fb ffb9 	bl	80079f8 <memset>
 800ba86:	e7f4      	b.n	800ba72 <_calloc_r+0x16>

0800ba88 <__env_lock>:
 800ba88:	4801      	ldr	r0, [pc, #4]	; (800ba90 <__env_lock+0x8>)
 800ba8a:	f7fc bda6 	b.w	80085da <__retarget_lock_acquire_recursive>
 800ba8e:	bf00      	nop
 800ba90:	20000a04 	.word	0x20000a04

0800ba94 <__env_unlock>:
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <__env_unlock+0x8>)
 800ba96:	f7fc bda2 	b.w	80085de <__retarget_lock_release_recursive>
 800ba9a:	bf00      	nop
 800ba9c:	20000a04 	.word	0x20000a04

0800baa0 <rshift>:
 800baa0:	6903      	ldr	r3, [r0, #16]
 800baa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800baa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baaa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800baae:	f100 0414 	add.w	r4, r0, #20
 800bab2:	dd45      	ble.n	800bb40 <rshift+0xa0>
 800bab4:	f011 011f 	ands.w	r1, r1, #31
 800bab8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800babc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bac0:	d10c      	bne.n	800badc <rshift+0x3c>
 800bac2:	f100 0710 	add.w	r7, r0, #16
 800bac6:	4629      	mov	r1, r5
 800bac8:	42b1      	cmp	r1, r6
 800baca:	d334      	bcc.n	800bb36 <rshift+0x96>
 800bacc:	1a9b      	subs	r3, r3, r2
 800bace:	009b      	lsls	r3, r3, #2
 800bad0:	1eea      	subs	r2, r5, #3
 800bad2:	4296      	cmp	r6, r2
 800bad4:	bf38      	it	cc
 800bad6:	2300      	movcc	r3, #0
 800bad8:	4423      	add	r3, r4
 800bada:	e015      	b.n	800bb08 <rshift+0x68>
 800badc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bae0:	f1c1 0820 	rsb	r8, r1, #32
 800bae4:	40cf      	lsrs	r7, r1
 800bae6:	f105 0e04 	add.w	lr, r5, #4
 800baea:	46a1      	mov	r9, r4
 800baec:	4576      	cmp	r6, lr
 800baee:	46f4      	mov	ip, lr
 800baf0:	d815      	bhi.n	800bb1e <rshift+0x7e>
 800baf2:	1a9a      	subs	r2, r3, r2
 800baf4:	0092      	lsls	r2, r2, #2
 800baf6:	3a04      	subs	r2, #4
 800baf8:	3501      	adds	r5, #1
 800bafa:	42ae      	cmp	r6, r5
 800bafc:	bf38      	it	cc
 800bafe:	2200      	movcc	r2, #0
 800bb00:	18a3      	adds	r3, r4, r2
 800bb02:	50a7      	str	r7, [r4, r2]
 800bb04:	b107      	cbz	r7, 800bb08 <rshift+0x68>
 800bb06:	3304      	adds	r3, #4
 800bb08:	1b1a      	subs	r2, r3, r4
 800bb0a:	42a3      	cmp	r3, r4
 800bb0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb10:	bf08      	it	eq
 800bb12:	2300      	moveq	r3, #0
 800bb14:	6102      	str	r2, [r0, #16]
 800bb16:	bf08      	it	eq
 800bb18:	6143      	streq	r3, [r0, #20]
 800bb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb1e:	f8dc c000 	ldr.w	ip, [ip]
 800bb22:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb26:	ea4c 0707 	orr.w	r7, ip, r7
 800bb2a:	f849 7b04 	str.w	r7, [r9], #4
 800bb2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb32:	40cf      	lsrs	r7, r1
 800bb34:	e7da      	b.n	800baec <rshift+0x4c>
 800bb36:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb3a:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb3e:	e7c3      	b.n	800bac8 <rshift+0x28>
 800bb40:	4623      	mov	r3, r4
 800bb42:	e7e1      	b.n	800bb08 <rshift+0x68>

0800bb44 <__hexdig_fun>:
 800bb44:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb48:	2b09      	cmp	r3, #9
 800bb4a:	d802      	bhi.n	800bb52 <__hexdig_fun+0xe>
 800bb4c:	3820      	subs	r0, #32
 800bb4e:	b2c0      	uxtb	r0, r0
 800bb50:	4770      	bx	lr
 800bb52:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb56:	2b05      	cmp	r3, #5
 800bb58:	d801      	bhi.n	800bb5e <__hexdig_fun+0x1a>
 800bb5a:	3847      	subs	r0, #71	; 0x47
 800bb5c:	e7f7      	b.n	800bb4e <__hexdig_fun+0xa>
 800bb5e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb62:	2b05      	cmp	r3, #5
 800bb64:	d801      	bhi.n	800bb6a <__hexdig_fun+0x26>
 800bb66:	3827      	subs	r0, #39	; 0x27
 800bb68:	e7f1      	b.n	800bb4e <__hexdig_fun+0xa>
 800bb6a:	2000      	movs	r0, #0
 800bb6c:	4770      	bx	lr
	...

0800bb70 <__gethex>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	4617      	mov	r7, r2
 800bb76:	680a      	ldr	r2, [r1, #0]
 800bb78:	b085      	sub	sp, #20
 800bb7a:	f102 0b02 	add.w	fp, r2, #2
 800bb7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb86:	4681      	mov	r9, r0
 800bb88:	468a      	mov	sl, r1
 800bb8a:	9302      	str	r3, [sp, #8]
 800bb8c:	32fe      	adds	r2, #254	; 0xfe
 800bb8e:	eb02 030b 	add.w	r3, r2, fp
 800bb92:	46d8      	mov	r8, fp
 800bb94:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bb98:	9301      	str	r3, [sp, #4]
 800bb9a:	2830      	cmp	r0, #48	; 0x30
 800bb9c:	d0f7      	beq.n	800bb8e <__gethex+0x1e>
 800bb9e:	f7ff ffd1 	bl	800bb44 <__hexdig_fun>
 800bba2:	4604      	mov	r4, r0
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d138      	bne.n	800bc1a <__gethex+0xaa>
 800bba8:	49a7      	ldr	r1, [pc, #668]	; (800be48 <__gethex+0x2d8>)
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4640      	mov	r0, r8
 800bbae:	f7ff fee4 	bl	800b97a <strncmp>
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d169      	bne.n	800bc8c <__gethex+0x11c>
 800bbb8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bbbc:	465d      	mov	r5, fp
 800bbbe:	f7ff ffc1 	bl	800bb44 <__hexdig_fun>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d064      	beq.n	800bc90 <__gethex+0x120>
 800bbc6:	465a      	mov	r2, fp
 800bbc8:	7810      	ldrb	r0, [r2, #0]
 800bbca:	2830      	cmp	r0, #48	; 0x30
 800bbcc:	4690      	mov	r8, r2
 800bbce:	f102 0201 	add.w	r2, r2, #1
 800bbd2:	d0f9      	beq.n	800bbc8 <__gethex+0x58>
 800bbd4:	f7ff ffb6 	bl	800bb44 <__hexdig_fun>
 800bbd8:	2301      	movs	r3, #1
 800bbda:	fab0 f480 	clz	r4, r0
 800bbde:	0964      	lsrs	r4, r4, #5
 800bbe0:	465e      	mov	r6, fp
 800bbe2:	9301      	str	r3, [sp, #4]
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	4615      	mov	r5, r2
 800bbe8:	3201      	adds	r2, #1
 800bbea:	7828      	ldrb	r0, [r5, #0]
 800bbec:	f7ff ffaa 	bl	800bb44 <__hexdig_fun>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d1f8      	bne.n	800bbe6 <__gethex+0x76>
 800bbf4:	4994      	ldr	r1, [pc, #592]	; (800be48 <__gethex+0x2d8>)
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	f7ff febe 	bl	800b97a <strncmp>
 800bbfe:	b978      	cbnz	r0, 800bc20 <__gethex+0xb0>
 800bc00:	b946      	cbnz	r6, 800bc14 <__gethex+0xa4>
 800bc02:	1c6e      	adds	r6, r5, #1
 800bc04:	4632      	mov	r2, r6
 800bc06:	4615      	mov	r5, r2
 800bc08:	3201      	adds	r2, #1
 800bc0a:	7828      	ldrb	r0, [r5, #0]
 800bc0c:	f7ff ff9a 	bl	800bb44 <__hexdig_fun>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d1f8      	bne.n	800bc06 <__gethex+0x96>
 800bc14:	1b73      	subs	r3, r6, r5
 800bc16:	009e      	lsls	r6, r3, #2
 800bc18:	e004      	b.n	800bc24 <__gethex+0xb4>
 800bc1a:	2400      	movs	r4, #0
 800bc1c:	4626      	mov	r6, r4
 800bc1e:	e7e1      	b.n	800bbe4 <__gethex+0x74>
 800bc20:	2e00      	cmp	r6, #0
 800bc22:	d1f7      	bne.n	800bc14 <__gethex+0xa4>
 800bc24:	782b      	ldrb	r3, [r5, #0]
 800bc26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc2a:	2b50      	cmp	r3, #80	; 0x50
 800bc2c:	d13d      	bne.n	800bcaa <__gethex+0x13a>
 800bc2e:	786b      	ldrb	r3, [r5, #1]
 800bc30:	2b2b      	cmp	r3, #43	; 0x2b
 800bc32:	d02f      	beq.n	800bc94 <__gethex+0x124>
 800bc34:	2b2d      	cmp	r3, #45	; 0x2d
 800bc36:	d031      	beq.n	800bc9c <__gethex+0x12c>
 800bc38:	1c69      	adds	r1, r5, #1
 800bc3a:	f04f 0b00 	mov.w	fp, #0
 800bc3e:	7808      	ldrb	r0, [r1, #0]
 800bc40:	f7ff ff80 	bl	800bb44 <__hexdig_fun>
 800bc44:	1e42      	subs	r2, r0, #1
 800bc46:	b2d2      	uxtb	r2, r2
 800bc48:	2a18      	cmp	r2, #24
 800bc4a:	d82e      	bhi.n	800bcaa <__gethex+0x13a>
 800bc4c:	f1a0 0210 	sub.w	r2, r0, #16
 800bc50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc54:	f7ff ff76 	bl	800bb44 <__hexdig_fun>
 800bc58:	f100 3cff 	add.w	ip, r0, #4294967295
 800bc5c:	fa5f fc8c 	uxtb.w	ip, ip
 800bc60:	f1bc 0f18 	cmp.w	ip, #24
 800bc64:	d91d      	bls.n	800bca2 <__gethex+0x132>
 800bc66:	f1bb 0f00 	cmp.w	fp, #0
 800bc6a:	d000      	beq.n	800bc6e <__gethex+0xfe>
 800bc6c:	4252      	negs	r2, r2
 800bc6e:	4416      	add	r6, r2
 800bc70:	f8ca 1000 	str.w	r1, [sl]
 800bc74:	b1dc      	cbz	r4, 800bcae <__gethex+0x13e>
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bf14      	ite	ne
 800bc7c:	f04f 0800 	movne.w	r8, #0
 800bc80:	f04f 0806 	moveq.w	r8, #6
 800bc84:	4640      	mov	r0, r8
 800bc86:	b005      	add	sp, #20
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc8c:	4645      	mov	r5, r8
 800bc8e:	4626      	mov	r6, r4
 800bc90:	2401      	movs	r4, #1
 800bc92:	e7c7      	b.n	800bc24 <__gethex+0xb4>
 800bc94:	f04f 0b00 	mov.w	fp, #0
 800bc98:	1ca9      	adds	r1, r5, #2
 800bc9a:	e7d0      	b.n	800bc3e <__gethex+0xce>
 800bc9c:	f04f 0b01 	mov.w	fp, #1
 800bca0:	e7fa      	b.n	800bc98 <__gethex+0x128>
 800bca2:	230a      	movs	r3, #10
 800bca4:	fb03 0002 	mla	r0, r3, r2, r0
 800bca8:	e7d0      	b.n	800bc4c <__gethex+0xdc>
 800bcaa:	4629      	mov	r1, r5
 800bcac:	e7e0      	b.n	800bc70 <__gethex+0x100>
 800bcae:	eba5 0308 	sub.w	r3, r5, r8
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	2b07      	cmp	r3, #7
 800bcb8:	dc0a      	bgt.n	800bcd0 <__gethex+0x160>
 800bcba:	4648      	mov	r0, r9
 800bcbc:	f7fd fc86 	bl	80095cc <_Balloc>
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	b940      	cbnz	r0, 800bcd6 <__gethex+0x166>
 800bcc4:	4b61      	ldr	r3, [pc, #388]	; (800be4c <__gethex+0x2dc>)
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	21e4      	movs	r1, #228	; 0xe4
 800bcca:	4861      	ldr	r0, [pc, #388]	; (800be50 <__gethex+0x2e0>)
 800bccc:	f7ff fea8 	bl	800ba20 <__assert_func>
 800bcd0:	3101      	adds	r1, #1
 800bcd2:	105b      	asrs	r3, r3, #1
 800bcd4:	e7ef      	b.n	800bcb6 <__gethex+0x146>
 800bcd6:	f100 0a14 	add.w	sl, r0, #20
 800bcda:	2300      	movs	r3, #0
 800bcdc:	495a      	ldr	r1, [pc, #360]	; (800be48 <__gethex+0x2d8>)
 800bcde:	f8cd a004 	str.w	sl, [sp, #4]
 800bce2:	469b      	mov	fp, r3
 800bce4:	45a8      	cmp	r8, r5
 800bce6:	d342      	bcc.n	800bd6e <__gethex+0x1fe>
 800bce8:	9801      	ldr	r0, [sp, #4]
 800bcea:	f840 bb04 	str.w	fp, [r0], #4
 800bcee:	eba0 000a 	sub.w	r0, r0, sl
 800bcf2:	1080      	asrs	r0, r0, #2
 800bcf4:	6120      	str	r0, [r4, #16]
 800bcf6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bcfa:	4658      	mov	r0, fp
 800bcfc:	f7fd fd58 	bl	80097b0 <__hi0bits>
 800bd00:	683d      	ldr	r5, [r7, #0]
 800bd02:	eba8 0000 	sub.w	r0, r8, r0
 800bd06:	42a8      	cmp	r0, r5
 800bd08:	dd59      	ble.n	800bdbe <__gethex+0x24e>
 800bd0a:	eba0 0805 	sub.w	r8, r0, r5
 800bd0e:	4641      	mov	r1, r8
 800bd10:	4620      	mov	r0, r4
 800bd12:	f7fe f8e7 	bl	8009ee4 <__any_on>
 800bd16:	4683      	mov	fp, r0
 800bd18:	b1b8      	cbz	r0, 800bd4a <__gethex+0x1da>
 800bd1a:	f108 33ff 	add.w	r3, r8, #4294967295
 800bd1e:	1159      	asrs	r1, r3, #5
 800bd20:	f003 021f 	and.w	r2, r3, #31
 800bd24:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd28:	f04f 0b01 	mov.w	fp, #1
 800bd2c:	fa0b f202 	lsl.w	r2, fp, r2
 800bd30:	420a      	tst	r2, r1
 800bd32:	d00a      	beq.n	800bd4a <__gethex+0x1da>
 800bd34:	455b      	cmp	r3, fp
 800bd36:	dd06      	ble.n	800bd46 <__gethex+0x1d6>
 800bd38:	f1a8 0102 	sub.w	r1, r8, #2
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7fe f8d1 	bl	8009ee4 <__any_on>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d138      	bne.n	800bdb8 <__gethex+0x248>
 800bd46:	f04f 0b02 	mov.w	fp, #2
 800bd4a:	4641      	mov	r1, r8
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f7ff fea7 	bl	800baa0 <rshift>
 800bd52:	4446      	add	r6, r8
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	42b3      	cmp	r3, r6
 800bd58:	da41      	bge.n	800bdde <__gethex+0x26e>
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4648      	mov	r0, r9
 800bd5e:	f7fd fc75 	bl	800964c <_Bfree>
 800bd62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd64:	2300      	movs	r3, #0
 800bd66:	6013      	str	r3, [r2, #0]
 800bd68:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bd6c:	e78a      	b.n	800bc84 <__gethex+0x114>
 800bd6e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bd72:	2a2e      	cmp	r2, #46	; 0x2e
 800bd74:	d014      	beq.n	800bda0 <__gethex+0x230>
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	d106      	bne.n	800bd88 <__gethex+0x218>
 800bd7a:	9b01      	ldr	r3, [sp, #4]
 800bd7c:	f843 bb04 	str.w	fp, [r3], #4
 800bd80:	f04f 0b00 	mov.w	fp, #0
 800bd84:	9301      	str	r3, [sp, #4]
 800bd86:	465b      	mov	r3, fp
 800bd88:	7828      	ldrb	r0, [r5, #0]
 800bd8a:	9303      	str	r3, [sp, #12]
 800bd8c:	f7ff feda 	bl	800bb44 <__hexdig_fun>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	f000 000f 	and.w	r0, r0, #15
 800bd96:	4098      	lsls	r0, r3
 800bd98:	ea4b 0b00 	orr.w	fp, fp, r0
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	e7a1      	b.n	800bce4 <__gethex+0x174>
 800bda0:	45a8      	cmp	r8, r5
 800bda2:	d8e8      	bhi.n	800bd76 <__gethex+0x206>
 800bda4:	2201      	movs	r2, #1
 800bda6:	4628      	mov	r0, r5
 800bda8:	9303      	str	r3, [sp, #12]
 800bdaa:	f7ff fde6 	bl	800b97a <strncmp>
 800bdae:	4926      	ldr	r1, [pc, #152]	; (800be48 <__gethex+0x2d8>)
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d1df      	bne.n	800bd76 <__gethex+0x206>
 800bdb6:	e795      	b.n	800bce4 <__gethex+0x174>
 800bdb8:	f04f 0b03 	mov.w	fp, #3
 800bdbc:	e7c5      	b.n	800bd4a <__gethex+0x1da>
 800bdbe:	da0b      	bge.n	800bdd8 <__gethex+0x268>
 800bdc0:	eba5 0800 	sub.w	r8, r5, r0
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	4642      	mov	r2, r8
 800bdc8:	4648      	mov	r0, r9
 800bdca:	f7fd fe59 	bl	8009a80 <__lshift>
 800bdce:	eba6 0608 	sub.w	r6, r6, r8
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	f100 0a14 	add.w	sl, r0, #20
 800bdd8:	f04f 0b00 	mov.w	fp, #0
 800bddc:	e7ba      	b.n	800bd54 <__gethex+0x1e4>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	42b3      	cmp	r3, r6
 800bde2:	dd73      	ble.n	800becc <__gethex+0x35c>
 800bde4:	1b9e      	subs	r6, r3, r6
 800bde6:	42b5      	cmp	r5, r6
 800bde8:	dc34      	bgt.n	800be54 <__gethex+0x2e4>
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d023      	beq.n	800be38 <__gethex+0x2c8>
 800bdf0:	2b03      	cmp	r3, #3
 800bdf2:	d025      	beq.n	800be40 <__gethex+0x2d0>
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d115      	bne.n	800be24 <__gethex+0x2b4>
 800bdf8:	42b5      	cmp	r5, r6
 800bdfa:	d113      	bne.n	800be24 <__gethex+0x2b4>
 800bdfc:	2d01      	cmp	r5, #1
 800bdfe:	d10b      	bne.n	800be18 <__gethex+0x2a8>
 800be00:	9a02      	ldr	r2, [sp, #8]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	2301      	movs	r3, #1
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	f8ca 3000 	str.w	r3, [sl]
 800be0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be10:	f04f 0862 	mov.w	r8, #98	; 0x62
 800be14:	601c      	str	r4, [r3, #0]
 800be16:	e735      	b.n	800bc84 <__gethex+0x114>
 800be18:	1e69      	subs	r1, r5, #1
 800be1a:	4620      	mov	r0, r4
 800be1c:	f7fe f862 	bl	8009ee4 <__any_on>
 800be20:	2800      	cmp	r0, #0
 800be22:	d1ed      	bne.n	800be00 <__gethex+0x290>
 800be24:	4621      	mov	r1, r4
 800be26:	4648      	mov	r0, r9
 800be28:	f7fd fc10 	bl	800964c <_Bfree>
 800be2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be2e:	2300      	movs	r3, #0
 800be30:	6013      	str	r3, [r2, #0]
 800be32:	f04f 0850 	mov.w	r8, #80	; 0x50
 800be36:	e725      	b.n	800bc84 <__gethex+0x114>
 800be38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1f2      	bne.n	800be24 <__gethex+0x2b4>
 800be3e:	e7df      	b.n	800be00 <__gethex+0x290>
 800be40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1dc      	bne.n	800be00 <__gethex+0x290>
 800be46:	e7ed      	b.n	800be24 <__gethex+0x2b4>
 800be48:	0800cb04 	.word	0x0800cb04
 800be4c:	0800c99a 	.word	0x0800c99a
 800be50:	0800cd2c 	.word	0x0800cd2c
 800be54:	f106 38ff 	add.w	r8, r6, #4294967295
 800be58:	f1bb 0f00 	cmp.w	fp, #0
 800be5c:	d133      	bne.n	800bec6 <__gethex+0x356>
 800be5e:	f1b8 0f00 	cmp.w	r8, #0
 800be62:	d004      	beq.n	800be6e <__gethex+0x2fe>
 800be64:	4641      	mov	r1, r8
 800be66:	4620      	mov	r0, r4
 800be68:	f7fe f83c 	bl	8009ee4 <__any_on>
 800be6c:	4683      	mov	fp, r0
 800be6e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800be72:	2301      	movs	r3, #1
 800be74:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800be78:	f008 081f 	and.w	r8, r8, #31
 800be7c:	fa03 f308 	lsl.w	r3, r3, r8
 800be80:	4213      	tst	r3, r2
 800be82:	4631      	mov	r1, r6
 800be84:	4620      	mov	r0, r4
 800be86:	bf18      	it	ne
 800be88:	f04b 0b02 	orrne.w	fp, fp, #2
 800be8c:	1bad      	subs	r5, r5, r6
 800be8e:	f7ff fe07 	bl	800baa0 <rshift>
 800be92:	687e      	ldr	r6, [r7, #4]
 800be94:	f04f 0802 	mov.w	r8, #2
 800be98:	f1bb 0f00 	cmp.w	fp, #0
 800be9c:	d04a      	beq.n	800bf34 <__gethex+0x3c4>
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b02      	cmp	r3, #2
 800bea2:	d016      	beq.n	800bed2 <__gethex+0x362>
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d018      	beq.n	800beda <__gethex+0x36a>
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d109      	bne.n	800bec0 <__gethex+0x350>
 800beac:	f01b 0f02 	tst.w	fp, #2
 800beb0:	d006      	beq.n	800bec0 <__gethex+0x350>
 800beb2:	f8da 3000 	ldr.w	r3, [sl]
 800beb6:	ea4b 0b03 	orr.w	fp, fp, r3
 800beba:	f01b 0f01 	tst.w	fp, #1
 800bebe:	d10f      	bne.n	800bee0 <__gethex+0x370>
 800bec0:	f048 0810 	orr.w	r8, r8, #16
 800bec4:	e036      	b.n	800bf34 <__gethex+0x3c4>
 800bec6:	f04f 0b01 	mov.w	fp, #1
 800beca:	e7d0      	b.n	800be6e <__gethex+0x2fe>
 800becc:	f04f 0801 	mov.w	r8, #1
 800bed0:	e7e2      	b.n	800be98 <__gethex+0x328>
 800bed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bed4:	f1c3 0301 	rsb	r3, r3, #1
 800bed8:	930f      	str	r3, [sp, #60]	; 0x3c
 800beda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d0ef      	beq.n	800bec0 <__gethex+0x350>
 800bee0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bee4:	f104 0214 	add.w	r2, r4, #20
 800bee8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bef2:	2300      	movs	r3, #0
 800bef4:	4694      	mov	ip, r2
 800bef6:	f852 1b04 	ldr.w	r1, [r2], #4
 800befa:	f1b1 3fff 	cmp.w	r1, #4294967295
 800befe:	d01e      	beq.n	800bf3e <__gethex+0x3ce>
 800bf00:	3101      	adds	r1, #1
 800bf02:	f8cc 1000 	str.w	r1, [ip]
 800bf06:	f1b8 0f02 	cmp.w	r8, #2
 800bf0a:	f104 0214 	add.w	r2, r4, #20
 800bf0e:	d13d      	bne.n	800bf8c <__gethex+0x41c>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	42ab      	cmp	r3, r5
 800bf16:	d10b      	bne.n	800bf30 <__gethex+0x3c0>
 800bf18:	1169      	asrs	r1, r5, #5
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	f005 051f 	and.w	r5, r5, #31
 800bf20:	fa03 f505 	lsl.w	r5, r3, r5
 800bf24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf28:	421d      	tst	r5, r3
 800bf2a:	bf18      	it	ne
 800bf2c:	f04f 0801 	movne.w	r8, #1
 800bf30:	f048 0820 	orr.w	r8, r8, #32
 800bf34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf36:	601c      	str	r4, [r3, #0]
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	601e      	str	r6, [r3, #0]
 800bf3c:	e6a2      	b.n	800bc84 <__gethex+0x114>
 800bf3e:	4290      	cmp	r0, r2
 800bf40:	f842 3c04 	str.w	r3, [r2, #-4]
 800bf44:	d8d6      	bhi.n	800bef4 <__gethex+0x384>
 800bf46:	68a2      	ldr	r2, [r4, #8]
 800bf48:	4593      	cmp	fp, r2
 800bf4a:	db17      	blt.n	800bf7c <__gethex+0x40c>
 800bf4c:	6861      	ldr	r1, [r4, #4]
 800bf4e:	4648      	mov	r0, r9
 800bf50:	3101      	adds	r1, #1
 800bf52:	f7fd fb3b 	bl	80095cc <_Balloc>
 800bf56:	4682      	mov	sl, r0
 800bf58:	b918      	cbnz	r0, 800bf62 <__gethex+0x3f2>
 800bf5a:	4b1b      	ldr	r3, [pc, #108]	; (800bfc8 <__gethex+0x458>)
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	2184      	movs	r1, #132	; 0x84
 800bf60:	e6b3      	b.n	800bcca <__gethex+0x15a>
 800bf62:	6922      	ldr	r2, [r4, #16]
 800bf64:	3202      	adds	r2, #2
 800bf66:	f104 010c 	add.w	r1, r4, #12
 800bf6a:	0092      	lsls	r2, r2, #2
 800bf6c:	300c      	adds	r0, #12
 800bf6e:	f7fc fb3f 	bl	80085f0 <memcpy>
 800bf72:	4621      	mov	r1, r4
 800bf74:	4648      	mov	r0, r9
 800bf76:	f7fd fb69 	bl	800964c <_Bfree>
 800bf7a:	4654      	mov	r4, sl
 800bf7c:	6922      	ldr	r2, [r4, #16]
 800bf7e:	1c51      	adds	r1, r2, #1
 800bf80:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bf84:	6121      	str	r1, [r4, #16]
 800bf86:	2101      	movs	r1, #1
 800bf88:	6151      	str	r1, [r2, #20]
 800bf8a:	e7bc      	b.n	800bf06 <__gethex+0x396>
 800bf8c:	6921      	ldr	r1, [r4, #16]
 800bf8e:	4559      	cmp	r1, fp
 800bf90:	dd0b      	ble.n	800bfaa <__gethex+0x43a>
 800bf92:	2101      	movs	r1, #1
 800bf94:	4620      	mov	r0, r4
 800bf96:	f7ff fd83 	bl	800baa0 <rshift>
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	3601      	adds	r6, #1
 800bf9e:	42b3      	cmp	r3, r6
 800bfa0:	f6ff aedb 	blt.w	800bd5a <__gethex+0x1ea>
 800bfa4:	f04f 0801 	mov.w	r8, #1
 800bfa8:	e7c2      	b.n	800bf30 <__gethex+0x3c0>
 800bfaa:	f015 051f 	ands.w	r5, r5, #31
 800bfae:	d0f9      	beq.n	800bfa4 <__gethex+0x434>
 800bfb0:	9b01      	ldr	r3, [sp, #4]
 800bfb2:	441a      	add	r2, r3
 800bfb4:	f1c5 0520 	rsb	r5, r5, #32
 800bfb8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bfbc:	f7fd fbf8 	bl	80097b0 <__hi0bits>
 800bfc0:	42a8      	cmp	r0, r5
 800bfc2:	dbe6      	blt.n	800bf92 <__gethex+0x422>
 800bfc4:	e7ee      	b.n	800bfa4 <__gethex+0x434>
 800bfc6:	bf00      	nop
 800bfc8:	0800c99a 	.word	0x0800c99a

0800bfcc <L_shift>:
 800bfcc:	f1c2 0208 	rsb	r2, r2, #8
 800bfd0:	0092      	lsls	r2, r2, #2
 800bfd2:	b570      	push	{r4, r5, r6, lr}
 800bfd4:	f1c2 0620 	rsb	r6, r2, #32
 800bfd8:	6843      	ldr	r3, [r0, #4]
 800bfda:	6804      	ldr	r4, [r0, #0]
 800bfdc:	fa03 f506 	lsl.w	r5, r3, r6
 800bfe0:	432c      	orrs	r4, r5
 800bfe2:	40d3      	lsrs	r3, r2
 800bfe4:	6004      	str	r4, [r0, #0]
 800bfe6:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfea:	4288      	cmp	r0, r1
 800bfec:	d3f4      	bcc.n	800bfd8 <L_shift+0xc>
 800bfee:	bd70      	pop	{r4, r5, r6, pc}

0800bff0 <__match>:
 800bff0:	b530      	push	{r4, r5, lr}
 800bff2:	6803      	ldr	r3, [r0, #0]
 800bff4:	3301      	adds	r3, #1
 800bff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bffa:	b914      	cbnz	r4, 800c002 <__match+0x12>
 800bffc:	6003      	str	r3, [r0, #0]
 800bffe:	2001      	movs	r0, #1
 800c000:	bd30      	pop	{r4, r5, pc}
 800c002:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c00a:	2d19      	cmp	r5, #25
 800c00c:	bf98      	it	ls
 800c00e:	3220      	addls	r2, #32
 800c010:	42a2      	cmp	r2, r4
 800c012:	d0f0      	beq.n	800bff6 <__match+0x6>
 800c014:	2000      	movs	r0, #0
 800c016:	e7f3      	b.n	800c000 <__match+0x10>

0800c018 <__hexnan>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	680b      	ldr	r3, [r1, #0]
 800c01e:	6801      	ldr	r1, [r0, #0]
 800c020:	115e      	asrs	r6, r3, #5
 800c022:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c026:	f013 031f 	ands.w	r3, r3, #31
 800c02a:	b087      	sub	sp, #28
 800c02c:	bf18      	it	ne
 800c02e:	3604      	addne	r6, #4
 800c030:	2500      	movs	r5, #0
 800c032:	1f37      	subs	r7, r6, #4
 800c034:	4682      	mov	sl, r0
 800c036:	4690      	mov	r8, r2
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c03e:	46b9      	mov	r9, r7
 800c040:	463c      	mov	r4, r7
 800c042:	9502      	str	r5, [sp, #8]
 800c044:	46ab      	mov	fp, r5
 800c046:	784a      	ldrb	r2, [r1, #1]
 800c048:	1c4b      	adds	r3, r1, #1
 800c04a:	9303      	str	r3, [sp, #12]
 800c04c:	b342      	cbz	r2, 800c0a0 <__hexnan+0x88>
 800c04e:	4610      	mov	r0, r2
 800c050:	9105      	str	r1, [sp, #20]
 800c052:	9204      	str	r2, [sp, #16]
 800c054:	f7ff fd76 	bl	800bb44 <__hexdig_fun>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d14f      	bne.n	800c0fc <__hexnan+0xe4>
 800c05c:	9a04      	ldr	r2, [sp, #16]
 800c05e:	9905      	ldr	r1, [sp, #20]
 800c060:	2a20      	cmp	r2, #32
 800c062:	d818      	bhi.n	800c096 <__hexnan+0x7e>
 800c064:	9b02      	ldr	r3, [sp, #8]
 800c066:	459b      	cmp	fp, r3
 800c068:	dd13      	ble.n	800c092 <__hexnan+0x7a>
 800c06a:	454c      	cmp	r4, r9
 800c06c:	d206      	bcs.n	800c07c <__hexnan+0x64>
 800c06e:	2d07      	cmp	r5, #7
 800c070:	dc04      	bgt.n	800c07c <__hexnan+0x64>
 800c072:	462a      	mov	r2, r5
 800c074:	4649      	mov	r1, r9
 800c076:	4620      	mov	r0, r4
 800c078:	f7ff ffa8 	bl	800bfcc <L_shift>
 800c07c:	4544      	cmp	r4, r8
 800c07e:	d950      	bls.n	800c122 <__hexnan+0x10a>
 800c080:	2300      	movs	r3, #0
 800c082:	f1a4 0904 	sub.w	r9, r4, #4
 800c086:	f844 3c04 	str.w	r3, [r4, #-4]
 800c08a:	f8cd b008 	str.w	fp, [sp, #8]
 800c08e:	464c      	mov	r4, r9
 800c090:	461d      	mov	r5, r3
 800c092:	9903      	ldr	r1, [sp, #12]
 800c094:	e7d7      	b.n	800c046 <__hexnan+0x2e>
 800c096:	2a29      	cmp	r2, #41	; 0x29
 800c098:	d155      	bne.n	800c146 <__hexnan+0x12e>
 800c09a:	3102      	adds	r1, #2
 800c09c:	f8ca 1000 	str.w	r1, [sl]
 800c0a0:	f1bb 0f00 	cmp.w	fp, #0
 800c0a4:	d04f      	beq.n	800c146 <__hexnan+0x12e>
 800c0a6:	454c      	cmp	r4, r9
 800c0a8:	d206      	bcs.n	800c0b8 <__hexnan+0xa0>
 800c0aa:	2d07      	cmp	r5, #7
 800c0ac:	dc04      	bgt.n	800c0b8 <__hexnan+0xa0>
 800c0ae:	462a      	mov	r2, r5
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f7ff ff8a 	bl	800bfcc <L_shift>
 800c0b8:	4544      	cmp	r4, r8
 800c0ba:	d934      	bls.n	800c126 <__hexnan+0x10e>
 800c0bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c0c0:	4623      	mov	r3, r4
 800c0c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0ca:	429f      	cmp	r7, r3
 800c0cc:	d2f9      	bcs.n	800c0c2 <__hexnan+0xaa>
 800c0ce:	1b3b      	subs	r3, r7, r4
 800c0d0:	f023 0303 	bic.w	r3, r3, #3
 800c0d4:	3304      	adds	r3, #4
 800c0d6:	3e03      	subs	r6, #3
 800c0d8:	3401      	adds	r4, #1
 800c0da:	42a6      	cmp	r6, r4
 800c0dc:	bf38      	it	cc
 800c0de:	2304      	movcc	r3, #4
 800c0e0:	4443      	add	r3, r8
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f843 2b04 	str.w	r2, [r3], #4
 800c0e8:	429f      	cmp	r7, r3
 800c0ea:	d2fb      	bcs.n	800c0e4 <__hexnan+0xcc>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	b91b      	cbnz	r3, 800c0f8 <__hexnan+0xe0>
 800c0f0:	4547      	cmp	r7, r8
 800c0f2:	d126      	bne.n	800c142 <__hexnan+0x12a>
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	2005      	movs	r0, #5
 800c0fa:	e025      	b.n	800c148 <__hexnan+0x130>
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	2d08      	cmp	r5, #8
 800c100:	f10b 0b01 	add.w	fp, fp, #1
 800c104:	dd06      	ble.n	800c114 <__hexnan+0xfc>
 800c106:	4544      	cmp	r4, r8
 800c108:	d9c3      	bls.n	800c092 <__hexnan+0x7a>
 800c10a:	2300      	movs	r3, #0
 800c10c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c110:	2501      	movs	r5, #1
 800c112:	3c04      	subs	r4, #4
 800c114:	6822      	ldr	r2, [r4, #0]
 800c116:	f000 000f 	and.w	r0, r0, #15
 800c11a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c11e:	6020      	str	r0, [r4, #0]
 800c120:	e7b7      	b.n	800c092 <__hexnan+0x7a>
 800c122:	2508      	movs	r5, #8
 800c124:	e7b5      	b.n	800c092 <__hexnan+0x7a>
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d0df      	beq.n	800c0ec <__hexnan+0xd4>
 800c12c:	f1c3 0320 	rsb	r3, r3, #32
 800c130:	f04f 32ff 	mov.w	r2, #4294967295
 800c134:	40da      	lsrs	r2, r3
 800c136:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c13a:	4013      	ands	r3, r2
 800c13c:	f846 3c04 	str.w	r3, [r6, #-4]
 800c140:	e7d4      	b.n	800c0ec <__hexnan+0xd4>
 800c142:	3f04      	subs	r7, #4
 800c144:	e7d2      	b.n	800c0ec <__hexnan+0xd4>
 800c146:	2004      	movs	r0, #4
 800c148:	b007      	add	sp, #28
 800c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c14e <__ascii_mbtowc>:
 800c14e:	b082      	sub	sp, #8
 800c150:	b901      	cbnz	r1, 800c154 <__ascii_mbtowc+0x6>
 800c152:	a901      	add	r1, sp, #4
 800c154:	b142      	cbz	r2, 800c168 <__ascii_mbtowc+0x1a>
 800c156:	b14b      	cbz	r3, 800c16c <__ascii_mbtowc+0x1e>
 800c158:	7813      	ldrb	r3, [r2, #0]
 800c15a:	600b      	str	r3, [r1, #0]
 800c15c:	7812      	ldrb	r2, [r2, #0]
 800c15e:	1e10      	subs	r0, r2, #0
 800c160:	bf18      	it	ne
 800c162:	2001      	movne	r0, #1
 800c164:	b002      	add	sp, #8
 800c166:	4770      	bx	lr
 800c168:	4610      	mov	r0, r2
 800c16a:	e7fb      	b.n	800c164 <__ascii_mbtowc+0x16>
 800c16c:	f06f 0001 	mvn.w	r0, #1
 800c170:	e7f8      	b.n	800c164 <__ascii_mbtowc+0x16>

0800c172 <_realloc_r>:
 800c172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c176:	4680      	mov	r8, r0
 800c178:	4614      	mov	r4, r2
 800c17a:	460e      	mov	r6, r1
 800c17c:	b921      	cbnz	r1, 800c188 <_realloc_r+0x16>
 800c17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	4611      	mov	r1, r2
 800c184:	f7fd b996 	b.w	80094b4 <_malloc_r>
 800c188:	b92a      	cbnz	r2, 800c196 <_realloc_r+0x24>
 800c18a:	f7fd f8d3 	bl	8009334 <_free_r>
 800c18e:	4625      	mov	r5, r4
 800c190:	4628      	mov	r0, r5
 800c192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c196:	f000 f842 	bl	800c21e <_malloc_usable_size_r>
 800c19a:	4284      	cmp	r4, r0
 800c19c:	4607      	mov	r7, r0
 800c19e:	d802      	bhi.n	800c1a6 <_realloc_r+0x34>
 800c1a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1a4:	d812      	bhi.n	800c1cc <_realloc_r+0x5a>
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	f7fd f983 	bl	80094b4 <_malloc_r>
 800c1ae:	4605      	mov	r5, r0
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d0ed      	beq.n	800c190 <_realloc_r+0x1e>
 800c1b4:	42bc      	cmp	r4, r7
 800c1b6:	4622      	mov	r2, r4
 800c1b8:	4631      	mov	r1, r6
 800c1ba:	bf28      	it	cs
 800c1bc:	463a      	movcs	r2, r7
 800c1be:	f7fc fa17 	bl	80085f0 <memcpy>
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4640      	mov	r0, r8
 800c1c6:	f7fd f8b5 	bl	8009334 <_free_r>
 800c1ca:	e7e1      	b.n	800c190 <_realloc_r+0x1e>
 800c1cc:	4635      	mov	r5, r6
 800c1ce:	e7df      	b.n	800c190 <_realloc_r+0x1e>

0800c1d0 <__ascii_wctomb>:
 800c1d0:	b149      	cbz	r1, 800c1e6 <__ascii_wctomb+0x16>
 800c1d2:	2aff      	cmp	r2, #255	; 0xff
 800c1d4:	bf85      	ittet	hi
 800c1d6:	238a      	movhi	r3, #138	; 0x8a
 800c1d8:	6003      	strhi	r3, [r0, #0]
 800c1da:	700a      	strbls	r2, [r1, #0]
 800c1dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1e0:	bf98      	it	ls
 800c1e2:	2001      	movls	r0, #1
 800c1e4:	4770      	bx	lr
 800c1e6:	4608      	mov	r0, r1
 800c1e8:	4770      	bx	lr
	...

0800c1ec <fiprintf>:
 800c1ec:	b40e      	push	{r1, r2, r3}
 800c1ee:	b503      	push	{r0, r1, lr}
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	ab03      	add	r3, sp, #12
 800c1f4:	4805      	ldr	r0, [pc, #20]	; (800c20c <fiprintf+0x20>)
 800c1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	f000 f83f 	bl	800c280 <_vfiprintf_r>
 800c202:	b002      	add	sp, #8
 800c204:	f85d eb04 	ldr.w	lr, [sp], #4
 800c208:	b003      	add	sp, #12
 800c20a:	4770      	bx	lr
 800c20c:	20000074 	.word	0x20000074

0800c210 <abort>:
 800c210:	b508      	push	{r3, lr}
 800c212:	2006      	movs	r0, #6
 800c214:	f000 f976 	bl	800c504 <raise>
 800c218:	2001      	movs	r0, #1
 800c21a:	f7f6 fa33 	bl	8002684 <_exit>

0800c21e <_malloc_usable_size_r>:
 800c21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c222:	1f18      	subs	r0, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	bfbc      	itt	lt
 800c228:	580b      	ldrlt	r3, [r1, r0]
 800c22a:	18c0      	addlt	r0, r0, r3
 800c22c:	4770      	bx	lr

0800c22e <__sfputc_r>:
 800c22e:	6893      	ldr	r3, [r2, #8]
 800c230:	3b01      	subs	r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	b410      	push	{r4}
 800c236:	6093      	str	r3, [r2, #8]
 800c238:	da08      	bge.n	800c24c <__sfputc_r+0x1e>
 800c23a:	6994      	ldr	r4, [r2, #24]
 800c23c:	42a3      	cmp	r3, r4
 800c23e:	db01      	blt.n	800c244 <__sfputc_r+0x16>
 800c240:	290a      	cmp	r1, #10
 800c242:	d103      	bne.n	800c24c <__sfputc_r+0x1e>
 800c244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c248:	f7fb bb41 	b.w	80078ce <__swbuf_r>
 800c24c:	6813      	ldr	r3, [r2, #0]
 800c24e:	1c58      	adds	r0, r3, #1
 800c250:	6010      	str	r0, [r2, #0]
 800c252:	7019      	strb	r1, [r3, #0]
 800c254:	4608      	mov	r0, r1
 800c256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <__sfputs_r>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	4606      	mov	r6, r0
 800c260:	460f      	mov	r7, r1
 800c262:	4614      	mov	r4, r2
 800c264:	18d5      	adds	r5, r2, r3
 800c266:	42ac      	cmp	r4, r5
 800c268:	d101      	bne.n	800c26e <__sfputs_r+0x12>
 800c26a:	2000      	movs	r0, #0
 800c26c:	e007      	b.n	800c27e <__sfputs_r+0x22>
 800c26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c272:	463a      	mov	r2, r7
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff ffda 	bl	800c22e <__sfputc_r>
 800c27a:	1c43      	adds	r3, r0, #1
 800c27c:	d1f3      	bne.n	800c266 <__sfputs_r+0xa>
 800c27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c280 <_vfiprintf_r>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	460d      	mov	r5, r1
 800c286:	b09d      	sub	sp, #116	; 0x74
 800c288:	4614      	mov	r4, r2
 800c28a:	4698      	mov	r8, r3
 800c28c:	4606      	mov	r6, r0
 800c28e:	b118      	cbz	r0, 800c298 <_vfiprintf_r+0x18>
 800c290:	6a03      	ldr	r3, [r0, #32]
 800c292:	b90b      	cbnz	r3, 800c298 <_vfiprintf_r+0x18>
 800c294:	f7fb f9c4 	bl	8007620 <__sinit>
 800c298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c29a:	07d9      	lsls	r1, r3, #31
 800c29c:	d405      	bmi.n	800c2aa <_vfiprintf_r+0x2a>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	059a      	lsls	r2, r3, #22
 800c2a2:	d402      	bmi.n	800c2aa <_vfiprintf_r+0x2a>
 800c2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2a6:	f7fc f998 	bl	80085da <__retarget_lock_acquire_recursive>
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	071b      	lsls	r3, r3, #28
 800c2ae:	d501      	bpl.n	800c2b4 <_vfiprintf_r+0x34>
 800c2b0:	692b      	ldr	r3, [r5, #16]
 800c2b2:	b99b      	cbnz	r3, 800c2dc <_vfiprintf_r+0x5c>
 800c2b4:	4629      	mov	r1, r5
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	f7fb fb46 	bl	8007948 <__swsetup_r>
 800c2bc:	b170      	cbz	r0, 800c2dc <_vfiprintf_r+0x5c>
 800c2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c2c0:	07dc      	lsls	r4, r3, #31
 800c2c2:	d504      	bpl.n	800c2ce <_vfiprintf_r+0x4e>
 800c2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c8:	b01d      	add	sp, #116	; 0x74
 800c2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ce:	89ab      	ldrh	r3, [r5, #12]
 800c2d0:	0598      	lsls	r0, r3, #22
 800c2d2:	d4f7      	bmi.n	800c2c4 <_vfiprintf_r+0x44>
 800c2d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2d6:	f7fc f982 	bl	80085de <__retarget_lock_release_recursive>
 800c2da:	e7f3      	b.n	800c2c4 <_vfiprintf_r+0x44>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e0:	2320      	movs	r3, #32
 800c2e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ea:	2330      	movs	r3, #48	; 0x30
 800c2ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c4a0 <_vfiprintf_r+0x220>
 800c2f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2f4:	f04f 0901 	mov.w	r9, #1
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	469a      	mov	sl, r3
 800c2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c300:	b10a      	cbz	r2, 800c306 <_vfiprintf_r+0x86>
 800c302:	2a25      	cmp	r2, #37	; 0x25
 800c304:	d1f9      	bne.n	800c2fa <_vfiprintf_r+0x7a>
 800c306:	ebba 0b04 	subs.w	fp, sl, r4
 800c30a:	d00b      	beq.n	800c324 <_vfiprintf_r+0xa4>
 800c30c:	465b      	mov	r3, fp
 800c30e:	4622      	mov	r2, r4
 800c310:	4629      	mov	r1, r5
 800c312:	4630      	mov	r0, r6
 800c314:	f7ff ffa2 	bl	800c25c <__sfputs_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	f000 80a9 	beq.w	800c470 <_vfiprintf_r+0x1f0>
 800c31e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c320:	445a      	add	r2, fp
 800c322:	9209      	str	r2, [sp, #36]	; 0x24
 800c324:	f89a 3000 	ldrb.w	r3, [sl]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f000 80a1 	beq.w	800c470 <_vfiprintf_r+0x1f0>
 800c32e:	2300      	movs	r3, #0
 800c330:	f04f 32ff 	mov.w	r2, #4294967295
 800c334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c338:	f10a 0a01 	add.w	sl, sl, #1
 800c33c:	9304      	str	r3, [sp, #16]
 800c33e:	9307      	str	r3, [sp, #28]
 800c340:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c344:	931a      	str	r3, [sp, #104]	; 0x68
 800c346:	4654      	mov	r4, sl
 800c348:	2205      	movs	r2, #5
 800c34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c34e:	4854      	ldr	r0, [pc, #336]	; (800c4a0 <_vfiprintf_r+0x220>)
 800c350:	f7f3 ff4e 	bl	80001f0 <memchr>
 800c354:	9a04      	ldr	r2, [sp, #16]
 800c356:	b9d8      	cbnz	r0, 800c390 <_vfiprintf_r+0x110>
 800c358:	06d1      	lsls	r1, r2, #27
 800c35a:	bf44      	itt	mi
 800c35c:	2320      	movmi	r3, #32
 800c35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c362:	0713      	lsls	r3, r2, #28
 800c364:	bf44      	itt	mi
 800c366:	232b      	movmi	r3, #43	; 0x2b
 800c368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c36c:	f89a 3000 	ldrb.w	r3, [sl]
 800c370:	2b2a      	cmp	r3, #42	; 0x2a
 800c372:	d015      	beq.n	800c3a0 <_vfiprintf_r+0x120>
 800c374:	9a07      	ldr	r2, [sp, #28]
 800c376:	4654      	mov	r4, sl
 800c378:	2000      	movs	r0, #0
 800c37a:	f04f 0c0a 	mov.w	ip, #10
 800c37e:	4621      	mov	r1, r4
 800c380:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c384:	3b30      	subs	r3, #48	; 0x30
 800c386:	2b09      	cmp	r3, #9
 800c388:	d94d      	bls.n	800c426 <_vfiprintf_r+0x1a6>
 800c38a:	b1b0      	cbz	r0, 800c3ba <_vfiprintf_r+0x13a>
 800c38c:	9207      	str	r2, [sp, #28]
 800c38e:	e014      	b.n	800c3ba <_vfiprintf_r+0x13a>
 800c390:	eba0 0308 	sub.w	r3, r0, r8
 800c394:	fa09 f303 	lsl.w	r3, r9, r3
 800c398:	4313      	orrs	r3, r2
 800c39a:	9304      	str	r3, [sp, #16]
 800c39c:	46a2      	mov	sl, r4
 800c39e:	e7d2      	b.n	800c346 <_vfiprintf_r+0xc6>
 800c3a0:	9b03      	ldr	r3, [sp, #12]
 800c3a2:	1d19      	adds	r1, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	9103      	str	r1, [sp, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	bfbb      	ittet	lt
 800c3ac:	425b      	neglt	r3, r3
 800c3ae:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b2:	9307      	strge	r3, [sp, #28]
 800c3b4:	9307      	strlt	r3, [sp, #28]
 800c3b6:	bfb8      	it	lt
 800c3b8:	9204      	strlt	r2, [sp, #16]
 800c3ba:	7823      	ldrb	r3, [r4, #0]
 800c3bc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3be:	d10c      	bne.n	800c3da <_vfiprintf_r+0x15a>
 800c3c0:	7863      	ldrb	r3, [r4, #1]
 800c3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c4:	d134      	bne.n	800c430 <_vfiprintf_r+0x1b0>
 800c3c6:	9b03      	ldr	r3, [sp, #12]
 800c3c8:	1d1a      	adds	r2, r3, #4
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	9203      	str	r2, [sp, #12]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	bfb8      	it	lt
 800c3d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3d6:	3402      	adds	r4, #2
 800c3d8:	9305      	str	r3, [sp, #20]
 800c3da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c4b0 <_vfiprintf_r+0x230>
 800c3de:	7821      	ldrb	r1, [r4, #0]
 800c3e0:	2203      	movs	r2, #3
 800c3e2:	4650      	mov	r0, sl
 800c3e4:	f7f3 ff04 	bl	80001f0 <memchr>
 800c3e8:	b138      	cbz	r0, 800c3fa <_vfiprintf_r+0x17a>
 800c3ea:	9b04      	ldr	r3, [sp, #16]
 800c3ec:	eba0 000a 	sub.w	r0, r0, sl
 800c3f0:	2240      	movs	r2, #64	; 0x40
 800c3f2:	4082      	lsls	r2, r0
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	3401      	adds	r4, #1
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3fe:	4829      	ldr	r0, [pc, #164]	; (800c4a4 <_vfiprintf_r+0x224>)
 800c400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c404:	2206      	movs	r2, #6
 800c406:	f7f3 fef3 	bl	80001f0 <memchr>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d03f      	beq.n	800c48e <_vfiprintf_r+0x20e>
 800c40e:	4b26      	ldr	r3, [pc, #152]	; (800c4a8 <_vfiprintf_r+0x228>)
 800c410:	bb1b      	cbnz	r3, 800c45a <_vfiprintf_r+0x1da>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	3307      	adds	r3, #7
 800c416:	f023 0307 	bic.w	r3, r3, #7
 800c41a:	3308      	adds	r3, #8
 800c41c:	9303      	str	r3, [sp, #12]
 800c41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c420:	443b      	add	r3, r7
 800c422:	9309      	str	r3, [sp, #36]	; 0x24
 800c424:	e768      	b.n	800c2f8 <_vfiprintf_r+0x78>
 800c426:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42a:	460c      	mov	r4, r1
 800c42c:	2001      	movs	r0, #1
 800c42e:	e7a6      	b.n	800c37e <_vfiprintf_r+0xfe>
 800c430:	2300      	movs	r3, #0
 800c432:	3401      	adds	r4, #1
 800c434:	9305      	str	r3, [sp, #20]
 800c436:	4619      	mov	r1, r3
 800c438:	f04f 0c0a 	mov.w	ip, #10
 800c43c:	4620      	mov	r0, r4
 800c43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c442:	3a30      	subs	r2, #48	; 0x30
 800c444:	2a09      	cmp	r2, #9
 800c446:	d903      	bls.n	800c450 <_vfiprintf_r+0x1d0>
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0c6      	beq.n	800c3da <_vfiprintf_r+0x15a>
 800c44c:	9105      	str	r1, [sp, #20]
 800c44e:	e7c4      	b.n	800c3da <_vfiprintf_r+0x15a>
 800c450:	fb0c 2101 	mla	r1, ip, r1, r2
 800c454:	4604      	mov	r4, r0
 800c456:	2301      	movs	r3, #1
 800c458:	e7f0      	b.n	800c43c <_vfiprintf_r+0x1bc>
 800c45a:	ab03      	add	r3, sp, #12
 800c45c:	9300      	str	r3, [sp, #0]
 800c45e:	462a      	mov	r2, r5
 800c460:	4b12      	ldr	r3, [pc, #72]	; (800c4ac <_vfiprintf_r+0x22c>)
 800c462:	a904      	add	r1, sp, #16
 800c464:	4630      	mov	r0, r6
 800c466:	f7fa fa8b 	bl	8006980 <_printf_float>
 800c46a:	4607      	mov	r7, r0
 800c46c:	1c78      	adds	r0, r7, #1
 800c46e:	d1d6      	bne.n	800c41e <_vfiprintf_r+0x19e>
 800c470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c472:	07d9      	lsls	r1, r3, #31
 800c474:	d405      	bmi.n	800c482 <_vfiprintf_r+0x202>
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	059a      	lsls	r2, r3, #22
 800c47a:	d402      	bmi.n	800c482 <_vfiprintf_r+0x202>
 800c47c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c47e:	f7fc f8ae 	bl	80085de <__retarget_lock_release_recursive>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	065b      	lsls	r3, r3, #25
 800c486:	f53f af1d 	bmi.w	800c2c4 <_vfiprintf_r+0x44>
 800c48a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c48c:	e71c      	b.n	800c2c8 <_vfiprintf_r+0x48>
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	462a      	mov	r2, r5
 800c494:	4b05      	ldr	r3, [pc, #20]	; (800c4ac <_vfiprintf_r+0x22c>)
 800c496:	a904      	add	r1, sp, #16
 800c498:	4630      	mov	r0, r6
 800c49a:	f7fa fd15 	bl	8006ec8 <_printf_i>
 800c49e:	e7e4      	b.n	800c46a <_vfiprintf_r+0x1ea>
 800c4a0:	0800cc59 	.word	0x0800cc59
 800c4a4:	0800cc63 	.word	0x0800cc63
 800c4a8:	08006981 	.word	0x08006981
 800c4ac:	0800c25d 	.word	0x0800c25d
 800c4b0:	0800cc5f 	.word	0x0800cc5f

0800c4b4 <_raise_r>:
 800c4b4:	291f      	cmp	r1, #31
 800c4b6:	b538      	push	{r3, r4, r5, lr}
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	460d      	mov	r5, r1
 800c4bc:	d904      	bls.n	800c4c8 <_raise_r+0x14>
 800c4be:	2316      	movs	r3, #22
 800c4c0:	6003      	str	r3, [r0, #0]
 800c4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c6:	bd38      	pop	{r3, r4, r5, pc}
 800c4c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c4ca:	b112      	cbz	r2, 800c4d2 <_raise_r+0x1e>
 800c4cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4d0:	b94b      	cbnz	r3, 800c4e6 <_raise_r+0x32>
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 f830 	bl	800c538 <_getpid_r>
 800c4d8:	462a      	mov	r2, r5
 800c4da:	4601      	mov	r1, r0
 800c4dc:	4620      	mov	r0, r4
 800c4de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4e2:	f000 b817 	b.w	800c514 <_kill_r>
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d00a      	beq.n	800c500 <_raise_r+0x4c>
 800c4ea:	1c59      	adds	r1, r3, #1
 800c4ec:	d103      	bne.n	800c4f6 <_raise_r+0x42>
 800c4ee:	2316      	movs	r3, #22
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	2001      	movs	r0, #1
 800c4f4:	e7e7      	b.n	800c4c6 <_raise_r+0x12>
 800c4f6:	2400      	movs	r4, #0
 800c4f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	4798      	blx	r3
 800c500:	2000      	movs	r0, #0
 800c502:	e7e0      	b.n	800c4c6 <_raise_r+0x12>

0800c504 <raise>:
 800c504:	4b02      	ldr	r3, [pc, #8]	; (800c510 <raise+0xc>)
 800c506:	4601      	mov	r1, r0
 800c508:	6818      	ldr	r0, [r3, #0]
 800c50a:	f7ff bfd3 	b.w	800c4b4 <_raise_r>
 800c50e:	bf00      	nop
 800c510:	20000074 	.word	0x20000074

0800c514 <_kill_r>:
 800c514:	b538      	push	{r3, r4, r5, lr}
 800c516:	4d07      	ldr	r5, [pc, #28]	; (800c534 <_kill_r+0x20>)
 800c518:	2300      	movs	r3, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	4608      	mov	r0, r1
 800c51e:	4611      	mov	r1, r2
 800c520:	602b      	str	r3, [r5, #0]
 800c522:	f7f6 f89f 	bl	8002664 <_kill>
 800c526:	1c43      	adds	r3, r0, #1
 800c528:	d102      	bne.n	800c530 <_kill_r+0x1c>
 800c52a:	682b      	ldr	r3, [r5, #0]
 800c52c:	b103      	cbz	r3, 800c530 <_kill_r+0x1c>
 800c52e:	6023      	str	r3, [r4, #0]
 800c530:	bd38      	pop	{r3, r4, r5, pc}
 800c532:	bf00      	nop
 800c534:	20000a00 	.word	0x20000a00

0800c538 <_getpid_r>:
 800c538:	f7f6 b88c 	b.w	8002654 <_getpid>

0800c53c <_init>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr

0800c548 <_fini>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr
